{"version":3,"sources":["constants/index.tsx","styledComponents/ShrinkNameButton.tsx","components/ContinueStartButton.tsx","components/ResetStartButton.tsx","components/NumberButtons.tsx","components/Rotations.tsx","components/StoreNames.tsx","App.tsx","index.tsx"],"names":["STORE_NAMES","STORE_NAMES_EXCHANGE_RATES_MAP","Map","ROTATION_MODE","ERROR_MSG","ShrinkNameButton","styled","Button","ContinueStartButton","props","variant","className","onClick","rotationNumberInputed","setRotations","rotations","concat","type","rotationNumber","Number","rotationRateMostRecent","rotationRate","clearRotationNumberInputed","error","alert","continueStart","ResetStartButton","id","isResetStarted","selectStoreRef","current","value","localStorage","setItem","format","Date","resetStart","NumberButtons","map","number","setRotationNumberInputed","Rotations","rotation","index","content","ListGroup","Item","StoreNames","$doms","disabled","hidden","$storeNames","storeNames","store","$domsConcated","axios","require","default","App","useState","setRotationRate","investmentCnt","setInvestmentCnt","rotationNumberTotal","setRotationNumberTotal","border","setBorder","storeName","setStoreName","machineName","setMachineName","ballNumberComfirm","setBallNumberComfirm","remarks","setRemarks","exchangeRate","setExchangeRate","rotationListRef","useRef","document","createElement","useEffect","investmentCntLocal","getItem","rotationsParsed","JSON","parse","storeNameLocal","machineNameLocal","ballNumberComfirmLocal","borderLocal","remarksLocal","length","calcRotationRate","totalRotationNumberCalculatted","forEach","idx","calcRotationNumberTotal","scrollTop","scrollHeight","stringify","storeExchangeRate","get","String","rotationUnitPrice","useMemo","toFixed","getWorkAmount","getBallNumberOnePush","has","Error","deleteAllRotation","window","confirm","getRotationNumberByShortInputIfNeeded","rotationNumberInputedClone","digitsLastRotation","numberBeCompared","slice","baseNumberSourceMayBeMovedUp","Container","Row","Col","rotationsLength","lastRotation","rotationsDeleted","filter","rotationNumberDiffShouldSub","deleteOneRotation","FormControl","onChange","event","target","placeholder","investmentCntNow","rotationNumberDiffFromLast","exchangeRateRatio","rotationNumberTotalNow","rotationRateNow","InputGroup","size","Prepend","Text","Form","Control","as","ref","rows","remarksInputed","now","date","timeStart","timeEnd","params","URLSearchParams","append","post","then","response","catch","writeWorkResultAndDeleteAllRotation","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.28fa14f5.chunk.js","sourcesContent":["import { TypeErrorMsg } from \"../types\";\n\n// 店名に関するもの\nexport const STORE_NAMES = [\"DoruNakano\", \"LiNakano\", \"NtNakano\"];\nexport const STORE_NAMES_EXCHANGE_RATES_MAP = new Map([\n  [STORE_NAMES[0], \"4.38\"],\n  [STORE_NAMES[1], \"4\"],\n  [STORE_NAMES[2], \"4\"],\n]);\n// 選択肢：店名の初期タイトル\nexport const SELECT_STORE_TITLE: string = \"店名を選択して下さい。\";\n// 通常の交換率\nexport const EXCHANGE_RATE_NORMAL: number = 4;\n// ワンプッシュ当たりの金額\nexport const AMOUNT_ONE_PUSH = 500;\n// スプレッドシートREST_URL\nexport const REST_URL_SPREADSHEET = \"https://script.google.com/macros/s/AKfycbwAEFQ6VWnrJ67EjQiYd8WeEv0D2ogBpV2GYDgxucx9C5gf1Dmd/exec\";\nexport const REPLENISHMENT_AMOUNT = 500;\n// 直近の回転率計算に用いる。\nexport const REPLENISHMENT_AMOUNT_RATIO = 1000 / REPLENISHMENT_AMOUNT;\n\nexport const ROTATION_MODE: { [key: string]: string } = {\n  normal: \"normal\",\n  continueStart: \"continueStart\",\n  resetStart: \"resetStart\",\n};\n\n// エラーメッセージ\nexport const ERROR_MSG: TypeErrorMsg = {\n  resetStart: \"リセットスタートをしましょう\",\n  resetStartedAlready: \"既にリセットスタートされています\",\n  rotaionNumberEmpty: \"回転数を入力しましょう\",\n  selectStore: \"店名を選択して下さい。\",\n  notExpectedStoreName: \"エラー可能性。存在しない店名が渡されました。\",\n};\n","import { Button } from \"react-bootstrap\";\nimport styled from \"styled-components\";\n\nexport const ShrinkNameButton = styled(Button)`\n  font-size: 0.4rem;\n`;\n","import React from \"react\";\nimport { ShrinkNameButton } from \"../styledComponents/ShrinkNameButton\";\nimport { TypeRotation } from \"../types\";\nimport { ERROR_MSG, ROTATION_MODE } from \"../constants\";\n\nexport function ContinueStartButton(props: {\n  rotationNumberInputed: string;\n  rotationRate: number;\n  rotations: TypeRotation[];\n  clearRotationNumberInputed: Function;\n  setRotations: Function;\n}) {\n  // 継続スタート\n  const continueStart = () => {\n    try {\n      if (props.rotationNumberInputed === \"\") {\n        throw ERROR_MSG.rotaionNumberEmpty;\n      }\n\n      props.setRotations(\n        props.rotations.concat({\n          type: ROTATION_MODE.continueStart,\n          rotationNumber: Number(props.rotationNumberInputed),\n          rotationRateMostRecent: 0,\n          rotationRate: props.rotationRate,\n        })\n      );\n\n      props.clearRotationNumberInputed();\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  return (\n    <>\n      <ShrinkNameButton variant=\"primary\" className=\"col-4\" onClick={() => continueStart()}>\n        継続スタート\n      </ShrinkNameButton>{\" \"}\n    </>\n  );\n}\n","import React from \"react\";\nimport { format } from \"date-fns\";\nimport { ShrinkNameButton } from \"../styledComponents/ShrinkNameButton\";\nimport { TypeRotation } from \"../types\";\nimport { ERROR_MSG, ROTATION_MODE } from \"../constants\";\n\nexport function ResetStartButton(props: {\n  rotationNumberInputed: string;\n  rotations: TypeRotation[];\n  selectStoreRef: React.MutableRefObject<HTMLSelectElement>;\n  isResetStarted: Function;\n  clearRotationNumberInputed: Function;\n  setRotations: Function;\n}) {\n  const resetStart = () => {\n    try {\n      if (props.isResetStarted()) {\n        throw ERROR_MSG.resetStartedAlready;\n      }\n      if (props.rotationNumberInputed === \"\") {\n        throw ERROR_MSG.rotaionNumberEmpty;\n      }\n      if (props.selectStoreRef.current.value === \"\") {\n        throw ERROR_MSG.selectStore;\n      }\n\n      props.setRotations(\n        props.rotations.concat({\n          type: ROTATION_MODE.resetStart,\n          rotationNumber: Number(props.rotationNumberInputed),\n          rotationRateMostRecent: 0,\n          rotationRate: 0,\n        })\n      );\n\n      props.clearRotationNumberInputed();\n\n      localStorage.setItem(\"startTime\", format(new Date(), \"HH:mm\"));\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  return (\n    <>\n      <ShrinkNameButton id=\"resetStartButton\" variant=\"primary\" className=\"col-4\" onClick={() => resetStart()}>\n        リセットスタート\n      </ShrinkNameButton>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nexport function NumberButtons(props: { setRotationNumberInputed: Function; rotationNumberInputed: string }) {\n  const numbers = [\"7\", \"8\", \"9\", \"4\", \"5\", \"6\", \"1\", \"2\", \"3\", \"0\"];\n  return (\n    <>\n      {numbers.map((number) => (\n        <Button key={number} variant=\"primary\" className=\"col-4\" onClick={() => props.setRotationNumberInputed(props.rotationNumberInputed + number)}>\n          {number}\n        </Button>\n      ))}\n    </>\n  );\n}\n","import React from \"react\";\nimport { TypeRotation } from \"../types\";\nimport { ROTATION_MODE } from \"../constants\";\nimport { ListGroup } from \"react-bootstrap\";\n\nexport function Rotations(props: { rotations: TypeRotation[] }) {\n  return (\n    <>\n      {props.rotations.map((rotation, index) => {\n        let content = \"\";\n        if (rotation.type === ROTATION_MODE.resetStart) {\n          content = `${rotation.rotationNumber} --start--`;\n        } else if (rotation.type === ROTATION_MODE.continueStart) {\n          content = `${rotation.rotationNumber} > start`;\n        } else if (rotation.type === ROTATION_MODE.normal) {\n          content = `${rotation.rotationNumber} ${rotation.rotationRateMostRecent} ${rotation.rotationRate}`;\n        }\n        return <ListGroup.Item key={index}>{content}</ListGroup.Item>;\n      })}\n    </>\n  );\n}\n","import React from \"react\";\nimport { TypeStoreName } from \"../types\";\nimport { SELECT_STORE_TITLE } from \"../constants\";\n\nexport function StoreNames(props: { storeNames: TypeStoreName[] }) {\n  const $doms = [\n    <option key={\"defaultValue\"} value=\"\" disabled hidden>\n      {SELECT_STORE_TITLE}\n    </option>,\n  ];\n  const $storeNames = props.storeNames.map((store: TypeStoreName) => {\n    return (\n      <option key={store} value={store}>\n        {store}\n      </option>\n    );\n  });\n\n  const $domsConcated = [$doms, ...$storeNames];\n\n  return <>{$domsConcated}</>;\n}\n","import React, { useState, useRef, useEffect, useMemo } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, FormControl, Form, Button, ListGroup, InputGroup } from \"react-bootstrap\";\nimport { format } from \"date-fns\";\n// 型定義インポート\nimport { TypeRotation } from \"./types\";\n// 定数定義インポート\nimport {\n  STORE_NAMES,\n  STORE_NAMES_EXCHANGE_RATES_MAP,\n  EXCHANGE_RATE_NORMAL,\n  AMOUNT_ONE_PUSH,\n  REST_URL_SPREADSHEET,\n  REPLENISHMENT_AMOUNT,\n  REPLENISHMENT_AMOUNT_RATIO,\n  ROTATION_MODE,\n  ERROR_MSG,\n} from \"./constants\";\n\nimport { ContinueStartButton } from \"./components/ContinueStartButton\";\nimport { ResetStartButton } from \"./components/ResetStartButton\";\nimport { NumberButtons } from \"./components/NumberButtons\";\nimport { Rotations } from \"./components/Rotations\";\nimport { StoreNames } from \"./components/StoreNames\";\n\nconst axios = require(\"axios\").default;\n\nfunction App() {\n  // useState定義\n  const [rotationNumberInputed, setRotationNumberInputed] = useState<string>(\"\");\n  const [rotations, setRotations] = useState<TypeRotation[]>([]);\n  const [rotationRate, setRotationRate] = useState(0);\n  const [investmentCnt, setInvestmentCnt] = useState(0);\n  const [rotationNumberTotal, setRotationNumberTotal] = useState(0);\n  const [border, setBorder] = useState<string>(\"18.0\");\n  const [storeName, setStoreName] = useState(\"\");\n  const [machineName, setMachineName] = useState(\"\");\n  const [ballNumberComfirm, setBallNumberComfirm] = useState(\"\");\n  const [remarks, setRemarks] = useState(\"\");\n  const [exchangeRate, setExchangeRate] = useState<string>(\"\");\n  // useRef定義\n  const rotationListRef = useRef<HTMLDivElement>(null);\n  const selectStoreRef = useRef<HTMLSelectElement>(document.createElement(\"select\"));\n\n  // 初回描画時に実行\n  useEffect(() => {\n    // ローカルストレージから各値を取得。\n    const investmentCntLocal: string = localStorage.getItem(\"investmentCnt\") || \"0\";\n    const rotationsParsed: TypeRotation[] = JSON.parse(localStorage.getItem(\"rotations\") || \"[]\");\n    const storeNameLocal: string = localStorage.getItem(\"storeName\") || \"\";\n    const machineNameLocal: string = localStorage.getItem(\"machineName\") || \"\";\n    const ballNumberComfirmLocal: string = localStorage.getItem(\"ballNumberComfirm\") || \"\";\n    const borderLocal: string = localStorage.getItem(\"border\") || \"\";\n    const remarksLocal: string = localStorage.getItem(\"remarks\") || \"\";\n\n    setInvestmentCnt(Number(investmentCntLocal));\n    setStoreName(storeNameLocal);\n    setRotations(rotationsParsed);\n    setMachineName(machineNameLocal);\n    setBallNumberComfirm(ballNumberComfirmLocal);\n    setBorder(borderLocal);\n    setRemarks(remarksLocal);\n    setRotationRate(calcRotationRate(rotationsParsed));\n    setRotationNumberTotal(calcRotationNumberTotal(rotationsParsed));\n  }, []);\n\n  useEffect(() => {\n    (rotationListRef as any).current.scrollTop = (rotationListRef as any).current.scrollHeight;\n    localStorage.setItem(\"rotations\", JSON.stringify(rotations));\n  }, [rotations]);\n\n  useEffect(() => {\n    localStorage.setItem(\"investmentCnt\", \"\" + investmentCnt);\n  }, [investmentCnt]);\n\n  useEffect(() => {\n    localStorage.setItem(\"border\", border);\n  }, [border]);\n\n  useEffect(() => {\n    localStorage.setItem(\"ballNumberComfirm\", ballNumberComfirm);\n  }, [ballNumberComfirm]);\n\n  useEffect(() => {\n    localStorage.setItem(\"remarks\", remarks);\n  }, [remarks]);\n\n  useEffect(() => {\n    // 選択肢の店名が変更されたら、対応した交換率へ変更する。\n    const storeExchangeRate = STORE_NAMES_EXCHANGE_RATES_MAP.get(storeName);\n    setExchangeRate(String(storeExchangeRate));\n\n    localStorage.setItem(\"storeName\", storeName);\n  }, [storeName]);\n\n  // ■useMemo系\n  // 「回転単価」が「ボーダーまたは回転率」に対する「導出項目」のため。\n  const rotationUnitPrice = useMemo<number>(() => {\n    if (rotationRate === 0) return 0;\n    return Number((1000 / Number(border) - 1000 / rotationRate).toFixed(1));\n  }, [border, rotationRate]);\n\n  // ■change系\n  function changeStoreNamesSelect(event: React.ChangeEvent<HTMLInputElement>) {\n    setStoreName(event.target.value);\n  }\n\n  function changeBorder(event: React.ChangeEvent<HTMLInputElement>) {\n    setBorder(event.target.value);\n  }\n\n  // 機種名の変更\n  function changeMachineName(event: React.ChangeEvent<HTMLInputElement>) {\n    const machineName = event.target.value;\n    setMachineName(machineName);\n    localStorage.setItem(\"machineName\", machineName);\n  }\n\n  // 備考の変更\n  function changeRemarks(event: React.ChangeEvent<HTMLInputElement>) {\n    const remarksInputed = event.target.value;\n    setRemarks(remarksInputed);\n  }\n\n  // 回転数入力ミス防止用玉数の変更\n  function changeBallNumberComfirm(event: React.ChangeEvent<HTMLInputElement>) {\n    const ballNumberComfirm = event.target.value;\n    setBallNumberComfirm(ballNumberComfirm);\n  }\n\n  function changeRotationNumberInputed(event: React.ChangeEvent<HTMLInputElement>) {\n    setRotationNumberInputed(event.target.value);\n  }\n\n  // ■通常関数定義\n  function isResetStarted() {\n    return rotations.length > 0 && rotations[0].type === ROTATION_MODE.resetStart;\n  }\n\n  function clearRotationNumberInputed() {\n    setRotationNumberInputed(\"\");\n  }\n\n  function getWorkAmount() {\n    return (rotationUnitPrice * rotationNumberTotal).toFixed(0);\n  }\n\n  // 一回の貸出ボタン玉数\n  function getBallNumberOnePush(storeName: string): number {\n    const exchangeRateDefault = \"4\";\n    const ballNumberOnePushDefault = 125;\n    try {\n      if (!STORE_NAMES_EXCHANGE_RATES_MAP.has(storeName)) {\n        throw new Error(ERROR_MSG.notExpectedStoreName);\n      }\n      const storeExchangeRate: string = STORE_NAMES_EXCHANGE_RATES_MAP.get(storeName) || exchangeRateDefault;\n      return Number((AMOUNT_ONE_PUSH / Number(storeExchangeRate)).toFixed());\n    } catch (error) {\n      alert(error);\n      return ballNumberOnePushDefault;\n    }\n  }\n\n  //　回転配列を1行削除する。\n  function deleteOneRotation() {\n    const rotationsLength = rotations.length;\n\n    if (rotationsLength === 0) return;\n\n    // 投資回数の調整\n    const lastRotation = rotations[rotations.length - 1];\n    if (lastRotation.type === ROTATION_MODE.normal) {\n      setInvestmentCnt(investmentCnt - 1);\n    }\n\n    const rotationsDeleted = rotations.filter((rotation, index) => {\n      return index !== rotationsLength - 1;\n    });\n\n    // 回転率の更新\n    // 長さが1の時、必ずリセットスタートなので、回転率は0に設定してあります。\n    if (rotationsDeleted.length === 1 || rotationsDeleted.length === 0) {\n      setRotationRate(0);\n    } else {\n      setRotationRate(rotationsDeleted[rotationsDeleted.length - 1].rotationRate);\n    }\n\n    // 総回転数の更新\n    if (lastRotation.type === ROTATION_MODE.normal && rotationsDeleted.length > 0) {\n      const rotationNumberDiffShouldSub =\n        rotations[rotations.length - 1].rotationNumber - rotationsDeleted[rotationsDeleted.length - 1].rotationNumber;\n      setRotationNumberTotal(rotationNumberTotal - rotationNumberDiffShouldSub);\n    }\n\n    setRotations(rotationsDeleted);\n\n    // 確認用玉数を計算\n    setBallNumberComfirm(String(Number(ballNumberComfirm) + getBallNumberOnePush(storeName)));\n  }\n\n  // 画面の初期読込時に使用\n  function calcRotationNumberTotal(rotations: TypeRotation[]) {\n    let totalRotationNumberCalculatted = 0;\n    rotations.forEach((rotation, idx) => {\n      if (rotation.type === ROTATION_MODE.resetStart || rotation.type === ROTATION_MODE.continueStart) return;\n      totalRotationNumberCalculatted += rotation.rotationNumber - rotations[idx - 1].rotationNumber;\n    });\n    return totalRotationNumberCalculatted;\n  }\n\n  // 画面の初期読込時に使用\n  function calcRotationRate(rotations: TypeRotation[]) {\n    if (rotations.length === 0) return 0;\n    return rotations[rotations.length - 1].rotationRate;\n  }\n\n  function deleteAllRotation() {\n    if (window.confirm(\"全行削除してもいいですか？\")) {\n      setRotations([]);\n      setRotationRate(0);\n      setInvestmentCnt(0);\n      setRotationNumberTotal(0);\n      setBallNumberComfirm(\"\");\n      setMachineName(\"\");\n      setRemarks(\"\");\n    }\n  }\n\n  // 最後の結果書込処理（全行削除も行う）\n  function writeWorkResultAndDeleteAllRotation() {\n    const now = new Date();\n    const date = format(now, \"yyyy/MM/dd\");\n    const timeStart = localStorage.getItem(\"startTime\");\n    const timeEnd = format(now, \"HH:mm\");\n\n    const params = new URLSearchParams();\n    params.append(\"date\", `${date}`);\n    params.append(\"timeStart\", `${timeStart}`);\n    params.append(\"timeEnd\", `${timeEnd}`);\n    params.append(\"border\", `${border}`);\n    params.append(\"rotationRate\", `${rotationRate}`);\n    params.append(\"rotationUnitPrice\", `${rotationUnitPrice}`);\n    params.append(\"rotationNumberTotal\", `${rotationNumberTotal}`);\n    params.append(\"workAmount\", `${getWorkAmount()}`);\n    params.append(\"machineName\", `${machineName}`);\n    params.append(\"storeName\", `${storeName}`);\n    params.append(\"remarks\", `${remarks}`);\n\n    axios\n      .post(REST_URL_SPREADSHEET, params)\n      .then(function (response: any) {\n        alert(\"書込が成功しました。\");\n        deleteAllRotation();\n      })\n      .catch(function (error: any) {\n        alert(error);\n      });\n  }\n\n  // 回転数の短縮入力の判別\n  function shouldShortInput() {\n    return String(rotationNumberInputed).length < 3 && String(rotations[rotations.length - 1].rotationNumber).length > 1;\n  }\n\n  // 回転数の短縮入力：回転数が4桁以下の場合のみ対応（5桁以上は不必要のため、未検証）\n  function getRotationNumberByShortInputIfNeeded(): number {\n    let rotationNumberInputedClone: number = Number(rotationNumberInputed);\n    if (shouldShortInput()) {\n      // 最後の回転数の桁数\n      const digitsLastRotation = String(rotations[rotations.length - 1].rotationNumber).length;\n      // 短縮判定の際に比較する桁数（2なので10の位まで）\n      // 99なら99, 101なら1, 199なら99, 1010なら10\n      const digitsCompare = 2;\n      const numberBeCompared: number = Number(\n        String(rotations[rotations.length - 1].rotationNumber).slice(digitsLastRotation - digitsCompare, digitsLastRotation)\n      );\n      // ベースとなる数を作成する。（ベースとは、100倍して・・・）\n      const baseNumberSourceMayBeMovedUp = String(rotations[rotations.length - 1].rotationNumber).slice(0, digitsLastRotation - digitsCompare);\n      const baseNumberSource: number =\n        rotationNumberInputedClone > numberBeCompared ? Number(baseNumberSourceMayBeMovedUp) : Number(baseNumberSourceMayBeMovedUp) + 1;\n\n      // 入力回転数にベース数（100倍されたもの）を足す。\n      const multipleBaseNumber = 100;\n      const baseNumber: number = baseNumberSource * multipleBaseNumber;\n      rotationNumberInputedClone += baseNumber;\n    }\n\n    return rotationNumberInputedClone;\n  }\n\n  // 通常回転（回転ボタン押下時の処理）\n  function rotation() {\n    try {\n      if (isResetStarted() === false) {\n        throw ERROR_MSG.resetStart;\n      }\n\n      // 投資回数の計算\n      const investmentCntNow = investmentCnt + 1;\n      // 必要であれば短縮入力を効かせる。\n      const rotationNumberInputedClone = getRotationNumberByShortInputIfNeeded();\n      const rotationNumberDiffFromLast = Number(rotationNumberInputedClone) - rotations[rotations.length - 1].rotationNumber;\n      //　交換率の比：通常交換率'4'と実交換率の比。回転率計算に用いる。\n      const exchangeRateRatio: number = Number(exchangeRate) / EXCHANGE_RATE_NORMAL;\n      const rotationRateMostRecent = Number((rotationNumberDiffFromLast * REPLENISHMENT_AMOUNT_RATIO * exchangeRateRatio).toFixed(1));\n\n      const rotationNumberTotalNow = rotationNumberTotal + rotationNumberDiffFromLast;\n\n      // 投資金額の比（todo:もう少し分かりやすく出来るかも？）\n      const investmentAmountRatio = 1000 / (REPLENISHMENT_AMOUNT * investmentCntNow);\n      const rotationRateNow = Number((rotationNumberTotalNow * investmentAmountRatio * exchangeRateRatio).toFixed(1));\n\n      clearRotationNumberInputed();\n\n      // 各種set\n      setInvestmentCnt(investmentCntNow);\n      setRotationNumberTotal(rotationNumberTotalNow);\n      setRotationRate(rotationRateNow);\n      setRotations(\n        rotations.concat({\n          type: ROTATION_MODE.normal,\n          rotationNumber: Number(rotationNumberInputedClone),\n          rotationRateMostRecent,\n          rotationRate: rotationRateNow,\n        })\n      );\n      // 確認用玉数を計算\n      setBallNumberComfirm(String(Number(ballNumberComfirm) - getBallNumberOnePush(storeName)));\n    } catch (error) {\n      alert(error);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Container className=\"pt-3\">\n        <Row>\n          <Col>\n            <p className=\"mb-0\">\n              回転単価：<span>{rotationUnitPrice}</span>\n            </p>\n            <p className=\"mb-0\">\n              総回転数：<span>{rotationNumberTotal}</span>\n            </p>\n            <p className=\"mb-0\">\n              仕事量：<span>{getWorkAmount()}</span>\n            </p>\n\n            <Row>\n              <Button className=\"mb-1\" variant=\"primary\" onClick={() => deleteOneRotation()}>\n                1行削除\n              </Button>\n            </Row>\n\n            <FormControl\n              className=\"mb-1\"\n              id=\"rotationNumberInput\"\n              value={rotationNumberInputed}\n              onChange={changeRotationNumberInputed}\n              placeholder=\"回転数入力\"\n            />\n\n            <Row className=\"m-0 mb-2\">\n              <NumberButtons setRotationNumberInputed={setRotationNumberInputed} rotationNumberInputed={rotationNumberInputed} />\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => clearRotationNumberInputed()}>\n                C\n              </Button>\n              <Button variant=\"primary\" className=\"col-4\"></Button>\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => rotation()}>\n                回転\n              </Button>\n\n              <ContinueStartButton\n                rotationNumberInputed={rotationNumberInputed}\n                rotationRate={rotationRate}\n                rotations={rotations}\n                clearRotationNumberInputed={clearRotationNumberInputed}\n                setRotations={setRotations}\n              />\n\n              <ResetStartButton\n                rotationNumberInputed={rotationNumberInputed}\n                rotations={rotations}\n                selectStoreRef={selectStoreRef}\n                isResetStarted={isResetStarted}\n                clearRotationNumberInputed={clearRotationNumberInputed}\n                setRotations={setRotations}\n              />\n            </Row>\n\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>確認用玉数</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={ballNumberComfirm} onChange={changeBallNumberComfirm} type=\"number\" />\n              </InputGroup>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>ボーダー</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={border} onChange={changeBorder} />\n              </InputGroup>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>店名</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control as=\"select\" value={storeName} onChange={changeStoreNamesSelect} ref={selectStoreRef}>\n                  <StoreNames storeNames={STORE_NAMES} />\n                </Form.Control>\n              </InputGroup>\n            </Row>\n            <Row>\n              <div className=\"mr-2\">交換率:</div>\n              <div>{exchangeRate}</div>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>機種名</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={machineName} onChange={changeMachineName} />\n              </InputGroup>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>備考</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control as=\"textarea\" rows={2} value={remarks} onChange={changeRemarks} />\n              </InputGroup>\n            </Row>\n            <Row>\n              <Button className=\"mt-5\" variant=\"primary\" onClick={() => writeWorkResultAndDeleteAllRotation()}>\n                表書込＆全削\n              </Button>\n            </Row>\n\n            <Row>\n              <Button className=\"allDeteleBtn\" variant=\"primary\" onClick={() => deleteAllRotation()}>\n                全行削除\n              </Button>\n            </Row>\n          </Col>\n          <Col>\n            <ListGroup className=\"rotationList\" ref={rotationListRef}>\n              <Rotations rotations={rotations} />\n            </ListGroup>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}