{"version":3,"sources":["App.js","index.js"],"names":["ShrinkNameButton","styled","Button","App","useState","border","setBorder","rotationNumberInputed","setRotationNumberInputed","rotations","setRotations","totalRotationNumber","setTotalRotationNumber","rotationType","$numberButtons","map","number","variant","className","onClick","$rotations","rotation","index","content","type","rotationNumber","rotationRateMostRecent","rotationRate","ListGroup","Item","clearRotationNumberInputed","_getWorkAmount","rotationUnitPrice","toFixed","useEffect","$resetStartButton","document","getElementById","setTimeout","click","investmentCnt","useMemo","cnt","forEach","length","rotationNumberLast","rotationNumberDiffFromLast","Number","concat","alert","setClipboard","text","dateNowFormated","format","Date","getRotationsTextForCopyToClickboard","navigator","clipboard","writeText","then","console","log","resetStart","Container","Row","Col","rotationsLength","rotationsDeletedOne","filter","rotationNumberDiffShouldSub","deleteOneRotation","FormControl","id","value","onChange","event","target","placeholder","InputGroup","size","Prepend","Text","ReactDOM","render"],"mappings":"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","file":"static/js/main.38f12aad.chunk.js","sourcesContent":["import { useState, useEffect, useMemo } from \"react\";\nimport styled from \"styled-components\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, Form, FormControl, Button, ListGroup, InputGroup } from \"react-bootstrap\";\n\nimport { format } from \"date-fns\";\n\nconst ShrinkNameButton = styled(Button)`\n  font-size: 0.4rem;\n`;\n\nfunction App() {\n  const [border, setBorder] = useState(18.0);\n\n  const [rotationNumberInputed, setRotationNumberInputed] = useState(\"\");\n  const [rotations, setRotations] = useState([]);\n  const [totalRotationNumber, setTotalRotationNumber] = useState(0);\n\n  const replenishmentAmount = 500;\n  const ratioOfReplenishmentAmountToThousandYen = 1000 / replenishmentAmount;\n\n  const rotationType = {\n    normal: \"normal\",\n    continueStart: \"continueStart\",\n    resetStart: \"resetStart\",\n  };\n\n  const $numberButtons = [\"7\", \"8\", \"9\", \"4\", \"5\", \"6\", \"1\", \"2\", \"3\", \"0\"].map((number) => (\n    <Button key={number} variant=\"primary\" className=\"col-4\" onClick={() => setRotationNumberInputed(rotationNumberInputed + number)}>\n      {number}\n    </Button>\n  ));\n\n  const $rotations = rotations.map((rotation, index) => {\n    let content = \"\";\n    if (rotation.type === rotationType.resetStart) {\n      content = `${rotation.rotationNumber} --start--`;\n    } else if (rotation.type === rotationType.continueStart) {\n      content = `${rotation.rotationNumber} > start`;\n    } else if (rotation.type === rotationType.normal) {\n      content = `${rotation.rotationNumber} ${rotation.rotationRateMostRecent} ${rotation.rotationRate}`;\n    }\n    return <ListGroup.Item key={index}>{content}</ListGroup.Item>;\n  });\n\n  useEffect(() => {\n    setRotationNumberInputed(\"0\");\n    const $resetStartButton = document.getElementById(\"resetStartButton\");\n    setTimeout(() => {\n      $resetStartButton.click();\n    }, 1);\n  }, []);\n\n  function isResetStarted() {\n    return rotations.length > 0 && rotations[0].type === rotationType.resetStart;\n  }\n\n  function changeBorder(event) {\n    setBorder(event.target.value);\n  }\n\n  function changeRotationNumberInputed(event) {\n    setRotationNumberInputed(Number(event.target.value));\n  }\n\n  function _isResetStarted() {\n    return rotations.length !== 0 && rotations[0].type === rotationType.resetStart;\n  }\n\n  function clearRotationNumberInputed() {\n    setRotationNumberInputed(\"\");\n  }\n\n  function _getWorkAmount() {\n    return (rotationUnitPrice * totalRotationNumber).toFixed(0);\n  }\n\n  const investmentCnt = useMemo(() => {\n    let cnt = 0;\n    rotations.forEach((rotation) => {\n      if (rotation.type !== rotationType.normal) return;\n\n      cnt++;\n    });\n\n    return cnt;\n  }, [rotations, rotationType.normal]);\n\n  const rotationRate = useMemo(() => {\n    if (investmentCnt === 0) return 0;\n    const ratioOfTotalInvestmentAmountToThousandYen = 1000 / (replenishmentAmount * investmentCnt);\n\n    return (totalRotationNumber * ratioOfTotalInvestmentAmountToThousandYen).toFixed(1);\n  }, [totalRotationNumber, investmentCnt]);\n\n  const rotationUnitPrice = useMemo(() => {\n    if (rotationRate === 0) return 0;\n    return (1000 / border - 1000 / rotationRate).toFixed(1);\n  }, [border, rotationRate]);\n\n  function deleteOneRotation() {\n    const rotationsLength = rotations.length;\n\n    const rotationsDeletedOne = rotations.filter((rotation, index) => {\n      return index !== rotationsLength - 1;\n    });\n\n    if (rotationsDeletedOne.length > 0) {\n      const rotationNumberDiffShouldSub =\n        rotations[rotations.length - 1].rotationNumber - rotationsDeletedOne[rotationsDeletedOne.length - 1].rotationNumber;\n      setTotalRotationNumber(totalRotationNumber - rotationNumberDiffShouldSub);\n    }\n\n    setRotations(rotationsDeletedOne);\n  }\n\n  function rotation() {\n    if (_isResetStarted() === false) {\n      alert(`リセットスタートをしましょう`);\n      return;\n    }\n\n    const rotationNumberLast = rotations[rotations.length - 1].rotationNumber;\n\n    const rotationNumberDiffFromLast = Number(rotationNumberInputed) - rotationNumberLast;\n    const rotationRateMostRecent = (rotationNumberDiffFromLast * ratioOfReplenishmentAmountToThousandYen).toFixed(1);\n\n    const totalRotationNumberNow = totalRotationNumber + rotationNumberDiffFromLast;\n    setTotalRotationNumber(totalRotationNumberNow);\n\n    setRotations(\n      rotations.concat({\n        type: rotationType.normal,\n        rotationRateMostRecent,\n        rotationRate,\n        rotationNumber: Number(rotationNumberInputed),\n      })\n    );\n    clearRotationNumberInputed();\n  }\n\n  function continueStart() {\n    if (rotationNumberInputed === \"\") {\n      alert(`回転数を入力しましょう`);\n      return;\n    }\n\n    setRotations(\n      rotations.concat({\n        type: rotationType.continueStart,\n        rotationRate,\n        rotationNumber: rotationNumberInputed,\n      })\n    );\n\n    clearRotationNumberInputed();\n  }\n\n  function getRotationsTextForCopyToClickboard() {\n    const dateNowFormated = format(new Date(), \"yyyy/MM/dd hh:mm\");\n    const text = `${dateNowFormated}\n回転率：${rotationRate}, 仕事量：${rotationUnitPrice}円×${totalRotationNumber}回(${_getWorkAmount()}円)`;\n    return text;\n  }\n\n  function setClipboard() {\n    const text = getRotationsTextForCopyToClickboard();\n    navigator.clipboard.writeText(text).then(\n      function () {\n        console.log(\"クリップボード書き込み成功\");\n      },\n      function () {\n        console.log(\"クリップボード書き込み成功\");\n      }\n    );\n  }\n\n  function resetStart() {\n    if (isResetStarted()) {\n      console.log(\"既にリセットスタートされています\");\n      return;\n    }\n    if (rotationNumberInputed === \"\") {\n      alert(`回転数を入力しましょう`);\n      return;\n    }\n    setRotations(\n      rotations.concat({\n        type: rotationType.resetStart,\n        rotationRate: 0,\n        rotationNumber: rotationNumberInputed,\n      })\n    );\n\n    clearRotationNumberInputed();\n  }\n\n  return (\n    <div className=\"App\">\n      <Container className=\"pt-3\">\n        <Row>\n          <Col>\n            <p className=\"mb-0\">\n              回転単価：<span>{rotationUnitPrice}</span>\n            </p>\n            <p className=\"mb-0\">\n              総回転数：<span>{totalRotationNumber}</span>\n            </p>\n            <p className=\"mb-0\">\n              仕事量：<span>{_getWorkAmount()}</span>\n            </p>\n\n            <Row>\n              <Button className=\"mr-1 mb-1\" variant=\"primary\" onClick={() => setClipboard()}>\n                コピー\n              </Button>\n              <Button className=\"mb-1\" variant=\"primary\" onClick={() => deleteOneRotation()}>\n                1行削除\n              </Button>\n            </Row>\n\n            <FormControl\n              className=\"mb-1\"\n              id=\"rotationNumberInput\"\n              value={rotationNumberInputed}\n              onChange={changeRotationNumberInputed}\n              placeholder=\"回転数入力\"\n            />\n\n            <Row className=\"m-0 mb-2\">\n              {$numberButtons}\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => clearRotationNumberInputed()}>\n                C\n              </Button>\n              <Button variant=\"primary\" className=\"col-4\"></Button>\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => rotation()}>\n                回転\n              </Button>\n              <ShrinkNameButton variant=\"primary\" className=\"col-4\" onClick={() => continueStart()}>\n                継続スタート\n              </ShrinkNameButton>\n              <ShrinkNameButton id=\"resetStartButton\" variant=\"primary\" className=\"col-4\" onClick={() => resetStart()}>\n                リセットスタート\n              </ShrinkNameButton>\n            </Row>\n\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>ボーダー</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={border} onChange={changeBorder} />\n              </InputGroup>\n            </Row>\n          </Col>\n          <Col>\n            <ListGroup>{$rotations}</ListGroup>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}