{"version":3,"sources":["App.tsx","index.tsx"],"names":["ShrinkNameButton","styled","Button","App","useState","rotationNumberInputed","setRotationNumberInputed","rotations","setRotations","rotationRate","setRotationRate","investmentCnt","setInvestmentCnt","totalRotationNumber","setTotalRotationNumber","border","setBorder","exchangeRate","setExchangeRate","rotationListRef","useRef","rotationType","$numberButtons","map","number","variant","className","onClick","$rotations","rotation","index","content","type","rotationNumber","rotationRateMostRecent","ListGroup","Item","clearRotationNumberInputed","_getWorkAmount","rotationUnitPrice","toFixed","useEffect","investmentCntGettedFromLocalStorage","localStorage","getItem","rotationsGettedFromLocalStorage","borderGettedFromLocalStorage","rotationsParsed","JSON","parse","rotationRateCalculatted","length","calcRotationRateFromRotations","rotationNumberTotalCalculatted","totalRotationNumberCalculatted","forEach","idx","calcTotalRotationNumberFromRotations","Number","current","scrollTop","scrollHeight","setItem","stringify","useMemo","investmentCntNow","magnificationForExchangeRate","rotationNumberLast","rotationNumberInputedClone","String","convertToThreeDigits","slice","rotationNumberDiffFromLast","totalRotationNumberNow","rotationRateNow","concat","alert","setClipboard","text","now","Date","dateFormattedStart","format","timeFormattedStart","timeFormattedNow","join","getRotationsTextForCopyToClickboard","navigator","clipboard","writeText","resetStart","Container","Row","Col","rotationsLength","lastRotation","rotationsDeleted","filter","rotationNumberDiffShouldSub","deleteOneRotation","FormControl","id","value","onChange","event","target","placeholder","InputGroup","size","Prepend","Text","window","confirm","ref","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f4acd222.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect, useMemo } from \"react\";\nimport styled from \"styled-components\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, FormControl, Button, ListGroup, InputGroup } from \"react-bootstrap\";\nimport { format } from \"date-fns\";\n\nconst ShrinkNameButton = styled(Button)`\n  font-size: 0.4rem;\n`;\n\nconst EXCHANGE_RATE_BASE = 4;\n\ntype RotationType = {\n  type: string;\n  rotationNumber: number;\n  rotationRateMostRecent: number;\n  rotationRate: number;\n};\n\nfunction App() {\n  const [rotationNumberInputed, setRotationNumberInputed] = useState<string>(\"\");\n  const [rotations, setRotations] = useState<RotationType[]>([]);\n  const [rotationRate, setRotationRate] = useState(0);\n  const [investmentCnt, setInvestmentCnt] = useState(0);\n  const [totalRotationNumber, setTotalRotationNumber] = useState(0);\n  const [border, setBorder] = useState<string>(\"18.0\");\n  const [exchangeRate, setExchangeRate] = useState<string>(\"4\");\n\n  const rotationListRef = useRef<HTMLDivElement>(null);\n\n  const replenishmentAmount = 500;\n  const ratioOfReplenishmentAmountToThousandYen = 1000 / replenishmentAmount;\n\n  const rotationType = {\n    normal: \"normal\",\n    continueStart: \"continueStart\",\n    resetStart: \"resetStart\",\n  };\n\n  const $numberButtons = [\"7\", \"8\", \"9\", \"4\", \"5\", \"6\", \"1\", \"2\", \"3\", \"0\"].map((number) => (\n    <Button key={number} variant=\"primary\" className=\"col-4\" onClick={() => setRotationNumberInputed(rotationNumberInputed + number)}>\n      {number}\n    </Button>\n  ));\n\n  const $rotations = rotations.map((rotation, index) => {\n    let content = \"\";\n    if (rotation.type === rotationType.resetStart) {\n      content = `${rotation.rotationNumber} --start--`;\n    } else if (rotation.type === rotationType.continueStart) {\n      content = `${rotation.rotationNumber} > start`;\n    } else if (rotation.type === rotationType.normal) {\n      content = `${rotation.rotationNumber} ${rotation.rotationRateMostRecent} ${rotation.rotationRate}`;\n    }\n    return <ListGroup.Item key={index}>{content}</ListGroup.Item>;\n  });\n\n  // 初回描画時に実行\n  useEffect(() => {\n    // ローカルストレージに「回転配列」があるか確認\n    const investmentCntGettedFromLocalStorage = localStorage.getItem(\"investmentCnt\");\n    const rotationsGettedFromLocalStorage = localStorage.getItem(\"rotations\");\n    const borderGettedFromLocalStorage = localStorage.getItem(\"border\");\n    if (investmentCntGettedFromLocalStorage === null) return;\n    if (rotationsGettedFromLocalStorage === null) return;\n    if (borderGettedFromLocalStorage === null) return;\n\n    const rotationsParsed = JSON.parse(rotationsGettedFromLocalStorage);\n\n    // 存在する場合\n    // 回転配列から回転率と総回転数を求める\n\n    const rotationRateCalculatted = calcRotationRateFromRotations(rotationsParsed);\n    const rotationNumberTotalCalculatted = calcTotalRotationNumberFromRotations(rotationsParsed);\n\n    setRotationRate(rotationRateCalculatted);\n    setTotalRotationNumber(rotationNumberTotalCalculatted);\n    setInvestmentCnt(Number(investmentCntGettedFromLocalStorage));\n    setRotations(rotationsParsed);\n    setBorder(borderGettedFromLocalStorage);\n  }, []);\n\n  useEffect(() => {\n    (rotationListRef as any).current.scrollTop = (rotationListRef as any).current.scrollHeight;\n    localStorage.setItem(\"rotations\", JSON.stringify(rotations));\n  }, [rotations]);\n\n  useEffect(() => {\n    localStorage.setItem(\"investmentCnt\", \"\" + investmentCnt);\n  }, [investmentCnt]);\n\n  useEffect(() => {\n    localStorage.setItem(\"border\", border);\n  }, [border]);\n\n  function isResetStarted() {\n    return rotations.length > 0 && rotations[0].type === rotationType.resetStart;\n  }\n\n  // change系\n  function changeBorder(event: React.ChangeEvent<HTMLInputElement>) {\n    setBorder(event.target.value);\n  }\n\n  function changeExchangeRate(event: React.ChangeEvent<HTMLInputElement>) {\n    setExchangeRate(event.target.value);\n  }\n\n  function changeRotationNumberInputed(event: React.ChangeEvent<HTMLInputElement>) {\n    setRotationNumberInputed(event.target.value);\n  }\n\n  function _isResetStarted() {\n    return rotations.length !== 0 && rotations[0].type === rotationType.resetStart;\n  }\n\n  function clearRotationNumberInputed() {\n    setRotationNumberInputed(\"\");\n  }\n\n  function _getWorkAmount() {\n    return (rotationUnitPrice * totalRotationNumber).toFixed(0);\n  }\n\n  const rotationUnitPrice = useMemo<number>(() => {\n    if (rotationRate === 0) return 0;\n    return Number((1000 / Number(border) - 1000 / rotationRate).toFixed(1));\n  }, [border, rotationRate]);\n\n  //　回転配列を1行削除する。\n  function deleteOneRotation() {\n    const rotationsLength = rotations.length;\n\n    if (rotationsLength === 0) return;\n\n    // 投資回数の調整\n    const lastRotation = rotations[rotations.length - 1];\n    if (lastRotation.type === rotationType.normal) {\n      setInvestmentCnt(investmentCnt - 1);\n    }\n\n    const rotationsDeleted = rotations.filter((rotation, index) => {\n      return index !== rotationsLength - 1;\n    });\n\n    // 回転率の更新\n    // 長さが1の時、必ずリセットスタートなので、回転率は0に設定してあります。\n    if (rotationsDeleted.length === 1 || rotationsDeleted.length === 0) {\n      setRotationRate(0);\n    } else {\n      setRotationRate(rotationsDeleted[rotationsDeleted.length - 1].rotationRate);\n    }\n\n    // 総回転数の更新\n    if (lastRotation.type === rotationType.normal && rotationsDeleted.length > 0) {\n      const rotationNumberDiffShouldSub =\n        rotations[rotations.length - 1].rotationNumber - rotationsDeleted[rotationsDeleted.length - 1].rotationNumber;\n      setTotalRotationNumber(totalRotationNumber - rotationNumberDiffShouldSub);\n    }\n\n    setRotations(rotationsDeleted);\n  }\n\n  function calcRotationRateFromRotations(rotations: RotationType[]) {\n    if (rotations.length === 0) return 0;\n    return rotations[rotations.length - 1].rotationRate;\n  }\n\n  function deleteAllRotation() {\n    if (window.confirm(\"全行削除してもいいですか？\")) {\n      setRotations([]);\n      setRotationRate(0);\n      setInvestmentCnt(0);\n      setTotalRotationNumber(0);\n    }\n  }\n\n  // 回転配列から総回転数を求める。\n  function calcTotalRotationNumberFromRotations(rotations: RotationType[]) {\n    let totalRotationNumberCalculatted = 0;\n    rotations.forEach((rotation, idx) => {\n      if (rotation.type === rotationType.resetStart || rotation.type === rotationType.continueStart) return;\n      totalRotationNumberCalculatted += rotation.rotationNumber - rotations[idx - 1].rotationNumber;\n    });\n    return totalRotationNumberCalculatted;\n  }\n\n  function rotation() {\n    if (_isResetStarted() === false) {\n      alert(`リセットスタートをしましょう`);\n      return;\n    }\n\n    const investmentCntNow = investmentCnt + 1;\n    setInvestmentCnt(investmentCntNow);\n    const magnificationForExchangeRate: number = Number(exchangeRate) / EXCHANGE_RATE_BASE;\n\n    const rotationNumberLast = rotations[rotations.length - 1].rotationNumber;\n\n    let rotationNumberInputedClone: number = Number(rotationNumberInputed);\n\n    // 回転数の短縮入力：ひとまず回転数が3桁以下の場合のみ対応\n    if (String(rotationNumberInputedClone).length < 3 && String(rotations[rotations.length - 1].rotationNumber).length > 1) {\n      const convertToThreeDigits: string = (\"000\" + rotations[rotations.length - 1].rotationNumber).slice(-3);\n      const lastTwoDigits: number = Number(String(rotations[rotations.length - 1].rotationNumber).slice(1, 3));\n      const baseNumberOfHundreds: number =\n        rotationNumberInputedClone > lastTwoDigits ? Number(convertToThreeDigits[0]) : Number(convertToThreeDigits[0]) + 1;\n\n      const baseNumber: number = baseNumberOfHundreds * 100;\n      rotationNumberInputedClone += baseNumber;\n    }\n\n    const rotationNumberDiffFromLast = Number(rotationNumberInputedClone) - rotationNumberLast;\n    const rotationRateMostRecent = Number(\n      (rotationNumberDiffFromLast * ratioOfReplenishmentAmountToThousandYen * magnificationForExchangeRate).toFixed(1)\n    );\n\n    const totalRotationNumberNow = totalRotationNumber + rotationNumberDiffFromLast;\n    setTotalRotationNumber(totalRotationNumberNow);\n\n    const ratioOfTotalInvestmentAmountToThousandYen = 1000 / (replenishmentAmount * investmentCntNow);\n    const rotationRateNow = Number((totalRotationNumberNow * ratioOfTotalInvestmentAmountToThousandYen * magnificationForExchangeRate).toFixed(1));\n    setRotationRate(rotationRateNow);\n\n    setRotations(\n      rotations.concat({\n        type: rotationType.normal,\n        rotationNumber: Number(rotationNumberInputedClone),\n        rotationRateMostRecent,\n        rotationRate: rotationRateNow,\n      })\n    );\n    clearRotationNumberInputed();\n  }\n\n  function continueStart() {\n    if (rotationNumberInputed === \"\") {\n      alert(`回転数を入力しましょう`);\n      return;\n    }\n\n    setRotations(\n      rotations.concat({\n        type: rotationType.continueStart,\n        rotationNumber: Number(rotationNumberInputed),\n        rotationRateMostRecent: 0,\n        rotationRate,\n      })\n    );\n\n    clearRotationNumberInputed();\n  }\n\n  function getRotationsTextForCopyToClickboard() {\n    const now = new Date();\n    const dateFormattedStart = format(now, \"yyyy/MM/dd\");\n    const timeFormattedStart = localStorage.getItem(\"startTime\");\n    const timeFormattedNow = format(now, \"HH:mm\");\n    // const text = [`${dateNowFormatted}`, `ボーダー：${border}`, `回転率：${rotationRate}`, `回転単価：${rotationUnitPrice}`, `総回転数：${totalRotationNumber}`, `${_getWorkAmount()}`].join(\n    //   \"\\t\"\n    // );\n    const text = [\n      `${dateFormattedStart} ${timeFormattedStart}〜${timeFormattedNow}`,\n      `ボーダー：${border}`,\n      `回転率：${rotationRate}`,\n      `回転単価：${rotationUnitPrice}`,\n      `総回転数：${totalRotationNumber}`,\n      `${_getWorkAmount()}`,\n    ].join(\"\t\");\n    return text;\n  }\n\n  function setClipboard() {\n    const text = getRotationsTextForCopyToClickboard();\n    navigator.clipboard.writeText(text);\n  }\n\n  function resetStart() {\n    if (isResetStarted()) {\n      alert(\"既にリセットスタートされています\");\n      return;\n    }\n    if (rotationNumberInputed === \"\") {\n      alert(`回転数を入力しましょう`);\n      return;\n    }\n    setRotations(\n      rotations.concat({\n        type: rotationType.resetStart,\n        rotationNumber: Number(rotationNumberInputed),\n        rotationRateMostRecent: 0,\n        rotationRate: 0,\n      })\n    );\n\n    clearRotationNumberInputed();\n\n    localStorage.setItem(\"startTime\", format(new Date(), \"HH:mm\"));\n  }\n\n  return (\n    <div className=\"App\">\n      <Container className=\"pt-3\">\n        <Row>\n          <Col>\n            <p className=\"mb-0\">\n              回転単価：<span>{rotationUnitPrice}</span>\n            </p>\n            <p className=\"mb-0\">\n              総回転数：<span>{totalRotationNumber}</span>\n            </p>\n            <p className=\"mb-0\">\n              仕事量：<span>{_getWorkAmount()}</span>\n            </p>\n\n            <Row>\n              <Button className=\"mr-1 mb-1\" variant=\"primary\" onClick={() => setClipboard()}>\n                コピー\n              </Button>\n              <Button className=\"mb-1\" variant=\"primary\" onClick={() => deleteOneRotation()}>\n                1行削除\n              </Button>\n            </Row>\n\n            <FormControl\n              className=\"mb-1\"\n              id=\"rotationNumberInput\"\n              value={rotationNumberInputed}\n              onChange={changeRotationNumberInputed}\n              placeholder=\"回転数入力\"\n            />\n\n            <Row className=\"m-0 mb-2\">\n              {$numberButtons}\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => clearRotationNumberInputed()}>\n                C\n              </Button>\n              <Button variant=\"primary\" className=\"col-4\"></Button>\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => rotation()}>\n                回転\n              </Button>\n              <ShrinkNameButton variant=\"primary\" className=\"col-4\" onClick={() => continueStart()}>\n                継続スタート\n              </ShrinkNameButton>\n              <ShrinkNameButton id=\"resetStartButton\" variant=\"primary\" className=\"col-4\" onClick={() => resetStart()}>\n                リセットスタート\n              </ShrinkNameButton>\n            </Row>\n\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>ボーダー</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={border} onChange={changeBorder} />\n              </InputGroup>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>交換率</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={exchangeRate} onChange={changeExchangeRate} />\n              </InputGroup>\n            </Row>\n\n            <Row>\n              <Button className=\"allDeteleBtn\" variant=\"primary\" onClick={() => deleteAllRotation()}>\n                全行削除\n              </Button>\n            </Row>\n          </Col>\n          <Col>\n            <ListGroup className=\"rotationList\" ref={rotationListRef}>\n              {$rotations}\n            </ListGroup>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}