{"version":3,"sources":["App.js","index.js"],"names":["ShrinkNameButton","styled","Button","App","useState","border","setBorder","rotationNumberInputed","setRotationNumberInputed","rotations","setRotations","rotationRate","setRotationRate","investmentCnt","setInvestmentCnt","totalRotationNumber","setTotalRotationNumber","rotationType","$numberButtons","map","number","variant","className","onClick","$rotations","rotation","index","content","type","rotationNumber","rotationRateMostRecent","ListGroup","Item","clearRotationNumberInputed","_getWorkAmount","rotationUnitPrice","toFixed","useEffect","$resetStartButton","document","getElementById","setTimeout","click","useMemo","length","investmentCntNow","rotationNumberLast","rotationNumberDiffFromLast","Number","totalRotationNumberNow","rotationRateNow","concat","alert","setClipboard","text","dateNowFormated","format","Date","getRotationsTextForCopyToClickboard","navigator","clipboard","writeText","then","console","log","resetStart","Container","Row","Col","rotationsLength","lastRotation","rotationsDeletedOne","filter","rotationNumberDiffShouldSub","deleteOneRotation","FormControl","id","value","onChange","event","target","placeholder","InputGroup","size","Prepend","Text","ReactDOM","render"],"mappings":"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","file":"static/js/main.5b0cc5ca.chunk.js","sourcesContent":["import { useState, useEffect, useMemo } from \"react\";\nimport styled from \"styled-components\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, Form, FormControl, Button, ListGroup, InputGroup } from \"react-bootstrap\";\n\nimport { format } from \"date-fns\";\n\nconst ShrinkNameButton = styled(Button)`\n  font-size: 0.4rem;\n`;\n\nfunction App() {\n  const [border, setBorder] = useState(18.0);\n\n  const [rotationNumberInputed, setRotationNumberInputed] = useState(\"\");\n  const [rotations, setRotations] = useState([]);\n  const [rotationRate, setRotationRate] = useState(0);\n  const [investmentCnt, setInvestmentCnt] = useState(0);\n\n  const [totalRotationNumber, setTotalRotationNumber] = useState(0);\n\n  const replenishmentAmount = 500;\n  const ratioOfReplenishmentAmountToThousandYen = 1000 / replenishmentAmount;\n\n  const rotationType = {\n    normal: \"normal\",\n    continueStart: \"continueStart\",\n    resetStart: \"resetStart\",\n  };\n\n  const $numberButtons = [\"7\", \"8\", \"9\", \"4\", \"5\", \"6\", \"1\", \"2\", \"3\", \"0\"].map((number) => (\n    <Button key={number} variant=\"primary\" className=\"col-4\" onClick={() => setRotationNumberInputed(rotationNumberInputed + number)}>\n      {number}\n    </Button>\n  ));\n\n  const $rotations = rotations.map((rotation, index) => {\n    let content = \"\";\n    if (rotation.type === rotationType.resetStart) {\n      content = `${rotation.rotationNumber} --start--`;\n    } else if (rotation.type === rotationType.continueStart) {\n      content = `${rotation.rotationNumber} > start`;\n    } else if (rotation.type === rotationType.normal) {\n      content = `${rotation.rotationNumber} ${rotation.rotationRateMostRecent} ${rotation.rotationRate}`;\n    }\n    return <ListGroup.Item key={index}>{content}</ListGroup.Item>;\n  });\n\n  useEffect(() => {\n    setRotationNumberInputed(\"0\");\n    const $resetStartButton = document.getElementById(\"resetStartButton\");\n    setTimeout(() => {\n      $resetStartButton.click();\n    }, 1);\n  }, []);\n\n  function isResetStarted() {\n    return rotations.length > 0 && rotations[0].type === rotationType.resetStart;\n  }\n\n  function changeBorder(event) {\n    setBorder(event.target.value);\n  }\n\n  function changeRotationNumberInputed(event) {\n    setRotationNumberInputed(Number(event.target.value));\n  }\n\n  function _isResetStarted() {\n    return rotations.length !== 0 && rotations[0].type === rotationType.resetStart;\n  }\n\n  function clearRotationNumberInputed() {\n    setRotationNumberInputed(\"\");\n  }\n\n  function _getWorkAmount() {\n    return (rotationUnitPrice * totalRotationNumber).toFixed(0);\n  }\n\n  const rotationUnitPrice = useMemo(() => {\n    if (rotationRate === 0) return 0;\n    return (1000 / border - 1000 / rotationRate).toFixed(1);\n  }, [border, rotationRate]);\n\n  function deleteOneRotation() {\n    const rotationsLength = rotations.length;\n\n    if (rotationsLength === 0) return;\n\n    const lastRotation = rotations[rotations.length - 1];\n    if (lastRotation.type === rotationType.normal) {\n      setInvestmentCnt(investmentCnt - 1);\n    }\n\n    const rotationsDeletedOne = rotations.filter((rotation, index) => {\n      return index !== rotationsLength - 1;\n    });\n\n    if (rotationsDeletedOne.length === 1 || rotationsDeletedOne.length === 0) {\n      setRotationRate(0);\n    } else {\n      setRotationRate(rotationsDeletedOne[rotationsDeletedOne.length - 1].rotationRate);\n    }\n\n    if (lastRotation.type === rotationType.normal && rotationsDeletedOne.length > 0) {\n      const rotationNumberDiffShouldSub =\n        rotations[rotations.length - 1].rotationNumber - rotationsDeletedOne[rotationsDeletedOne.length - 1].rotationNumber;\n      setTotalRotationNumber(totalRotationNumber - rotationNumberDiffShouldSub);\n    }\n\n    setRotations(rotationsDeletedOne);\n  }\n\n  function rotation() {\n    if (_isResetStarted() === false) {\n      alert(`リセットスタートをしましょう`);\n      return;\n    }\n\n    const investmentCntNow = investmentCnt + 1;\n    setInvestmentCnt(investmentCntNow);\n\n    const rotationNumberLast = rotations[rotations.length - 1].rotationNumber;\n\n    const rotationNumberDiffFromLast = Number(rotationNumberInputed) - rotationNumberLast;\n    const rotationRateMostRecent = (rotationNumberDiffFromLast * ratioOfReplenishmentAmountToThousandYen).toFixed(1);\n\n    const totalRotationNumberNow = totalRotationNumber + rotationNumberDiffFromLast;\n    setTotalRotationNumber(totalRotationNumberNow);\n\n    const ratioOfTotalInvestmentAmountToThousandYen = 1000 / (replenishmentAmount * investmentCntNow);\n    const rotationRateNow = (totalRotationNumberNow * ratioOfTotalInvestmentAmountToThousandYen).toFixed(1);\n\n    setRotationRate(rotationRateNow);\n\n    setRotations(\n      rotations.concat({\n        type: rotationType.normal,\n        rotationRateMostRecent,\n        rotationRate: rotationRateNow,\n        rotationNumber: Number(rotationNumberInputed),\n      })\n    );\n    clearRotationNumberInputed();\n  }\n\n  function continueStart() {\n    if (rotationNumberInputed === \"\") {\n      alert(`回転数を入力しましょう`);\n      return;\n    }\n\n    setRotations(\n      rotations.concat({\n        type: rotationType.continueStart,\n        rotationRate,\n        rotationNumber: Number(rotationNumberInputed),\n      })\n    );\n\n    clearRotationNumberInputed();\n  }\n\n  function getRotationsTextForCopyToClickboard() {\n    const dateNowFormated = format(new Date(), \"yyyy/MM/dd hh:mm\");\n    const text = `${dateNowFormated}\n回転率：${rotationRate}, 仕事量：${rotationUnitPrice}円×${totalRotationNumber}回(${_getWorkAmount()}円)`;\n    return text;\n  }\n\n  function setClipboard() {\n    const text = getRotationsTextForCopyToClickboard();\n    navigator.clipboard.writeText(text).then(\n      function () {\n        console.log(\"クリップボード書き込み成功\");\n      },\n      function () {\n        console.log(\"クリップボード書き込み成功\");\n      }\n    );\n  }\n\n  function resetStart() {\n    if (isResetStarted()) {\n      console.log(\"既にリセットスタートされています\");\n      return;\n    }\n    if (rotationNumberInputed === \"\") {\n      alert(`回転数を入力しましょう`);\n      return;\n    }\n    setRotations(\n      rotations.concat({\n        type: rotationType.resetStart,\n        rotationRate: 0,\n        rotationNumber: rotationNumberInputed,\n      })\n    );\n\n    clearRotationNumberInputed();\n  }\n\n  return (\n    <div className=\"App\">\n      <Container className=\"pt-3\">\n        <Row>\n          <Col>\n            <p className=\"mb-0\">\n              回転単価：<span>{rotationUnitPrice}</span>\n            </p>\n            <p className=\"mb-0\">\n              総回転数：<span>{totalRotationNumber}</span>\n            </p>\n            <p className=\"mb-0\">\n              仕事量：<span>{_getWorkAmount()}</span>\n            </p>\n\n            <Row>\n              <Button className=\"mr-1 mb-1\" variant=\"primary\" onClick={() => setClipboard()}>\n                コピー\n              </Button>\n              <Button className=\"mb-1\" variant=\"primary\" onClick={() => deleteOneRotation()}>\n                1行削除\n              </Button>\n            </Row>\n\n            <FormControl\n              className=\"mb-1\"\n              id=\"rotationNumberInput\"\n              value={rotationNumberInputed}\n              onChange={changeRotationNumberInputed}\n              placeholder=\"回転数入力\"\n            />\n\n            <Row className=\"m-0 mb-2\">\n              {$numberButtons}\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => clearRotationNumberInputed()}>\n                C\n              </Button>\n              <Button variant=\"primary\" className=\"col-4\"></Button>\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => rotation()}>\n                回転\n              </Button>\n              <ShrinkNameButton variant=\"primary\" className=\"col-4\" onClick={() => continueStart()}>\n                継続スタート\n              </ShrinkNameButton>\n              <ShrinkNameButton id=\"resetStartButton\" variant=\"primary\" className=\"col-4\" onClick={() => resetStart()}>\n                リセットスタート\n              </ShrinkNameButton>\n            </Row>\n\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>ボーダー</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={border} onChange={changeBorder} />\n              </InputGroup>\n            </Row>\n          </Col>\n          <Col>\n            <ListGroup>{$rotations}</ListGroup>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}