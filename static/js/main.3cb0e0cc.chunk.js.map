{"version":3,"sources":["utils/number.tsx","App.tsx","index.tsx"],"names":["getdoubleDigestNumber","number","slice","ShrinkNameButton","styled","Button","App","useState","border","setBorder","rotationNumberInputed","setRotationNumberInputed","rotations","setRotations","rotationRate","setRotationRate","investmentCnt","setInvestmentCnt","totalRotationNumber","setTotalRotationNumber","exchangeRate","setExchangeRate","rotationListRef","useRef","rotationType","$numberButtons","map","variant","className","onClick","$rotations","rotation","index","content","type","rotationNumber","rotationRateMostRecent","ListGroup","Item","clearRotationNumberInputed","_getWorkAmount","rotationUnitPrice","toFixed","useEffect","investmentCntGettedFromLocalStorage","localStorage","getItem","rotationsGettedFromLocalStorage","rotationsParsed","JSON","parse","length","calcRotationRateFromRotations","totalRotationNumberCalculatted","forEach","idx","calcTotalRotationNumberFromRotations","alert","current","scrollTop","setItem","stringify","useMemo","Number","investmentCntNow","magnificationForExchangeRate","rotationNumberLast","rotationNumberInputedClone","String","numberOfHundreds","lastTwoDigits","rotationNumberDiffFromLast","totalRotationNumberNow","rotationRateNow","console","log","concat","setClipboard","text","dateNowFormated","format","Date","getRotationsTextForCopyToClickboard","navigator","clipboard","writeText","then","resetStart","Container","Row","Col","rotationsLength","lastRotation","rotationsDeleted","filter","rotationNumberDiffShouldSub","deleteOneRotation","FormControl","id","value","onChange","event","target","placeholder","InputGroup","size","Prepend","Text","ref","ReactDOM","render","document","getElementById"],"mappings":"6QAAaA,EAAwB,SAACC,GACpC,OAAQ,IAAMA,GAAQC,OAAO,I,6FCQ/B,IAAMC,EAAmBC,YAAOC,IAAPD,CAAH,KAgXPE,MAnWf,WAAgB,IAAD,EACeC,mBAAiB,IADhC,mBACNC,EADM,KACEC,EADF,OAE6CF,mBAAiB,IAF9D,mBAENG,EAFM,KAEiBC,EAFjB,OAGqBJ,mBAAyB,IAH9C,mBAGNK,EAHM,KAGKC,EAHL,OAI2BN,mBAAS,GAJpC,mBAINO,EAJM,KAIQC,EAJR,OAK6BR,mBAAS,GALtC,mBAKNS,EALM,KAKSC,EALT,OAMyCV,mBAAS,GANlD,mBAMNW,EANM,KAMeC,EANf,OAO2BZ,mBAAiB,GAP5C,mBAONa,EAPM,KAOQC,EAPR,KASPC,EAAkBC,iBAAuB,MAKzCC,EACI,SADJA,EAEW,gBAFXA,EAGQ,aAGRC,EAAiB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKC,KAAI,SAACzB,GAAD,OAC5E,cAACI,EAAA,EAAD,CAAqBsB,QAAQ,UAAUC,UAAU,QAAQC,QAAS,kBAAMlB,EAAyBD,EAAwBT,IAAzH,SACGA,GADUA,MAKT6B,EAAalB,EAAUc,KAAI,SAACK,EAAUC,GAC1C,IAAIC,EAAU,GAQd,OAPIF,EAASG,OAASV,EACpBS,EAAO,UAAMF,EAASI,eAAf,cACEJ,EAASG,OAASV,EAC3BS,EAAO,UAAMF,EAASI,eAAf,YACEJ,EAASG,OAASV,IAC3BS,EAAO,UAAMF,EAASI,eAAf,YAAiCJ,EAASK,uBAA1C,YAAoEL,EAASjB,eAE/E,cAACuB,EAAA,EAAUC,KAAX,UAA6BL,GAARD,MA+D9B,SAASO,IACP5B,EAAyB,IAG3B,SAAS6B,IACP,OAAQC,EAAoBvB,GAAqBwB,QAAQ,GAxD3DC,qBAAU,WAER,IAAMC,EAAsCC,aAAaC,QAAQ,iBAC3DC,EAAkCF,aAAaC,QAAQ,aAC7D,GAA4C,OAAxCF,GACoC,OAApCG,EAAJ,CAEA,IAAMC,EAAkBC,KAAKC,MAAMH,IA2FrC,SAAuCnC,GAC9BA,EAAUA,EAAUuC,OAAS,GAAGrC,cAxFPsC,CAA8BJ,GAgGhE,SAA8CpC,GAC5C,IAAIyC,EAAiC,EACrCzC,EAAU0C,SAAQ,SAACvB,EAAUwB,GACvBxB,EAASG,OAASV,GAA2BO,EAASG,OAASV,IACnE6B,GAAkCtB,EAASI,eAAiBvB,EAAU2C,EAAM,GAAGpB,mBAnG1CqB,CAAqCR,GAM5ES,MAAM,SACL,IAEHd,qBAAU,WACPrB,EAAwBoC,QAAQC,UAAY,IAC7Cd,aAAae,QAAQ,YAAaX,KAAKY,UAAUjD,MAChD,CAACA,IAEJ+B,qBAAU,WACRE,aAAae,QAAQ,gBAAiB,GAAK5C,KAC1C,CAACA,IA+BJ,IAAMyB,EAAoBqB,mBAAgB,WACxC,OAAqB,IAAjBhD,EAA2B,EACxBiD,QAAQ,IAAOvD,EAAS,IAAOM,GAAc4B,QAAQ,MAC3D,CAAClC,EAAQM,IAsDZ,SAASiB,IACP,IAA0B,KArEE,IAArBnB,EAAUuC,QAAgBvC,EAAU,GAAGsB,OAASV,GAqEvD,CAKA,IAAMwC,EAAmBhD,EAAgB,EACzCC,EAAiB+C,GACjB,IAAMC,EAA+B7C,EApLd,EAsLjB8C,EAAqBtD,EAAUA,EAAUuC,OAAS,GAAGhB,eAEvDgC,EAA6BzD,EAGjC,GAAIyD,EAA2BhB,OAAS,GAAuE,IAAlEiB,OAAOxD,EAAUA,EAAUuC,OAAS,GAAGhB,gBAAgBgB,OAAc,CAEhH,IAAMkB,EAAmBD,OAAOxD,EAAUA,EAAUuC,OAAS,GAAGhB,gBAAgBjC,MAAM,EAAG,GACnFoE,EAAgBF,OAAOxD,EAAUA,EAAUuC,OAAS,GAAGhB,gBAAgBjC,MAAM,EAAG,GAGpFiE,EADEJ,OAAOI,GAA8BJ,OAAOO,GACjBD,EAAmBrE,EAAsB+D,OAAOI,IAEhDC,OAAOL,OAAOM,GAAoB,GAAKrE,EAAsB+D,OAAOI,IAIrG,IAAMI,EAA6BR,OAAOI,GAA8BD,EAClE9B,EAAyB2B,QAnLe,EAoL3CQ,EAAuEN,GAA8BvB,QAAQ,IAG1G8B,EAAyBtD,EAAsBqD,EACrDpD,EAAuBqD,GAEvB,IACMC,EAAkBV,QAAQS,GADkB,KA3LxB,IA2LsDR,IACqBC,GAA8BvB,QAAQ,IAC3IgC,QAAQC,IAAIX,GACZjD,EAAgB0D,GAEhB5D,EACED,EAAUgE,OAAO,CACf1C,KAAMV,EACNW,eAAgB4B,OAAOI,GACvB/B,yBACAtB,aAAc2D,KAGlBlC,SA9CEkB,MAAM,wFA0EV,SAASoB,IACP,IAAMC,EARR,WACE,IAAMC,EAAkBC,YAAO,IAAIC,KAAQ,oBAG3C,MAFU,UAAMF,EAAN,qCACRjE,EADQ,qCACa2B,EADb,qBACmCvB,EADnC,kBAC2DsB,IAD3D,WAMG0C,GACbC,UAAUC,UAAUC,UAAUP,GAAMQ,MAClC,WACEZ,QAAQC,IAAI,qFAEd,WACED,QAAQC,IAAI,qFAKlB,SAASY,IA7KA3E,EAAUuC,OAAS,GAAKvC,EAAU,GAAGsB,OAASV,EA+KnDiC,MAAM,oGAGsB,KAA1B/C,GAIJG,EACED,EAAUgE,OAAO,CACf1C,KAAMV,EACNW,eAAgB4B,OAAOrD,GACvB0B,uBAAwB,EACxBtB,aAAc,KAIlByB,KAZEkB,MAAM,sEAeV,OACE,qBAAK7B,UAAU,MAAf,SACE,cAAC4D,EAAA,EAAD,CAAW5D,UAAU,OAArB,SACE,eAAC6D,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACE,oBAAG9D,UAAU,OAAb,2CACO,+BAAOa,OAEd,oBAAGb,UAAU,OAAb,2CACO,+BAAOV,OAEd,oBAAGU,UAAU,OAAb,qCACM,+BAAOY,SAGb,eAACiD,EAAA,EAAD,WACE,cAACpF,EAAA,EAAD,CAAQuB,UAAU,YAAYD,QAAQ,UAAUE,QAAS,kBAAMgD,KAA/D,gCAGA,cAACxE,EAAA,EAAD,CAAQuB,UAAU,OAAOD,QAAQ,UAAUE,QAAS,kBAnLhE,WACE,IAAM8D,EAAkB/E,EAAUuC,OAElC,GAAwB,IAApBwC,EAAJ,CAGA,IAAMC,EAAehF,EAAUA,EAAUuC,OAAS,GAC9CyC,EAAa1D,OAASV,GACxBP,EAAiBD,EAAgB,GAGnC,IAAM6E,EAAmBjF,EAAUkF,QAAO,SAAC/D,EAAUC,GACnD,OAAOA,IAAU2D,EAAkB,KAYrC,GAPgC,IAA5BE,EAAiB1C,QAA4C,IAA5B0C,EAAiB1C,OACpDpC,EAAgB,GAEhBA,EAAgB8E,EAAiBA,EAAiB1C,OAAS,GAAGrC,cAI5D8E,EAAa1D,OAASV,GAAuBqE,EAAiB1C,OAAS,EAAG,CAC5E,IAAM4C,EACJnF,EAAUA,EAAUuC,OAAS,GAAGhB,eAAiB0D,EAAiBA,EAAiB1C,OAAS,GAAGhB,eACjGhB,EAAuBD,EAAsB6E,GAG/ClF,EAAagF,IAqJuDG,IAA1D,oCAKF,cAACC,EAAA,EAAD,CACErE,UAAU,OACVsE,GAAG,sBACHC,MAAOzF,EACP0F,SAlNZ,SAAqCC,GACnC1F,EAAyB0F,EAAMC,OAAOH,QAkN5BI,YAAY,mCAGd,eAACd,EAAA,EAAD,CAAK7D,UAAU,WAAf,UACGH,EACD,cAACpB,EAAA,EAAD,CAAQsB,QAAQ,UAAUC,UAAU,QAAQC,QAAS,kBAAMU,KAA3D,eAGA,cAAClC,EAAA,EAAD,CAAQsB,QAAQ,UAAUC,UAAU,UACpC,cAACvB,EAAA,EAAD,CAAQsB,QAAQ,UAAUC,UAAU,QAAQC,QAAS,kBAAME,KAA3D,0BAGA,cAAC5B,EAAD,CAAkBwB,QAAQ,UAAUC,UAAU,QAAQC,QAAS,WAlG3C,KAA1BnB,GAKJG,EACED,EAAUgE,OAAO,CACf1C,KAAMV,EACNW,eAAgB4B,OAAOrD,GACvB0B,uBAAwB,EACxBtB,kBAIJyB,KAbEkB,MAAM,uEAiGE,kDAGA,cAACtD,EAAD,CAAkB+F,GAAG,mBAAmBvE,QAAQ,UAAUC,UAAU,QAAQC,QAAS,kBAAM0D,KAA3F,iEAKF,cAACE,EAAA,EAAD,UACE,eAACe,EAAA,EAAD,CAAYC,KAAK,KAAjB,UACE,cAACD,EAAA,EAAWE,QAAZ,UACE,cAACF,EAAA,EAAWG,KAAZ,yCAEF,cAACV,EAAA,EAAD,CAAaE,MAAO3F,EAAQ4F,SApP1C,SAAsBC,GACpB5F,EAAUsD,OAAOsC,EAAMC,OAAOH,gBAsPtB,cAACV,EAAA,EAAD,UACE,eAACe,EAAA,EAAD,CAAYC,KAAK,KAAjB,UACE,cAACD,EAAA,EAAWE,QAAZ,UACE,cAACF,EAAA,EAAWG,KAAZ,mCAEF,cAACV,EAAA,EAAD,CAAaE,MAAO/E,EAAcgF,SAxPhD,SAA4BC,GAC1BhF,EAAgB0C,OAAOsC,EAAMC,OAAOH,mBAiQ9B,cAACT,EAAA,EAAD,UACE,cAACrD,EAAA,EAAD,CAAWT,UAAU,eAAegF,IAAKtF,EAAzC,SACGQ,cC3Wf+E,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.3cb0e0cc.chunk.js","sourcesContent":["export const getdoubleDigestNumber = (number: number) => {\n  return (\"0\" + number).slice(-2);\n};\n","import React, { useState, useRef, useEffect, useMemo } from \"react\";\nimport styled from \"styled-components\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, FormControl, Button, ListGroup, InputGroup } from \"react-bootstrap\";\nimport { format } from \"date-fns\";\n\nimport { getdoubleDigestNumber } from \"./utils/number\";\n\nconst ShrinkNameButton = styled(Button)`\n  font-size: 0.4rem;\n`;\n\nconst EXCHANGE_RATE_BASE = 4;\n\ntype RotationType = {\n  type: string;\n  rotationNumber: number;\n  rotationRateMostRecent: number;\n  rotationRate: number;\n};\n\nfunction App() {\n  const [border, setBorder] = useState<number>(18.0);\n  const [rotationNumberInputed, setRotationNumberInputed] = useState<string>(\"\");\n  const [rotations, setRotations] = useState<RotationType[]>([]);\n  const [rotationRate, setRotationRate] = useState(0);\n  const [investmentCnt, setInvestmentCnt] = useState(0);\n  const [totalRotationNumber, setTotalRotationNumber] = useState(0);\n  const [exchangeRate, setExchangeRate] = useState<number>(4);\n\n  const rotationListRef = useRef<HTMLDivElement>(null);\n\n  const replenishmentAmount = 500;\n  const ratioOfReplenishmentAmountToThousandYen = 1000 / replenishmentAmount;\n\n  const rotationType = {\n    normal: \"normal\",\n    continueStart: \"continueStart\",\n    resetStart: \"resetStart\",\n  };\n\n  const $numberButtons = [\"7\", \"8\", \"9\", \"4\", \"5\", \"6\", \"1\", \"2\", \"3\", \"0\"].map((number) => (\n    <Button key={number} variant=\"primary\" className=\"col-4\" onClick={() => setRotationNumberInputed(rotationNumberInputed + number)}>\n      {number}\n    </Button>\n  ));\n\n  const $rotations = rotations.map((rotation, index) => {\n    let content = \"\";\n    if (rotation.type === rotationType.resetStart) {\n      content = `${rotation.rotationNumber} --start--`;\n    } else if (rotation.type === rotationType.continueStart) {\n      content = `${rotation.rotationNumber} > start`;\n    } else if (rotation.type === rotationType.normal) {\n      content = `${rotation.rotationNumber} ${rotation.rotationRateMostRecent} ${rotation.rotationRate}`;\n    }\n    return <ListGroup.Item key={index}>{content}</ListGroup.Item>;\n  });\n\n  // useEffect(() => {\n  //   setRotationNumberInputed(\"0\");\n  //   const $resetStartButton = document.getElementById(\"resetStartButton\");\n  //   setTimeout(() => {\n  //     $resetStartButton.click();\n  //   }, 1);\n  // }, []);\n\n  // 初回描画時に実行\n  useEffect(() => {\n    // ローカルストレージに「回転配列」があるか確認\n    const investmentCntGettedFromLocalStorage = localStorage.getItem(\"investmentCnt\");\n    const rotationsGettedFromLocalStorage = localStorage.getItem(\"rotations\");\n    if (investmentCntGettedFromLocalStorage === null) return;\n    if (rotationsGettedFromLocalStorage === null) return;\n\n    const rotationsParsed = JSON.parse(rotationsGettedFromLocalStorage);\n\n    // 存在する場合\n    // 回転配列から回転率と総回転数を求める\n    const rotationRateCalculatted = calcRotationRateFromRotations(rotationsParsed);\n    const rotationNumberTotalCalculatted = calcTotalRotationNumberFromRotations(rotationsParsed);\n    \n    // setRotationRate(rotationRateCalculatted);\n    // setTotalRotationNumber(rotationNumberTotalCalculatted);\n    // setInvestmentCnt(Number(investmentCntGettedFromLocalStorage));\n    // setRotations(rotationsParsed);\n    alert(\"hi\");\n  }, []);\n\n  useEffect(() => {\n    (rotationListRef as any).current.scrollTop = 700;\n    localStorage.setItem(\"rotations\", JSON.stringify(rotations));\n  }, [rotations]);\n\n  useEffect(() => {\n    localStorage.setItem(\"investmentCnt\", \"\" + investmentCnt);\n  }, [investmentCnt]);\n\n  function isResetStarted() {\n    return rotations.length > 0 && rotations[0].type === rotationType.resetStart;\n  }\n\n  // change系\n  function changeBorder(event: React.ChangeEvent<HTMLInputElement>) {\n    setBorder(Number(event.target.value));\n  }\n\n  function changeExchangeRate(event: React.ChangeEvent<HTMLInputElement>) {\n    setExchangeRate(Number(event.target.value));\n  }\n\n  function changeRotationNumberInputed(event: React.ChangeEvent<HTMLInputElement>) {\n    setRotationNumberInputed(event.target.value);\n  }\n\n  function _isResetStarted() {\n    return rotations.length !== 0 && rotations[0].type === rotationType.resetStart;\n  }\n\n  function clearRotationNumberInputed() {\n    setRotationNumberInputed(\"\");\n  }\n\n  function _getWorkAmount() {\n    return (rotationUnitPrice * totalRotationNumber).toFixed(0);\n  }\n\n  const rotationUnitPrice = useMemo<number>(() => {\n    if (rotationRate === 0) return 0;\n    return Number((1000 / border - 1000 / rotationRate).toFixed(1));\n  }, [border, rotationRate]);\n\n  //　回転配列を1行削除する。\n  function deleteOneRotation() {\n    const rotationsLength = rotations.length;\n\n    if (rotationsLength === 0) return;\n\n    // 投資回数の調整\n    const lastRotation = rotations[rotations.length - 1];\n    if (lastRotation.type === rotationType.normal) {\n      setInvestmentCnt(investmentCnt - 1);\n    }\n\n    const rotationsDeleted = rotations.filter((rotation, index) => {\n      return index !== rotationsLength - 1;\n    });\n\n    // 回転率の更新\n    // 長さが1の時、必ずリセットスタートなので、回転率は0に設定してあります。\n    if (rotationsDeleted.length === 1 || rotationsDeleted.length === 0) {\n      setRotationRate(0);\n    } else {\n      setRotationRate(rotationsDeleted[rotationsDeleted.length - 1].rotationRate);\n    }\n\n    // 総回転数の更新\n    if (lastRotation.type === rotationType.normal && rotationsDeleted.length > 0) {\n      const rotationNumberDiffShouldSub =\n        rotations[rotations.length - 1].rotationNumber - rotationsDeleted[rotationsDeleted.length - 1].rotationNumber;\n      setTotalRotationNumber(totalRotationNumber - rotationNumberDiffShouldSub);\n    }\n\n    setRotations(rotationsDeleted);\n  }\n\n  function calcRotationRateFromRotations(rotations: RotationType[]) {\n    return rotations[rotations.length - 1].rotationRate;\n  }\n\n  // 回転配列から総回転数を求める。\n  // 計算方法↓\n  // 「回転配列」を先頭から見ていった時に\n  // 「リセットスタート」または「継続スタート」の「回転数」と\n  // 「他の継続スタート」の「回転数」との差を集計していくと「総回転数」が求められることを利用する。\n  function calcTotalRotationNumberFromRotations(rotations: RotationType[]) {\n    let totalRotationNumberCalculatted = 0;\n    rotations.forEach((rotation, idx) => {\n      if (rotation.type === rotationType.resetStart || rotation.type === rotationType.continueStart) return;\n      totalRotationNumberCalculatted += rotation.rotationNumber - rotations[idx - 1].rotationNumber;\n    });\n    return totalRotationNumberCalculatted;\n  }\n\n  function rotation() {\n    if (_isResetStarted() === false) {\n      alert(`リセットスタートをしましょう`);\n      return;\n    }\n\n    const investmentCntNow = investmentCnt + 1;\n    setInvestmentCnt(investmentCntNow);\n    const magnificationForExchangeRate = exchangeRate / EXCHANGE_RATE_BASE;\n\n    const rotationNumberLast = rotations[rotations.length - 1].rotationNumber;\n\n    let rotationNumberInputedClone = rotationNumberInputed;\n\n    // 入力された回転数が3桁未満の場合かつ前回の回転数が3桁のとき\n    if (rotationNumberInputedClone.length < 3 && String(rotations[rotations.length - 1].rotationNumber).length === 3) {\n      // 前回の回転数を百の位の数とそれ以外に分ける\n      const numberOfHundreds = String(rotations[rotations.length - 1].rotationNumber).slice(0, 1);\n      const lastTwoDigits = String(rotations[rotations.length - 1].rotationNumber).slice(1, 3);\n      // 下2桁よりも回転数が大きければ、百の位の数+回転数としたものを回転数とする。\n      if (Number(rotationNumberInputedClone) > Number(lastTwoDigits)) {\n        rotationNumberInputedClone = numberOfHundreds + getdoubleDigestNumber(Number(rotationNumberInputedClone));\n      } else {\n        rotationNumberInputedClone = String(Number(numberOfHundreds) + 1) + getdoubleDigestNumber(Number(rotationNumberInputedClone));\n      }\n    }\n\n    const rotationNumberDiffFromLast = Number(rotationNumberInputedClone) - rotationNumberLast;\n    const rotationRateMostRecent = Number(\n      (rotationNumberDiffFromLast * ratioOfReplenishmentAmountToThousandYen * magnificationForExchangeRate).toFixed(1)\n    );\n\n    const totalRotationNumberNow = totalRotationNumber + rotationNumberDiffFromLast;\n    setTotalRotationNumber(totalRotationNumberNow);\n\n    const ratioOfTotalInvestmentAmountToThousandYen = 1000 / (replenishmentAmount * investmentCntNow);\n    const rotationRateNow = Number((totalRotationNumberNow * ratioOfTotalInvestmentAmountToThousandYen * magnificationForExchangeRate).toFixed(1));\n    console.log(investmentCntNow);\n    setRotationRate(rotationRateNow);\n\n    setRotations(\n      rotations.concat({\n        type: rotationType.normal,\n        rotationNumber: Number(rotationNumberInputedClone),\n        rotationRateMostRecent,\n        rotationRate: rotationRateNow,\n      })\n    );\n    clearRotationNumberInputed();\n  }\n\n  function continueStart() {\n    if (rotationNumberInputed === \"\") {\n      alert(`回転数を入力しましょう`);\n      return;\n    }\n\n    setRotations(\n      rotations.concat({\n        type: rotationType.continueStart,\n        rotationNumber: Number(rotationNumberInputed),\n        rotationRateMostRecent: 0,\n        rotationRate,\n      })\n    );\n\n    clearRotationNumberInputed();\n  }\n\n  function getRotationsTextForCopyToClickboard() {\n    const dateNowFormated = format(new Date(), \"yyyy/MM/dd HH:mm\");\n    const text = `${dateNowFormated}\n回転率：${rotationRate}, 仕事量：${rotationUnitPrice}円×${totalRotationNumber}回(${_getWorkAmount()}円)`;\n    return text;\n  }\n\n  function setClipboard() {\n    const text = getRotationsTextForCopyToClickboard();\n    navigator.clipboard.writeText(text).then(\n      function () {\n        console.log(\"クリップボード書き込み成功\");\n      },\n      function () {\n        console.log(\"クリップボード書き込み成功\");\n      }\n    );\n  }\n\n  function resetStart() {\n    if (isResetStarted()) {\n      alert(\"既にリセットスタートされています\");\n      return;\n    }\n    if (rotationNumberInputed === \"\") {\n      alert(`回転数を入力しましょう`);\n      return;\n    }\n    setRotations(\n      rotations.concat({\n        type: rotationType.resetStart,\n        rotationNumber: Number(rotationNumberInputed),\n        rotationRateMostRecent: 0,\n        rotationRate: 0,\n      })\n    );\n\n    clearRotationNumberInputed();\n  }\n\n  return (\n    <div className=\"App\">\n      <Container className=\"pt-3\">\n        <Row>\n          <Col>\n            <p className=\"mb-0\">\n              回転単価：<span>{rotationUnitPrice}</span>\n            </p>\n            <p className=\"mb-0\">\n              総回転数：<span>{totalRotationNumber}</span>\n            </p>\n            <p className=\"mb-0\">\n              仕事量：<span>{_getWorkAmount()}</span>\n            </p>\n\n            <Row>\n              <Button className=\"mr-1 mb-1\" variant=\"primary\" onClick={() => setClipboard()}>\n                コピー\n              </Button>\n              <Button className=\"mb-1\" variant=\"primary\" onClick={() => deleteOneRotation()}>\n                1行削除\n              </Button>\n            </Row>\n\n            <FormControl\n              className=\"mb-1\"\n              id=\"rotationNumberInput\"\n              value={rotationNumberInputed}\n              onChange={changeRotationNumberInputed}\n              placeholder=\"回転数入力\"\n            />\n\n            <Row className=\"m-0 mb-2\">\n              {$numberButtons}\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => clearRotationNumberInputed()}>\n                C\n              </Button>\n              <Button variant=\"primary\" className=\"col-4\"></Button>\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => rotation()}>\n                回転\n              </Button>\n              <ShrinkNameButton variant=\"primary\" className=\"col-4\" onClick={() => continueStart()}>\n                継続スタート\n              </ShrinkNameButton>\n              <ShrinkNameButton id=\"resetStartButton\" variant=\"primary\" className=\"col-4\" onClick={() => resetStart()}>\n                リセットスタート\n              </ShrinkNameButton>\n            </Row>\n\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>ボーダー</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={border} onChange={changeBorder} />\n              </InputGroup>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>交換率</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={exchangeRate} onChange={changeExchangeRate} />\n              </InputGroup>\n            </Row>\n\n            {/* <Row>\n              <Button className=\"mb-1\" variant=\"primary\" onClick={() => deleteAllRotation()}>\n                全行削除\n              </Button>\n            </Row> */}\n          </Col>\n          <Col>\n            <ListGroup className=\"rotationList\" ref={rotationListRef}>\n              {$rotations}\n            </ListGroup>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}