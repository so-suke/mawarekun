{"version":3,"sources":["App.tsx","index.tsx"],"names":["axios","require","default","ShrinkNameButton","styled","Button","App","useState","rotationNumberInputed","setRotationNumberInputed","rotations","setRotations","rotationRate","setRotationRate","investmentCnt","setInvestmentCnt","totalRotationNumber","setTotalRotationNumber","border","setBorder","storeNames","setStoreNames","storeName","setStoreName","machineName","setMachineName","Map","storeNamesExchangeRatesMap","setStoreNamesExchangeRatesMap","exchangeRate","setExchangeRate","rotationListRef","useRef","selectStoreRef","document","createElement","rotationType","clearRotationNumberInputed","getWorkAmount","rotationUnitPrice","toFixed","useEffect","storeNamesInit","set","initStoreNamesExchangeRates","storeNameGettedFromLocalStorage","localStorage","getItem","machineNameGettedFromLocalStorage","investmentCntGettedFromLocalStorage","rotationsGettedFromLocalStorage","borderGettedFromLocalStorage","rotationsParsed","JSON","parse","rotationRateCalculatted","length","calcRotationRateFromRotations","rotationNumberTotalCalculatted","totalRotationNumberCalculatted","forEach","rotation","idx","type","rotationNumber","calcTotalRotationNumberFromRotations","Number","current","scrollTop","scrollHeight","setItem","stringify","storeExchangeRate","get","useMemo","investmentCntNow","magnificationForExchangeRate","rotationNumberLast","rotationNumberInputedClone","String","convertToThreeDigits","slice","rotationNumberDiffFromLast","rotationRateMostRecent","totalRotationNumberNow","rotationRateNow","concat","alert","copyWorkRecord","navigator","clipboard","writeText","now","Date","dateFormattedStart","format","timeFormattedStart","timeFormattedNow","join","getWorkRecordForSpreadSheet","resetStart","value","$storeNames","$doms","disabled","hidden","map","store","$numberButtons","number","variant","className","onClick","$rotations","index","content","ListGroup","Item","Container","Row","Col","rotationsLength","lastRotation","rotationsDeleted","filter","rotationNumberDiffShouldSub","deleteOneRotation","FormControl","id","onChange","event","target","placeholder","InputGroup","size","Prepend","Text","Form","Control","as","ref","params","URLSearchParams","append","post","then","response","console","log","catch","error","writeWorkRecordToSpreadsheet","window","confirm","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e0ab5a62.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect, useMemo } from \"react\";\nimport styled from \"styled-components\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, FormControl, Form, Button, ListGroup, InputGroup } from \"react-bootstrap\";\nimport { format } from \"date-fns\";\nconst axios = require(\"axios\").default;\n\nconst ShrinkNameButton = styled(Button)`\n  font-size: 0.4rem;\n`;\n\n// TITLES\nconst SELECT_STORE_TITLE: string = \"店名を選択して下さい。\";\n\n// 交換率\nconst EXCHANGE_RATE_BASE = 4;\n\n// スプレッドシートREST_URL\nconst REST_URL_SPREADSHEET = \"https://script.google.com/macros/s/AKfycbwAEFQ6VWnrJ67EjQiYd8WeEv0D2ogBpV2GYDgxucx9C5gf1Dmd/exec\";\n\ntype RotationType = {\n  type: string;\n  rotationNumber: number;\n  rotationRateMostRecent: number;\n  rotationRate: number;\n};\n\nfunction App() {\n  const [rotationNumberInputed, setRotationNumberInputed] = useState<string>(\"\");\n  const [rotations, setRotations] = useState<RotationType[]>([]);\n  const [rotationRate, setRotationRate] = useState(0);\n  const [investmentCnt, setInvestmentCnt] = useState(0);\n  const [totalRotationNumber, setTotalRotationNumber] = useState(0);\n  const [border, setBorder] = useState<string>(\"18.0\");\n  const [storeNames, setStoreNames] = useState<string[]>([]);\n  const [storeName, setStoreName] = useState(\"\");\n  const [machineName, setMachineName] = useState(\"\");\n\n  const [storeNamesExchangeRatesMap, setStoreNamesExchangeRatesMap] = useState(new Map());\n  const [exchangeRate, setExchangeRate] = useState<string>(\"\");\n\n  const rotationListRef = useRef<HTMLDivElement>(null);\n  const selectStoreRef = useRef<HTMLSelectElement>(document.createElement(\"select\"));\n\n  const replenishmentAmount = 500;\n  const ratioOfReplenishmentAmountToThousandYen = 1000 / replenishmentAmount;\n\n  const rotationType = {\n    normal: \"normal\",\n    continueStart: \"continueStart\",\n    resetStart: \"resetStart\",\n  };\n\n  // 初期値として、それぞれの「店名と交換率」を設定する。\n  const initStoreNamesExchangeRates = () => {\n    const storeNamesInit = [\"DoruNakano\", \"LiNakano\", \"NtNakano\"];\n    setStoreNames(storeNamesInit);\n    setStoreNamesExchangeRatesMap(storeNamesExchangeRatesMap.set(storeNamesInit[0], 4.38));\n    setStoreNamesExchangeRatesMap(storeNamesExchangeRatesMap.set(storeNamesInit[1], 4));\n    setStoreNamesExchangeRatesMap(storeNamesExchangeRatesMap.set(storeNamesInit[2], 4));\n  };\n\n  // 初回描画時に実行\n  useEffect(() => {\n    // 初期値として、それぞれの「店名と交換率」を設定する。\n    initStoreNamesExchangeRates();\n\n    // ローカルストレージから各値を取得。\n    const storeNameGettedFromLocalStorage = localStorage.getItem(\"storeName\");\n    const machineNameGettedFromLocalStorage = localStorage.getItem(\"machineName\");\n    const investmentCntGettedFromLocalStorage = localStorage.getItem(\"investmentCnt\");\n    const rotationsGettedFromLocalStorage = localStorage.getItem(\"rotations\");\n    const borderGettedFromLocalStorage = localStorage.getItem(\"border\");\n\n    if (storeNameGettedFromLocalStorage === null) return;\n    if (machineNameGettedFromLocalStorage === null) return;\n    if (investmentCntGettedFromLocalStorage === null) return;\n    if (rotationsGettedFromLocalStorage === null) return;\n    if (borderGettedFromLocalStorage === null) return;\n\n    setStoreName(storeNameGettedFromLocalStorage);\n    setMachineName(machineNameGettedFromLocalStorage);\n\n    const rotationsParsed = JSON.parse(rotationsGettedFromLocalStorage);\n\n    // 存在する場合\n    // 回転配列から回転率と総回転数を求める\n\n    const rotationRateCalculatted = calcRotationRateFromRotations(rotationsParsed);\n    const rotationNumberTotalCalculatted = calcTotalRotationNumberFromRotations(rotationsParsed);\n\n    setRotationRate(rotationRateCalculatted);\n    setTotalRotationNumber(rotationNumberTotalCalculatted);\n    setInvestmentCnt(Number(investmentCntGettedFromLocalStorage));\n    setRotations(rotationsParsed);\n    setBorder(borderGettedFromLocalStorage);\n  }, []);\n\n  useEffect(() => {\n    (rotationListRef as any).current.scrollTop = (rotationListRef as any).current.scrollHeight;\n    localStorage.setItem(\"rotations\", JSON.stringify(rotations));\n  }, [rotations]);\n\n  useEffect(() => {\n    localStorage.setItem(\"investmentCnt\", \"\" + investmentCnt);\n  }, [investmentCnt]);\n\n  useEffect(() => {\n    localStorage.setItem(\"border\", border);\n  }, [border]);\n\n  useEffect(() => {\n    // 選択肢の店名が変更されたら、対応した交換率へ変更する。\n    const storeExchangeRate = storeNamesExchangeRatesMap.get(storeName);\n    setExchangeRate(storeExchangeRate);\n\n    // ページ再読込に対応するため\n    localStorage.setItem(\"storeName\", storeName);\n  }, [storeName]);\n\n  function isResetStarted() {\n    return rotations.length > 0 && rotations[0].type === rotationType.resetStart;\n  }\n\n  // change系\n  function changeStoreNamesSelect(event: React.ChangeEvent<HTMLInputElement>) {\n    setStoreName(event.target.value);\n  }\n\n  function changeBorder(event: React.ChangeEvent<HTMLInputElement>) {\n    setBorder(event.target.value);\n  }\n\n  // 機種名の変更\n  function changeMachineName(event: React.ChangeEvent<HTMLInputElement>) {\n    const machineName = event.target.value;\n    setMachineName(machineName);\n    localStorage.setItem(\"machineName\", machineName);\n  }\n\n  function changeExchangeRate(event: React.ChangeEvent<HTMLInputElement>) {\n    setExchangeRate(event.target.value);\n  }\n\n  function changeRotationNumberInputed(event: React.ChangeEvent<HTMLInputElement>) {\n    setRotationNumberInputed(event.target.value);\n  }\n\n  function _isResetStarted() {\n    return rotations.length !== 0 && rotations[0].type === rotationType.resetStart;\n  }\n\n  function clearRotationNumberInputed() {\n    setRotationNumberInputed(\"\");\n  }\n\n  function getWorkAmount() {\n    return (rotationUnitPrice * totalRotationNumber).toFixed(0);\n  }\n\n  const rotationUnitPrice = useMemo<number>(() => {\n    if (rotationRate === 0) return 0;\n    return Number((1000 / Number(border) - 1000 / rotationRate).toFixed(1));\n  }, [border, rotationRate]);\n\n  //　回転配列を1行削除する。\n  function deleteOneRotation() {\n    const rotationsLength = rotations.length;\n\n    if (rotationsLength === 0) return;\n\n    // 投資回数の調整\n    const lastRotation = rotations[rotations.length - 1];\n    if (lastRotation.type === rotationType.normal) {\n      setInvestmentCnt(investmentCnt - 1);\n    }\n\n    const rotationsDeleted = rotations.filter((rotation, index) => {\n      return index !== rotationsLength - 1;\n    });\n\n    // 回転率の更新\n    // 長さが1の時、必ずリセットスタートなので、回転率は0に設定してあります。\n    if (rotationsDeleted.length === 1 || rotationsDeleted.length === 0) {\n      setRotationRate(0);\n    } else {\n      setRotationRate(rotationsDeleted[rotationsDeleted.length - 1].rotationRate);\n    }\n\n    // 総回転数の更新\n    if (lastRotation.type === rotationType.normal && rotationsDeleted.length > 0) {\n      const rotationNumberDiffShouldSub =\n        rotations[rotations.length - 1].rotationNumber - rotationsDeleted[rotationsDeleted.length - 1].rotationNumber;\n      setTotalRotationNumber(totalRotationNumber - rotationNumberDiffShouldSub);\n    }\n\n    setRotations(rotationsDeleted);\n  }\n\n  function calcRotationRateFromRotations(rotations: RotationType[]) {\n    if (rotations.length === 0) return 0;\n    return rotations[rotations.length - 1].rotationRate;\n  }\n\n  function deleteAllRotation() {\n    if (window.confirm(\"全行削除してもいいですか？\")) {\n      setRotations([]);\n      setRotationRate(0);\n      setInvestmentCnt(0);\n      setTotalRotationNumber(0);\n    }\n  }\n\n  // 回転配列から総回転数を求める。\n  function calcTotalRotationNumberFromRotations(rotations: RotationType[]) {\n    let totalRotationNumberCalculatted = 0;\n    rotations.forEach((rotation, idx) => {\n      if (rotation.type === rotationType.resetStart || rotation.type === rotationType.continueStart) return;\n      totalRotationNumberCalculatted += rotation.rotationNumber - rotations[idx - 1].rotationNumber;\n    });\n    return totalRotationNumberCalculatted;\n  }\n\n  function rotation() {\n    if (_isResetStarted() === false) {\n      alert(`リセットスタートをしましょう`);\n      return;\n    }\n\n    const investmentCntNow = investmentCnt + 1;\n    setInvestmentCnt(investmentCntNow);\n    const magnificationForExchangeRate: number = Number(exchangeRate) / EXCHANGE_RATE_BASE;\n\n    const rotationNumberLast = rotations[rotations.length - 1].rotationNumber;\n\n    let rotationNumberInputedClone: number = Number(rotationNumberInputed);\n\n    // 回転数の短縮入力：ひとまず回転数が3桁以下の場合のみ対応\n    if (String(rotationNumberInputedClone).length < 3 && String(rotations[rotations.length - 1].rotationNumber).length > 1) {\n      const convertToThreeDigits: string = (\"000\" + rotations[rotations.length - 1].rotationNumber).slice(-3);\n      const lastTwoDigits: number = Number(String(rotations[rotations.length - 1].rotationNumber).slice(1, 3));\n      const baseNumberOfHundreds: number =\n        rotationNumberInputedClone > lastTwoDigits ? Number(convertToThreeDigits[0]) : Number(convertToThreeDigits[0]) + 1;\n\n      const baseNumber: number = baseNumberOfHundreds * 100;\n      rotationNumberInputedClone += baseNumber;\n    }\n\n    const rotationNumberDiffFromLast = Number(rotationNumberInputedClone) - rotationNumberLast;\n    const rotationRateMostRecent = Number(\n      (rotationNumberDiffFromLast * ratioOfReplenishmentAmountToThousandYen * magnificationForExchangeRate).toFixed(1)\n    );\n\n    const totalRotationNumberNow = totalRotationNumber + rotationNumberDiffFromLast;\n    setTotalRotationNumber(totalRotationNumberNow);\n\n    const ratioOfTotalInvestmentAmountToThousandYen = 1000 / (replenishmentAmount * investmentCntNow);\n    const rotationRateNow = Number((totalRotationNumberNow * ratioOfTotalInvestmentAmountToThousandYen * magnificationForExchangeRate).toFixed(1));\n    setRotationRate(rotationRateNow);\n\n    setRotations(\n      rotations.concat({\n        type: rotationType.normal,\n        rotationNumber: Number(rotationNumberInputedClone),\n        rotationRateMostRecent,\n        rotationRate: rotationRateNow,\n      })\n    );\n    clearRotationNumberInputed();\n  }\n\n  function continueStart() {\n    if (rotationNumberInputed === \"\") {\n      alert(`回転数を入力しましょう`);\n      return;\n    }\n\n    setRotations(\n      rotations.concat({\n        type: rotationType.continueStart,\n        rotationNumber: Number(rotationNumberInputed),\n        rotationRateMostRecent: 0,\n        rotationRate,\n      })\n    );\n\n    clearRotationNumberInputed();\n  }\n\n  // スプレッドシートへ稼働記録を書き込む\n  function writeWorkRecordToSpreadsheet(): void {\n    const now = new Date();\n    const dateFormattedStart = format(now, \"yyyy/MM/dd\");\n    const timeFormattedStart = localStorage.getItem(\"startTime\");\n    const timeFormattedNow = format(now, \"HH:mm\");\n\n    const params = new URLSearchParams();\n    params.append(\"date\", `${dateFormattedStart} ${timeFormattedStart}〜${timeFormattedNow}`);\n    params.append(\"border\", `ボーダー：${border}`);\n    params.append(\"rotationRate\", `回転率：${rotationRate}`);\n    params.append(\"rotationUnitPrice\", `回転単価：${rotationUnitPrice}`);\n    params.append(\"totalRotationNumber\", `総回転数：${totalRotationNumber}`);\n    params.append(\"workAmount\", `${getWorkAmount()}`);\n    params.append(\"machineName\", `${machineName}`);\n    params.append(\"storeName\", `${storeName}`);\n\n    axios\n      .post(REST_URL_SPREADSHEET, params)\n      .then(function (response: any) {\n        console.log(response);\n      })\n      .catch(function (error: any) {\n        console.log(error);\n      });\n  }\n\n  // スプレッドシートへのペースト用テキストを取得。\n  function getWorkRecordForSpreadSheet(): string {\n    const now = new Date();\n    const dateFormattedStart = format(now, \"yyyy/MM/dd\");\n    const timeFormattedStart = localStorage.getItem(\"startTime\");\n    const timeFormattedNow = format(now, \"HH:mm\");\n\n    const delimiter = \"\t\";\n    // 下記でも動くようであれば、後々こちらに変更する。\n    // const delimiter = \"\\t\";\n\n    return [\n      `${dateFormattedStart} ${timeFormattedStart}〜${timeFormattedNow}`,\n      `ボーダー：${border}`,\n      `回転率：${rotationRate}`,\n      `回転単価：${rotationUnitPrice}`,\n      `総回転数：${totalRotationNumber}`,\n      `${getWorkAmount()}`,\n      `${machineName}`,\n      `${storeName}`,\n    ].join(delimiter);\n  }\n\n  // 稼働記録をコピー\n  function copyWorkRecord() {\n    navigator.clipboard.writeText(getWorkRecordForSpreadSheet());\n  }\n\n  function resetStart() {\n    if (isResetStarted()) {\n      alert(\"既にリセットスタートされています\");\n      return;\n    }\n\n    if (rotationNumberInputed === \"\") {\n      alert(`回転数を入力しましょう`);\n      return;\n    }\n\n    // 選択肢：店名の値が初期値の場合、警告を出す。\n    if (selectStoreRef.current.value === \"\") {\n      alert(`店名を選択して下さい。`);\n      return;\n    }\n\n    setRotations(\n      rotations.concat({\n        type: rotationType.resetStart,\n        rotationNumber: Number(rotationNumberInputed),\n        rotationRateMostRecent: 0,\n        rotationRate: 0,\n      })\n    );\n\n    clearRotationNumberInputed();\n\n    localStorage.setItem(\"startTime\", format(new Date(), \"HH:mm\"));\n  }\n\n  // DOMの定義\n\n  // 店名の選択肢\n  const $storeNames = (() => {\n    const $doms = [\n      <option key={\"defaultValue\"} value=\"\" disabled hidden>\n        {SELECT_STORE_TITLE}\n      </option>,\n    ];\n    const $storeNames = storeNames.map((store) => {\n      return (\n        <option key={store} value={store}>\n          {store}\n        </option>\n      );\n    });\n\n    const $domsConcated = [$doms, ...$storeNames];\n    return $domsConcated;\n  })();\n\n  const $numberButtons = [\"7\", \"8\", \"9\", \"4\", \"5\", \"6\", \"1\", \"2\", \"3\", \"0\"].map((number) => (\n    <Button key={number} variant=\"primary\" className=\"col-4\" onClick={() => setRotationNumberInputed(rotationNumberInputed + number)}>\n      {number}\n    </Button>\n  ));\n\n  const $rotations = rotations.map((rotation, index) => {\n    let content = \"\";\n    if (rotation.type === rotationType.resetStart) {\n      content = `${rotation.rotationNumber} --start--`;\n    } else if (rotation.type === rotationType.continueStart) {\n      content = `${rotation.rotationNumber} > start`;\n    } else if (rotation.type === rotationType.normal) {\n      content = `${rotation.rotationNumber} ${rotation.rotationRateMostRecent} ${rotation.rotationRate}`;\n    }\n    return <ListGroup.Item key={index}>{content}</ListGroup.Item>;\n  });\n\n  return (\n    <div className=\"App\">\n      <Container className=\"pt-3\">\n        <Row>\n          <Col>\n            <p className=\"mb-0\">\n              回転単価：<span>{rotationUnitPrice}</span>\n            </p>\n            <p className=\"mb-0\">\n              総回転数：<span>{totalRotationNumber}</span>\n            </p>\n            <p className=\"mb-0\">\n              仕事量：<span>{getWorkAmount()}</span>\n            </p>\n\n            <Row>\n              <Button className=\"mr-1 mb-1\" variant=\"primary\" onClick={() => copyWorkRecord()}>\n                コピー\n              </Button>\n              <Button className=\"mb-1\" variant=\"primary\" onClick={() => deleteOneRotation()}>\n                1行削除\n              </Button>\n            </Row>\n\n            <FormControl\n              className=\"mb-1\"\n              id=\"rotationNumberInput\"\n              value={rotationNumberInputed}\n              onChange={changeRotationNumberInputed}\n              placeholder=\"回転数入力\"\n            />\n\n            <Row className=\"m-0 mb-2\">\n              {$numberButtons}\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => clearRotationNumberInputed()}>\n                C\n              </Button>\n              <Button variant=\"primary\" className=\"col-4\"></Button>\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => rotation()}>\n                回転\n              </Button>\n              <ShrinkNameButton variant=\"primary\" className=\"col-4\" onClick={() => continueStart()}>\n                継続スタート\n              </ShrinkNameButton>\n              <ShrinkNameButton id=\"resetStartButton\" variant=\"primary\" className=\"col-4\" onClick={() => resetStart()}>\n                リセットスタート\n              </ShrinkNameButton>\n            </Row>\n\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>ボーダー</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={border} onChange={changeBorder} />\n              </InputGroup>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>店名</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control as=\"select\" value={storeName} onChange={changeStoreNamesSelect} ref={selectStoreRef}>\n                  {$storeNames}\n                </Form.Control>\n              </InputGroup>\n            </Row>\n            <Row>\n              <div className=\"mr-2\">交換率:</div>\n              <div>{exchangeRate}</div>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>機種名</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={machineName} onChange={changeMachineName} />\n              </InputGroup>\n            </Row>\n            <Row>\n              <Button className=\"mr-1 mb-1\" variant=\"primary\" onClick={() => writeWorkRecordToSpreadsheet()}>\n                スプレッドシート書込\n              </Button>\n            </Row>\n\n            <Row>\n              <Button className=\"allDeteleBtn\" variant=\"primary\" onClick={() => deleteAllRotation()}>\n                全行削除\n              </Button>\n            </Row>\n          </Col>\n          <Col>\n            <ListGroup className=\"rotationList\" ref={rotationListRef}>\n              {$rotations}\n            </ListGroup>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}