{"version":3,"sources":["utils/number.js","App.js","index.js"],"names":["getdoubleDigestNumber","number","slice","ShrinkNameButton","styled","Button","App","useState","border","setBorder","rotationNumberInputed","setRotationNumberInputed","rotations","setRotations","rotationRate","setRotationRate","investmentCnt","setInvestmentCnt","totalRotationNumber","setTotalRotationNumber","exchangeRate","setExchangeRate","rotationListRef","useRef","rotationType","$numberButtons","map","variant","className","onClick","$rotations","rotation","index","content","type","rotationNumber","rotationRateMostRecent","ListGroup","Item","clearRotationNumberInputed","_getWorkAmount","rotationUnitPrice","toFixed","useEffect","current","scrollTop","useMemo","length","investmentCntNow","magnificationForExchangeRate","rotationNumberLast","rotationNumberInputedClone","String","numberOfHundreds","lastTwoDigits","Number","rotationNumberDiffFromLast","totalRotationNumberNow","rotationRateNow","concat","alert","setClipboard","text","dateNowFormated","format","Date","getRotationsTextForCopyToClickboard","navigator","clipboard","writeText","then","console","log","resetStart","Container","Row","Col","rotationsLength","lastRotation","rotationsDeletedOne","filter","rotationNumberDiffShouldSub","deleteOneRotation","FormControl","id","value","onChange","event","target","placeholder","InputGroup","size","Prepend","Text","ref","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.628b5607.chunk.js","sourcesContent":["export const getdoubleDigestNumber = ({ number }) => {\n  return (\"0\" + number).slice(-2);\n};\n","import { useState, useRef, useEffect, useMemo } from \"react\";\nimport styled from \"styled-components\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, FormControl, Button, ListGroup, InputGroup } from \"react-bootstrap\";\n\nimport { format } from \"date-fns\";\n\nimport { getdoubleDigestNumber } from \"./utils/number\";\n\nconst ShrinkNameButton = styled(Button)`\n  font-size: 0.4rem;\n`;\n\nconst EXCHANGE_RATE_BASE = 4;\n\nfunction App() {\n  const [border, setBorder] = useState(18.0);\n  const [rotationNumberInputed, setRotationNumberInputed] = useState(\"\");\n  const [rotations, setRotations] = useState([]);\n  const [rotationRate, setRotationRate] = useState(0);\n  const [investmentCnt, setInvestmentCnt] = useState(0);\n  const [totalRotationNumber, setTotalRotationNumber] = useState(0);\n  const [exchangeRate, setExchangeRate] = useState(4);\n\n  const rotationListRef = useRef(null);\n\n  const replenishmentAmount = 500;\n  const ratioOfReplenishmentAmountToThousandYen = 1000 / replenishmentAmount;\n\n  const rotationType = {\n    normal: \"normal\",\n    continueStart: \"continueStart\",\n    resetStart: \"resetStart\",\n  };\n\n  const $numberButtons = [\"7\", \"8\", \"9\", \"4\", \"5\", \"6\", \"1\", \"2\", \"3\", \"0\"].map((number) => (\n    <Button key={number} variant=\"primary\" className=\"col-4\" onClick={() => setRotationNumberInputed(rotationNumberInputed + number)}>\n      {number}\n    </Button>\n  ));\n\n  const $rotations = rotations.map((rotation, index) => {\n    let content = \"\";\n    if (rotation.type === rotationType.resetStart) {\n      content = `${rotation.rotationNumber} --start--`;\n    } else if (rotation.type === rotationType.continueStart) {\n      content = `${rotation.rotationNumber} > start`;\n    } else if (rotation.type === rotationType.normal) {\n      content = `${rotation.rotationNumber} ${rotation.rotationRateMostRecent} ${rotation.rotationRate}`;\n    }\n    return <ListGroup.Item key={index}>{content}</ListGroup.Item>;\n  });\n\n  // useEffect(() => {\n  //   setRotationNumberInputed(\"0\");\n  //   const $resetStartButton = document.getElementById(\"resetStartButton\");\n  //   setTimeout(() => {\n  //     $resetStartButton.click();\n  //   }, 1);\n  // }, []);\n\n  useEffect(() => {\n    rotationListRef.current.scrollTop = 700;\n  }, [rotations]);\n\n  function isResetStarted() {\n    return rotations.length > 0 && rotations[0].type === rotationType.resetStart;\n  }\n\n  // changeç³»\n  function changeBorder(event) {\n    setBorder(event.target.value);\n  }\n\n  function changeExchangeRate(event) {\n    setExchangeRate(event.target.value);\n  }\n\n  function changeRotationNumberInputed(event) {\n    setRotationNumberInputed(Number(event.target.value));\n  }\n\n  function _isResetStarted() {\n    return rotations.length !== 0 && rotations[0].type === rotationType.resetStart;\n  }\n\n  function clearRotationNumberInputed() {\n    setRotationNumberInputed(\"\");\n  }\n\n  function _getWorkAmount() {\n    return (rotationUnitPrice * totalRotationNumber).toFixed(0);\n  }\n\n  const rotationUnitPrice = useMemo(() => {\n    if (rotationRate === 0) return 0;\n    return (1000 / border - 1000 / rotationRate).toFixed(1);\n  }, [border, rotationRate]);\n\n  function deleteOneRotation() {\n    const rotationsLength = rotations.length;\n\n    if (rotationsLength === 0) return;\n\n    const lastRotation = rotations[rotations.length - 1];\n    if (lastRotation.type === rotationType.normal) {\n      setInvestmentCnt(investmentCnt - 1);\n    }\n\n    const rotationsDeletedOne = rotations.filter((rotation, index) => {\n      return index !== rotationsLength - 1;\n    });\n\n    if (rotationsDeletedOne.length === 1 || rotationsDeletedOne.length === 0) {\n      setRotationRate(0);\n    } else {\n      setRotationRate(rotationsDeletedOne[rotationsDeletedOne.length - 1].rotationRate);\n    }\n\n    if (lastRotation.type === rotationType.normal && rotationsDeletedOne.length > 0) {\n      const rotationNumberDiffShouldSub =\n        rotations[rotations.length - 1].rotationNumber - rotationsDeletedOne[rotationsDeletedOne.length - 1].rotationNumber;\n      setTotalRotationNumber(totalRotationNumber - rotationNumberDiffShouldSub);\n    }\n\n    setRotations(rotationsDeletedOne);\n  }\n\n  function rotation() {\n    if (_isResetStarted() === false) {\n      alert(`ãªã»ããã¹ã¿ã¼ãããã¾ããã`);\n      return;\n    }\n\n    const investmentCntNow = investmentCnt + 1;\n    setInvestmentCnt(investmentCntNow);\n    const magnificationForExchangeRate = exchangeRate / EXCHANGE_RATE_BASE;\n\n    const rotationNumberLast = rotations[rotations.length - 1].rotationNumber;\n\n    let rotationNumberInputedClone = rotationNumberInputed;\n\n    // å¥åãããåè»¢æ°ã3æ¡æªæºã®å ´åãã¤ååã®åè»¢æ°ã3æ¡ã®ã¨ã\n    if (rotationNumberInputedClone.length < 3 && String(rotations[rotations.length - 1].rotationNumber).length === 3) {\n      // ååã®åè»¢æ°ãç¾ã®ä½ã®æ°ã¨ããä»¥å¤ã«åãã\n      const numberOfHundreds = String(rotations[rotations.length - 1].rotationNumber).slice(0, 1);\n      const lastTwoDigits = String(rotations[rotations.length - 1].rotationNumber).slice(1, 3);\n      // ä¸2æ¡ãããåè»¢æ°ãå¤§ãããã°ãç¾ã®ä½ã®æ°+åè»¢æ°ã¨ãããã®ãåè»¢æ°ã¨ããã\n      if (Number(rotationNumberInputedClone) > Number(lastTwoDigits)) {\n        rotationNumberInputedClone = numberOfHundreds + getdoubleDigestNumber({number: rotationNumberInputedClone});\n      } else {\n        rotationNumberInputedClone = String(Number(numberOfHundreds) + 1) + getdoubleDigestNumber({number: rotationNumberInputedClone});\n      }\n    }\n\n    const rotationNumberDiffFromLast = Number(rotationNumberInputedClone) - rotationNumberLast;\n    const rotationRateMostRecent = (rotationNumberDiffFromLast * ratioOfReplenishmentAmountToThousandYen * magnificationForExchangeRate).toFixed(1);\n\n    const totalRotationNumberNow = totalRotationNumber + rotationNumberDiffFromLast;\n    setTotalRotationNumber(totalRotationNumberNow);\n\n    const ratioOfTotalInvestmentAmountToThousandYen = 1000 / (replenishmentAmount * investmentCntNow);\n    const rotationRateNow = (totalRotationNumberNow * ratioOfTotalInvestmentAmountToThousandYen * magnificationForExchangeRate).toFixed(1);\n\n    setRotationRate(rotationRateNow);\n\n    setRotations(\n      rotations.concat({\n        type: rotationType.normal,\n        rotationRateMostRecent,\n        rotationRate: rotationRateNow,\n        rotationNumber: Number(rotationNumberInputedClone),\n      })\n    );\n    clearRotationNumberInputed();\n  }\n\n  function continueStart() {\n    if (rotationNumberInputed === \"\") {\n      alert(`åè»¢æ°ãå¥åãã¾ããã`);\n      return;\n    }\n\n    setRotations(\n      rotations.concat({\n        type: rotationType.continueStart,\n        rotationRate,\n        rotationNumber: Number(rotationNumberInputed),\n      })\n    );\n\n    clearRotationNumberInputed();\n  }\n\n  function getRotationsTextForCopyToClickboard() {\n    const dateNowFormated = format(new Date(), \"yyyy/MM/dd HH:mm\");\n    const text = `${dateNowFormated}\nåè»¢çï¼${rotationRate}, ä»äºéï¼${rotationUnitPrice}åÃ${totalRotationNumber}å(${_getWorkAmount()}å)`;\n    return text;\n  }\n\n  function setClipboard() {\n    const text = getRotationsTextForCopyToClickboard();\n    navigator.clipboard.writeText(text).then(\n      function () {\n        console.log(\"ã¯ãªãããã¼ãæ¸ãè¾¼ã¿æå\");\n      },\n      function () {\n        console.log(\"ã¯ãªãããã¼ãæ¸ãè¾¼ã¿æå\");\n      }\n    );\n  }\n\n  function resetStart() {\n    if (isResetStarted()) {\n      alert(\"æ¢ã«ãªã»ããã¹ã¿ã¼ãããã¦ãã¾ã\");\n      return;\n    }\n    if (rotationNumberInputed === \"\") {\n      alert(`åè»¢æ°ãå¥åãã¾ããã`);\n      return;\n    }\n    setRotations(\n      rotations.concat({\n        type: rotationType.resetStart,\n        rotationRate: 0,\n        rotationNumber: rotationNumberInputed,\n      })\n    );\n\n    clearRotationNumberInputed();\n  }\n\n  return (\n    <div className=\"App\">\n      <Container className=\"pt-3\">\n        <Row>\n          <Col>\n            <p className=\"mb-0\">\n              åè»¢åä¾¡ï¼<span>{rotationUnitPrice}</span>\n            </p>\n            <p className=\"mb-0\">\n              ç·åè»¢æ°ï¼<span>{totalRotationNumber}</span>\n            </p>\n            <p className=\"mb-0\">\n              ä»äºéï¼<span>{_getWorkAmount()}</span>\n            </p>\n\n            <Row>\n              <Button className=\"mr-1 mb-1\" variant=\"primary\" onClick={() => setClipboard()}>\n                ã³ãã¼\n              </Button>\n              <Button className=\"mb-1\" variant=\"primary\" onClick={() => deleteOneRotation()}>\n                1è¡åé¤\n              </Button>\n            </Row>\n\n            <FormControl\n              className=\"mb-1\"\n              id=\"rotationNumberInput\"\n              value={rotationNumberInputed}\n              onChange={changeRotationNumberInputed}\n              placeholder=\"åè»¢æ°å¥å\"\n            />\n\n            <Row className=\"m-0 mb-2\">\n              {$numberButtons}\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => clearRotationNumberInputed()}>\n                C\n              </Button>\n              <Button variant=\"primary\" className=\"col-4\"></Button>\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => rotation()}>\n                åè»¢\n              </Button>\n              <ShrinkNameButton variant=\"primary\" className=\"col-4\" onClick={() => continueStart()}>\n                ç¶ç¶ã¹ã¿ã¼ã\n              </ShrinkNameButton>\n              <ShrinkNameButton id=\"resetStartButton\" variant=\"primary\" className=\"col-4\" onClick={() => resetStart()}>\n                ãªã»ããã¹ã¿ã¼ã\n              </ShrinkNameButton>\n            </Row>\n\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>ãã¼ãã¼</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={border} onChange={changeBorder} />\n              </InputGroup>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>äº¤æç</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={exchangeRate} onChange={changeExchangeRate} />\n              </InputGroup>\n            </Row>\n          </Col>\n          <Col>\n            <ListGroup className=\"rotationList\" ref={rotationListRef}>\n              {$rotations}\n            </ListGroup>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}