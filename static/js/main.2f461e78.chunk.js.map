{"version":3,"sources":["consts/main.tsx","App.tsx","index.tsx"],"names":["ROTATION_MODE","ERROR_MSG","axios","require","default","ShrinkNameButton","styled","Button","App","useState","rotationNumberInputed","setRotationNumberInputed","rotations","setRotations","rotationRate","setRotationRate","investmentCnt","setInvestmentCnt","rotationNumberTotal","setRotationNumberTotal","border","setBorder","storeNames","setStoreNames","storeName","setStoreName","machineName","setMachineName","ballNumberComfirm","setBallNumberComfirm","remarks","setRemarks","Map","storeNamesExchangeRatesMap","setStoreNamesExchangeRatesMap","exchangeRate","setExchangeRate","rotationListRef","useRef","selectStoreRef","document","createElement","useEffect","storeNamesInit","set","initStoreNamesExchangeRates","investmentCntLocal","localStorage","getItem","rotationsParsed","JSON","parse","storeNameLocal","machineNameLocal","ballNumberComfirmLocal","borderLocal","remarksLocal","Number","length","calcRotationRate","totalRotationNumberCalculatted","forEach","rotation","idx","type","rotationNumber","calcRotationNumberTotal","current","scrollTop","scrollHeight","setItem","stringify","storeExchangeRate","get","rotationUnitPrice","useMemo","toFixed","isResetStarted","clearRotationNumberInputed","getWorkAmount","getBallNumberOnePush","copyWorkRecord","navigator","clipboard","writeText","now","Date","dateFormattedStart","format","timeFormattedStart","timeFormattedNow","join","getWorkRecordForSpreadSheet","getRotationNumberByShortInputIfNeeded","rotationNumberInputedClone","String","convertToThreeDigits","slice","$storeNames","$doms","value","disabled","hidden","map","store","$numberButtons","number","variant","className","onClick","$rotations","index","content","rotationRateMostRecent","ListGroup","Item","Container","Row","Col","rotationsLength","lastRotation","rotationsDeleted","filter","rotationNumberDiffShouldSub","deleteOneRotation","FormControl","id","onChange","event","target","placeholder","investmentCntNow","rotationNumberDiffFromLast","exchangeRateRatio","rotationNumberTotalNow","rotationRateNow","concat","error","alert","continueStart","resetStart","InputGroup","size","Prepend","Text","Form","Control","as","ref","rows","remarksInputed","params","URLSearchParams","append","post","then","response","catch","writeWorkRecordToSpreadsheet","window","confirm","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2f461e78.chunk.js","sourcesContent":["// TITLES\nexport const SELECT_STORE_TITLE: string = \"店名を選択して下さい。\";\n// 通常の交換率\nexport const EXCHANGE_RATE_NORMAL: number = 4;\n// ワンプッシュ当たりの金額\nexport const AMOUNT_ONE_PUSH = 500;\n// スプレッドシートREST_URL\nexport const REST_URL_SPREADSHEET = \"https://script.google.com/macros/s/AKfycbwAEFQ6VWnrJ67EjQiYd8WeEv0D2ogBpV2GYDgxucx9C5gf1Dmd/exec\";\nexport const REPLENISHMENT_AMOUNT = 500;\n// 直近の回転率計算に用いる。\nexport const REPLENISHMENT_AMOUNT_RATIO = 1000 / REPLENISHMENT_AMOUNT;\n\nexport const ROTATION_MODE = {\n  normal: \"normal\",\n  continueStart: \"continueStart\",\n  resetStart: \"resetStart\",\n};\n\nexport const ERROR_MSG = {\n  resetStart: \"リセットスタートをしましょう\",\n  resetStartedAlready: \"既にリセットスタートされています\",\n  rotaionNumberEmpty: \"回転数を入力しましょう\",\n  selectStore: \"店名を選択して下さい。\",\n};\n","import React, { useState, useRef, useEffect, useMemo } from \"react\";\nimport styled from \"styled-components\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, FormControl, Form, Button, ListGroup, InputGroup } from \"react-bootstrap\";\nimport { format } from \"date-fns\";\n// 型定義インポート\nimport { RotationType } from \"./types/rotation\";\n// 定数定義インポート\nimport {\n  SELECT_STORE_TITLE,\n  EXCHANGE_RATE_NORMAL,\n  AMOUNT_ONE_PUSH,\n  REST_URL_SPREADSHEET,\n  REPLENISHMENT_AMOUNT,\n  REPLENISHMENT_AMOUNT_RATIO,\n  ROTATION_MODE,\n  ERROR_MSG,\n} from \"./consts/main\";\n\nconst axios = require(\"axios\").default;\n\nconst ShrinkNameButton = styled(Button)`\n  font-size: 0.4rem;\n`;\n\nfunction App() {\n  // useState定義\n  const [rotationNumberInputed, setRotationNumberInputed] = useState<string>(\"\");\n  const [rotations, setRotations] = useState<RotationType[]>([]);\n  const [rotationRate, setRotationRate] = useState(0);\n  const [investmentCnt, setInvestmentCnt] = useState(0);\n  const [rotationNumberTotal, setRotationNumberTotal] = useState(0);\n  const [border, setBorder] = useState<string>(\"18.0\");\n  const [storeNames, setStoreNames] = useState<string[]>([]);\n  const [storeName, setStoreName] = useState(\"\");\n  const [machineName, setMachineName] = useState(\"\");\n  const [ballNumberComfirm, setBallNumberComfirm] = useState(\"\");\n  const [remarks, setRemarks] = useState(\"\");\n  const [storeNamesExchangeRatesMap, setStoreNamesExchangeRatesMap] = useState(new Map());\n  const [exchangeRate, setExchangeRate] = useState<string>(\"\");\n  // useRef定義\n  const rotationListRef = useRef<HTMLDivElement>(null);\n  const selectStoreRef = useRef<HTMLSelectElement>(document.createElement(\"select\"));\n\n  // 初期値として、「店名と交換率」をそれぞれ設定する。\n  const initStoreNamesExchangeRates = () => {\n    const storeNamesInit = [\"DoruNakano\", \"LiNakano\", \"NtNakano\"];\n    setStoreNames(storeNamesInit);\n    setStoreNamesExchangeRatesMap(storeNamesExchangeRatesMap.set(storeNamesInit[0], 4.38));\n    setStoreNamesExchangeRatesMap(storeNamesExchangeRatesMap.set(storeNamesInit[1], 4));\n    setStoreNamesExchangeRatesMap(storeNamesExchangeRatesMap.set(storeNamesInit[2], 4));\n  };\n\n  // 初回描画時に実行\n  useEffect(() => {\n    // 初期値として、それぞれの「店名と交換率」を設定する。\n    initStoreNamesExchangeRates();\n\n    // ローカルストレージから各値を取得。\n    const investmentCntLocal: string = localStorage.getItem(\"investmentCnt\") || \"0\";\n    const rotationsParsed: RotationType[] = JSON.parse(localStorage.getItem(\"rotations\") || \"[]\");\n    const storeNameLocal: string = localStorage.getItem(\"storeName\") || \"\";\n    const machineNameLocal: string = localStorage.getItem(\"machineName\") || \"\";\n    const ballNumberComfirmLocal: string = localStorage.getItem(\"ballNumberComfirm\") || \"\";\n    const borderLocal: string = localStorage.getItem(\"border\") || \"\";\n    const remarksLocal: string = localStorage.getItem(\"remarks\") || \"\";\n\n    setInvestmentCnt(Number(investmentCntLocal));\n    setStoreName(storeNameLocal);\n    setRotations(rotationsParsed);\n    setMachineName(machineNameLocal);\n    setBallNumberComfirm(ballNumberComfirmLocal);\n    setBorder(borderLocal);\n    setRemarks(remarksLocal);\n    setRotationRate(calcRotationRate(rotationsParsed));\n    setRotationNumberTotal(calcRotationNumberTotal(rotationsParsed));\n  }, []);\n\n  useEffect(() => {\n    (rotationListRef as any).current.scrollTop = (rotationListRef as any).current.scrollHeight;\n    localStorage.setItem(\"rotations\", JSON.stringify(rotations));\n  }, [rotations]);\n\n  useEffect(() => {\n    localStorage.setItem(\"investmentCnt\", \"\" + investmentCnt);\n  }, [investmentCnt]);\n\n  useEffect(() => {\n    localStorage.setItem(\"border\", border);\n  }, [border]);\n\n  useEffect(() => {\n    localStorage.setItem(\"ballNumberComfirm\", ballNumberComfirm);\n  }, [ballNumberComfirm]);\n\n  useEffect(() => {\n    localStorage.setItem(\"remarks\", remarks);\n  }, [remarks]);\n\n  useEffect(() => {\n    // 選択肢の店名が変更されたら、対応した交換率へ変更する。\n    const storeExchangeRate = storeNamesExchangeRatesMap.get(storeName);\n    setExchangeRate(storeExchangeRate);\n\n    localStorage.setItem(\"storeName\", storeName);\n  }, [storeName]);\n\n  // ■useMemo系\n  // 「回転単価」が「ボーダーまたは回転率」に対する「導出項目」のため。\n  const rotationUnitPrice = useMemo<number>(() => {\n    if (rotationRate === 0) return 0;\n    return Number((1000 / Number(border) - 1000 / rotationRate).toFixed(1));\n  }, [border, rotationRate]);\n\n  // ■change系\n  function changeStoreNamesSelect(event: React.ChangeEvent<HTMLInputElement>) {\n    setStoreName(event.target.value);\n  }\n\n  function changeBorder(event: React.ChangeEvent<HTMLInputElement>) {\n    setBorder(event.target.value);\n  }\n\n  // 機種名の変更\n  function changeMachineName(event: React.ChangeEvent<HTMLInputElement>) {\n    const machineName = event.target.value;\n    setMachineName(machineName);\n    localStorage.setItem(\"machineName\", machineName);\n  }\n\n  // 備考の変更\n  function changeRemarks(event: React.ChangeEvent<HTMLInputElement>) {\n    const remarksInputed = event.target.value;\n    setRemarks(remarksInputed);\n  }\n\n  // 回転数入力ミス防止用玉数の変更\n  function changeBallNumberComfirm(event: React.ChangeEvent<HTMLInputElement>) {\n    const ballNumberComfirm = event.target.value;\n    setBallNumberComfirm(ballNumberComfirm);\n  }\n\n  function changeRotationNumberInputed(event: React.ChangeEvent<HTMLInputElement>) {\n    setRotationNumberInputed(event.target.value);\n  }\n\n  // ■通常関数定義\n  function isResetStarted() {\n    return rotations.length > 0 && rotations[0].type === ROTATION_MODE.resetStart;\n  }\n\n  function clearRotationNumberInputed() {\n    setRotationNumberInputed(\"\");\n  }\n\n  function getWorkAmount() {\n    return (rotationUnitPrice * rotationNumberTotal).toFixed(0);\n  }\n\n  // 一回の貸出ボタン玉数\n  function getBallNumberOnePush(storeName: string): number {\n    const storeExchangeRate: number = storeNamesExchangeRatesMap.get(storeName);\n    return Number((AMOUNT_ONE_PUSH / storeExchangeRate).toFixed());\n  }\n\n  //　回転配列を1行削除する。\n  function deleteOneRotation() {\n    const rotationsLength = rotations.length;\n\n    if (rotationsLength === 0) return;\n\n    // 投資回数の調整\n    const lastRotation = rotations[rotations.length - 1];\n    if (lastRotation.type === ROTATION_MODE.normal) {\n      setInvestmentCnt(investmentCnt - 1);\n    }\n\n    const rotationsDeleted = rotations.filter((rotation, index) => {\n      return index !== rotationsLength - 1;\n    });\n\n    // 回転率の更新\n    // 長さが1の時、必ずリセットスタートなので、回転率は0に設定してあります。\n    if (rotationsDeleted.length === 1 || rotationsDeleted.length === 0) {\n      setRotationRate(0);\n    } else {\n      setRotationRate(rotationsDeleted[rotationsDeleted.length - 1].rotationRate);\n    }\n\n    // 総回転数の更新\n    if (lastRotation.type === ROTATION_MODE.normal && rotationsDeleted.length > 0) {\n      const rotationNumberDiffShouldSub =\n        rotations[rotations.length - 1].rotationNumber - rotationsDeleted[rotationsDeleted.length - 1].rotationNumber;\n      setRotationNumberTotal(rotationNumberTotal - rotationNumberDiffShouldSub);\n    }\n\n    setRotations(rotationsDeleted);\n\n    // 確認用玉数を計算\n    setBallNumberComfirm(String(Number(ballNumberComfirm) + getBallNumberOnePush(storeName)));\n  }\n\n  // 画面の初期読込時に使用\n  function calcRotationNumberTotal(rotations: RotationType[]) {\n    let totalRotationNumberCalculatted = 0;\n    rotations.forEach((rotation, idx) => {\n      if (rotation.type === ROTATION_MODE.resetStart || rotation.type === ROTATION_MODE.continueStart) return;\n      totalRotationNumberCalculatted += rotation.rotationNumber - rotations[idx - 1].rotationNumber;\n    });\n    return totalRotationNumberCalculatted;\n  }\n\n  // 画面の初期読込時に使用\n  function calcRotationRate(rotations: RotationType[]) {\n    if (rotations.length === 0) return 0;\n    return rotations[rotations.length - 1].rotationRate;\n  }\n\n  function deleteAllRotation() {\n    if (window.confirm(\"全行削除してもいいですか？\")) {\n      setRotations([]);\n      setRotationRate(0);\n      setInvestmentCnt(0);\n      setRotationNumberTotal(0);\n    }\n  }\n\n  // スプレッドシートへ稼働記録を書き込む\n  function writeWorkRecordToSpreadsheet(): void {\n    const now = new Date();\n    const dateFormattedStart = format(now, \"yyyy/MM/dd\");\n    const timeFormattedStart = localStorage.getItem(\"startTime\");\n    const timeFormattedNow = format(now, \"HH:mm\");\n\n    const params = new URLSearchParams();\n    params.append(\"date\", `${dateFormattedStart} ${timeFormattedStart}〜${timeFormattedNow}`);\n    params.append(\"border\", `ボーダー：${border}`);\n    params.append(\"rotationRate\", `回転率：${rotationRate}`);\n    params.append(\"rotationUnitPrice\", `回転単価：${rotationUnitPrice}`);\n    params.append(\"rotationNumberTotal\", `総回転数：${rotationNumberTotal}`);\n    params.append(\"workAmount\", `${getWorkAmount()}`);\n    params.append(\"machineName\", `${machineName}`);\n    params.append(\"storeName\", `${storeName}`);\n    params.append(\"remarks\", `${remarks}`);\n\n    axios\n      .post(REST_URL_SPREADSHEET, params)\n      .then(function (response: any) {\n        alert(\"書込が成功しました。\");\n      })\n      .catch(function (error: any) {\n        alert(error);\n      });\n  }\n\n  // スプレッドシートへのペースト用テキストを取得。\n  function getWorkRecordForSpreadSheet(): string {\n    const now = new Date();\n    const dateFormattedStart = format(now, \"yyyy/MM/dd\");\n    const timeFormattedStart = localStorage.getItem(\"startTime\");\n    const timeFormattedNow = format(now, \"HH:mm\");\n\n    const delimiter = \"\t\";\n    // 下記でも動くようであれば、後々こちらに変更する。\n    // const delimiter = \"\\t\";\n\n    return [\n      `${dateFormattedStart} ${timeFormattedStart}〜${timeFormattedNow}`,\n      `ボーダー：${border}`,\n      `回転率：${rotationRate}`,\n      `回転単価：${rotationUnitPrice}`,\n      `総回転数：${rotationNumberTotal}`,\n      `${getWorkAmount()}`,\n      `${machineName}`,\n      `${storeName}`,\n      `${remarks}`,\n    ].join(delimiter);\n  }\n\n  // 稼働記録をコピー\n  function copyWorkRecord() {\n    navigator.clipboard.writeText(getWorkRecordForSpreadSheet());\n  }\n\n  // 回転数の短縮入力の判別\n  function shouldShortInput() {\n    return String(rotationNumberInputed).length < 3 && String(rotations[rotations.length - 1].rotationNumber).length > 1;\n  }\n\n  // 回転数の短縮入力：ひとまず回転数が3桁以下の場合のみ対応\n  function getRotationNumberByShortInputIfNeeded(): number {\n    let rotationNumberInputedClone: number = Number(rotationNumberInputed);\n    if (shouldShortInput()) {\n      const convertToThreeDigits: string = (\"000\" + rotations[rotations.length - 1].rotationNumber).slice(-3);\n      const lastTwoDigits: number = Number(String(rotations[rotations.length - 1].rotationNumber).slice(1, 3));\n      const baseNumberOfHundreds: number =\n        rotationNumberInputedClone > lastTwoDigits ? Number(convertToThreeDigits[0]) : Number(convertToThreeDigits[0]) + 1;\n\n      const baseNumber: number = baseNumberOfHundreds * 100;\n      rotationNumberInputedClone += baseNumber;\n    }\n\n    return rotationNumberInputedClone;\n  }\n\n  // 通常回転（回転ボタン押下時の処理）\n  function rotation() {\n    try {\n      if (isResetStarted() === false) {\n        throw ERROR_MSG.resetStart;\n      }\n\n      // 投資回数の計算\n      const investmentCntNow = investmentCnt + 1;\n      // 必要であれば短縮入力を効かせる。\n      const rotationNumberInputedClone = getRotationNumberByShortInputIfNeeded();\n      const rotationNumberDiffFromLast = Number(rotationNumberInputedClone) - rotations[rotations.length - 1].rotationNumber;\n      //　交換率の比：通常交換率'4'と実交換率の比。回転率計算に用いる。\n      const exchangeRateRatio: number = Number(exchangeRate) / EXCHANGE_RATE_NORMAL;\n      const rotationRateMostRecent = Number((rotationNumberDiffFromLast * REPLENISHMENT_AMOUNT_RATIO * exchangeRateRatio).toFixed(1));\n\n      const rotationNumberTotalNow = rotationNumberTotal + rotationNumberDiffFromLast;\n\n      // 投資金額の比（todo:もう少し分かりやすく出来るかも？）\n      const investmentAmountRatio = 1000 / (REPLENISHMENT_AMOUNT * investmentCntNow);\n      const rotationRateNow = Number((rotationNumberTotalNow * investmentAmountRatio * exchangeRateRatio).toFixed(1));\n\n      clearRotationNumberInputed();\n\n      // 各種set\n      setInvestmentCnt(investmentCntNow);\n      setRotationNumberTotal(rotationNumberTotalNow);\n      setRotationRate(rotationRateNow);\n      setRotations(\n        rotations.concat({\n          type: ROTATION_MODE.normal,\n          rotationNumber: Number(rotationNumberInputedClone),\n          rotationRateMostRecent,\n          rotationRate: rotationRateNow,\n        })\n      );\n      // 確認用玉数を計算\n      setBallNumberComfirm(String(Number(ballNumberComfirm) - getBallNumberOnePush(storeName)));\n    } catch (error) {\n      alert(error);\n    }\n  }\n\n  // 継続スタート\n  function continueStart() {\n    try {\n      if (rotationNumberInputed === \"\") {\n        throw ERROR_MSG.rotaionNumberEmpty;\n      }\n\n      setRotations(\n        rotations.concat({\n          type: ROTATION_MODE.continueStart,\n          rotationNumber: Number(rotationNumberInputed),\n          rotationRateMostRecent: 0,\n          rotationRate,\n        })\n      );\n\n      clearRotationNumberInputed();\n    } catch (error) {\n      alert(error);\n    }\n  }\n\n  // リセットスタート\n  function resetStart() {\n    try {\n      if (isResetStarted()) {\n        throw ERROR_MSG.resetStartedAlready;\n      }\n      if (rotationNumberInputed === \"\") {\n        throw ERROR_MSG.rotaionNumberEmpty;\n      }\n      if (selectStoreRef.current.value === \"\") {\n        throw ERROR_MSG.selectStore;\n      }\n\n      setRotations(\n        rotations.concat({\n          type: ROTATION_MODE.resetStart,\n          rotationNumber: Number(rotationNumberInputed),\n          rotationRateMostRecent: 0,\n          rotationRate: 0,\n        })\n      );\n\n      clearRotationNumberInputed();\n\n      localStorage.setItem(\"startTime\", format(new Date(), \"HH:mm\"));\n    } catch (error) {\n      alert(error);\n    }\n  }\n\n  // DOMの定義\n\n  // 店名の選択肢\n  const $storeNames = (() => {\n    const $doms = [\n      <option key={\"defaultValue\"} value=\"\" disabled hidden>\n        {SELECT_STORE_TITLE}\n      </option>,\n    ];\n    const $storeNames = storeNames.map((store) => {\n      return (\n        <option key={store} value={store}>\n          {store}\n        </option>\n      );\n    });\n\n    const $domsConcated = [$doms, ...$storeNames];\n    return $domsConcated;\n  })();\n\n  const $numberButtons = [\"7\", \"8\", \"9\", \"4\", \"5\", \"6\", \"1\", \"2\", \"3\", \"0\"].map((number) => (\n    <Button key={number} variant=\"primary\" className=\"col-4\" onClick={() => setRotationNumberInputed(rotationNumberInputed + number)}>\n      {number}\n    </Button>\n  ));\n\n  const $rotations = rotations.map((rotation, index) => {\n    let content = \"\";\n    if (rotation.type === ROTATION_MODE.resetStart) {\n      content = `${rotation.rotationNumber} --start--`;\n    } else if (rotation.type === ROTATION_MODE.continueStart) {\n      content = `${rotation.rotationNumber} > start`;\n    } else if (rotation.type === ROTATION_MODE.normal) {\n      content = `${rotation.rotationNumber} ${rotation.rotationRateMostRecent} ${rotation.rotationRate}`;\n    }\n    return <ListGroup.Item key={index}>{content}</ListGroup.Item>;\n  });\n\n  return (\n    <div className=\"App\">\n      <Container className=\"pt-3\">\n        <Row>\n          <Col>\n            <p className=\"mb-0\">\n              回転単価：<span>{rotationUnitPrice}</span>\n            </p>\n            <p className=\"mb-0\">\n              総回転数：<span>{rotationNumberTotal}</span>\n            </p>\n            <p className=\"mb-0\">\n              仕事量：<span>{getWorkAmount()}</span>\n            </p>\n\n            <Row>\n              <Button className=\"mr-1 mb-1\" variant=\"primary\" onClick={() => copyWorkRecord()}>\n                コピー\n              </Button>\n              <Button className=\"mb-1\" variant=\"primary\" onClick={() => deleteOneRotation()}>\n                1行削除\n              </Button>\n            </Row>\n\n            <FormControl\n              className=\"mb-1\"\n              id=\"rotationNumberInput\"\n              value={rotationNumberInputed}\n              onChange={changeRotationNumberInputed}\n              placeholder=\"回転数入力\"\n            />\n\n            <Row className=\"m-0 mb-2\">\n              {$numberButtons}\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => clearRotationNumberInputed()}>\n                C\n              </Button>\n              <Button variant=\"primary\" className=\"col-4\"></Button>\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => rotation()}>\n                回転\n              </Button>\n              <ShrinkNameButton variant=\"primary\" className=\"col-4\" onClick={() => continueStart()}>\n                継続スタート\n              </ShrinkNameButton>\n              <ShrinkNameButton id=\"resetStartButton\" variant=\"primary\" className=\"col-4\" onClick={() => resetStart()}>\n                リセットスタート\n              </ShrinkNameButton>\n            </Row>\n\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>確認用玉数</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={ballNumberComfirm} onChange={changeBallNumberComfirm} type=\"number\" />\n              </InputGroup>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>ボーダー</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={border} onChange={changeBorder} />\n              </InputGroup>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>店名</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control as=\"select\" value={storeName} onChange={changeStoreNamesSelect} ref={selectStoreRef}>\n                  {$storeNames}\n                </Form.Control>\n              </InputGroup>\n            </Row>\n            <Row>\n              <div className=\"mr-2\">交換率:</div>\n              <div>{exchangeRate}</div>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>機種名</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={machineName} onChange={changeMachineName} />\n              </InputGroup>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>備考</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control as=\"textarea\" rows={2} value={remarks} onChange={changeRemarks} />\n              </InputGroup>\n            </Row>\n            <Row>\n              <Button className=\"mt-5\" variant=\"primary\" onClick={() => writeWorkRecordToSpreadsheet()}>\n                シート書込\n              </Button>\n            </Row>\n\n            <Row>\n              <Button className=\"allDeteleBtn\" variant=\"primary\" onClick={() => deleteAllRotation()}>\n                全行削除\n              </Button>\n            </Row>\n          </Col>\n          <Col>\n            <ListGroup className=\"rotationList\" ref={rotationListRef}>\n              {$rotations}\n            </ListGroup>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}