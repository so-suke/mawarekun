{"version":3,"sources":["cssModules/App.module.css","cssModules/NumberButtons.module.css","constants/index.tsx","utils/index.tsx","styledComponents/ShrinkNameButton.tsx","components/ContinueStartButton.tsx","components/ResetStartButton.tsx","components/NumberButtons.tsx","components/Rotations.tsx","components/StoreNames.tsx","App.tsx","index.tsx"],"names":["module","exports","STORE_NAMES","STORE_NAMES_EXCHANGE_RATES_MAP","Map","STORE_NAME_BALL_NUMBER_LENT","ROTATION_MODE","ERROR_MSG","last","array","length","sleep","ms","Promise","resolve","setTimeout","ShrinkNameButton","styled","Button","ContinueStartButton","props","variant","className","onClick","rotationNumberInputed","setIsCorrectBallNumberConfirm","setRotations","rotations","concat","type","rotationNumber","Number","rotationRateMostRecent","rotationRate","clearRotationNumberInputed","error","alert","continueStart","ResetStartButton","id","isResetStarted","selectStoreRef","current","value","localStorage","setItem","format","Date","resetStart","NumberButtons","map","number","styles","font_button","setRotationNumberInputed","Rotations","rotation","index","content","ListGroup","Item","StoreNames","$doms","disabled","hidden","$storeNames","storeNames","store","$domsConcated","axios","require","default","App","useState","pageIndex","setPageIndex","setRotationRate","investmentCnt","setInvestmentCnt","rotationNumberTotal","setRotationNumberTotal","border","setBorder","storeName","setStoreName","machineName","setMachineName","ballNumberConfirm","setBallNumberConfirm","ballNumberAutoRotation","setBallNumberAutoRotation","rotationNumberAutoRotation","setRotationNumberAutoRotation","remarks","setRemarks","exchangeRate","setExchangeRate","isCorrectBallNumberConfirm","ballNumberBigHitBefore","setBallNumberBigHitBefore","ballNumberBigHitAfter","setBallNumberBigHitAfter","roundBase","setRoundBase","roundRecord","setRoundRecord","wonBallNumberRecord","setWonBallNumberRecord","roundTotal","setRoundTotal","wonBallNumberTotal","setWonBallNumberTotal","rotationListRef","useRef","document","createElement","rotationButtonRef","setItemLocalStorage","useCallback","keyName","setted","getItemLocalStorage","init","getItem","useEffect","pageIndexLocal","investmentCntLocal","rotationsParsed","JSON","parse","storeNameLocal","machineNameLocal","ballNumberConfirmLocal","borderLocal","remarksLocal","ballNumberBigHitBeforeLocal","ballNumberBigHitAfterLocal","roundBaseLocal","roundRecordLocal","wonBallNumberRecordLocal","calcRotationRate","totalRotationNumberCalculatted","forEach","idx","calcRotationNumberTotal","sumRoundBaseRecords","record","split","reduce","prev","curr","recordsTotal","toFixed","scrollTop","scrollHeight","stringify","storeExchangeRate","get","String","rotationUnitPrice","useMemo","getWorkAmount","getBallNumberLent","hasOwnProperty","Error","deleteAllRotation","window","confirm","a","diffBallNumber","clickRotation","then","click","countInvestment","diffRotationNumber","isInteger","countInvestmentDecimal","parseInt","rotationNumberExtra","Math","round","rotationNumberPerInvestment","floor","investmentCntNow","rotationNumberInputedClone","rotationNumberLast","before","numberBeMovedUpIfNeed","slice","beCompared","isMoveUp","createBefore","after","getRotationNumberShortInputed","rotationNumberDiffFromLast","exchangeRateRatio","rotationNumberTotalNow","rotationRateNow","Container","bg_warning","Row","Col","data-testid","rotationsLength","rotationsDeleted","filter","rotationNumberDiffShouldSub","deleteOneRotation","FormControl","onChange","event","target","placeholder","ref","InputGroup","size","Prepend","Text","input","wonBallNumberCalculated","autoCalculateWonBallNumber","as","rows","inputMode","Append","autoRotation","Form","Control","remarksInputed","now","date","timeStart","timeEnd","params","URLSearchParams","append","post","response","catch","writeWorkResultAndDeleteAllRotation","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.68990b8f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bg_warning\":\"App_bg_warning__2uihL\",\"font_button\":\"App_font_button__uusV8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"font_button\":\"NumberButtons_font_button__1NMiq\"};","import { TypeErrorMsg } from \"../types\";\n\n// 店名に関するもの\nexport const STORE_NAMES = [\"DoruNakano\", \"LiNakano\", \"NtNakano\"];\nexport const STORE_NAMES_EXCHANGE_RATES_MAP = new Map([\n  [STORE_NAMES[0], 4.38],\n  [STORE_NAMES[1], 4],\n  [STORE_NAMES[2], 4],\n]);\nexport const STORE_NAME_BALL_NUMBER_LENT = {\n  [STORE_NAMES[0]]: 114,\n  [STORE_NAMES[1]]: 125,\n  [STORE_NAMES[2]]: 125,\n};\n// 選択肢：店名の初期タイトル\nexport const SELECT_STORE_TITLE: string = \"店名を選択して下さい。\";\n// 通常の交換率\nexport const EXCHANGE_RATE_NORMAL: number = 4;\n// ワンプッシュ辺りの金額\nexport const AMOUNT_ONE_PUSH = 500;\n// スプレッドシートREST_URL\nexport const REST_URL_SPREADSHEET = \"https://script.google.com/macros/s/AKfycbw-ALS3LfFEJasC1FZlKlGUYzm7_cebhvdsASVzf6ZjDM2dttct9hwsHg/exec\";\nexport const REPLENISHMENT_AMOUNT = 500;\n// 直近の回転率計算に用いる。\nexport const REPLENISHMENT_AMOUNT_RATIO = 1000 / REPLENISHMENT_AMOUNT;\n\nexport const ROTATION_MODE: { [key: string]: string } = {\n  normal: \"normal\",\n  continueStart: \"continueStart\",\n  resetStart: \"resetStart\",\n};\n\n// エラーメッセージ\nexport const ERROR_MSG: TypeErrorMsg = {\n  resetStart: \"リセットスタートをしましょう\",\n  resetStartedAlready: \"既にリセットスタートされています\",\n  rotaionNumberEmpty: \"回転数を入力しましょう\",\n  selectStore: \"店名を選択して下さい。\",\n  notExpectedStoreName: \"エラー可能性。存在しない店名が渡されました。\",\n  bigHitBallNumberBeforeBigThanAfter: \"エラー\\n大当たり玉数に関して\\n大当前より大当後の方が大きくなるようにしましょう\"\n};\n","export const last = (array: any[]) => {\n  return array[array.length - 1];\n};\n\nexport const sleep = (ms: number) => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n","import { Button } from \"react-bootstrap\";\nimport styled from \"styled-components\";\n\nexport const ShrinkNameButton = styled(Button)`\n  font-size: 0.4rem;\n`;\n","import React from \"react\";\nimport { ShrinkNameButton } from \"../styledComponents/ShrinkNameButton\";\nimport { TypeRotation } from \"../types\";\nimport { ERROR_MSG, ROTATION_MODE } from \"../constants\";\n\nexport function ContinueStartButton(props: {\n  rotationNumberInputed: string;\n  rotationRate: number;\n  rotations: TypeRotation[];\n  clearRotationNumberInputed: Function;\n  setRotations: Function;\n  setIsCorrectBallNumberConfirm: Function;\n}) {\n  // 継続スタート\n  const continueStart = () => {\n    try {\n      if (props.rotationNumberInputed === \"\") {\n        throw ERROR_MSG.rotaionNumberEmpty;\n      }\n\n      props.setIsCorrectBallNumberConfirm(false);\n\n      props.setRotations(\n        props.rotations.concat({\n          type: ROTATION_MODE.continueStart,\n          rotationNumber: Number(props.rotationNumberInputed),\n          rotationRateMostRecent: 0,\n          rotationRate: props.rotationRate,\n        })\n      );\n\n      props.clearRotationNumberInputed();\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  return (\n    <>\n      <ShrinkNameButton variant=\"primary\" className=\"col-4\" onClick={() => continueStart()}>\n        継続スタート\n      </ShrinkNameButton>{\" \"}\n    </>\n  );\n}\n","import React from \"react\";\nimport { format } from \"date-fns\";\nimport { ShrinkNameButton } from \"../styledComponents/ShrinkNameButton\";\nimport { TypeRotation } from \"../types\";\nimport { ERROR_MSG, ROTATION_MODE } from \"../constants\";\n\nexport function ResetStartButton(props: {\n  rotationNumberInputed: string;\n  rotations: TypeRotation[];\n  selectStoreRef: React.MutableRefObject<HTMLSelectElement>;\n  isResetStarted: Function;\n  clearRotationNumberInputed: Function;\n  setRotations: Function;\n}) {\n  const resetStart = () => {\n    try {\n      if (props.isResetStarted()) {\n        throw ERROR_MSG.resetStartedAlready;\n      }\n      if (props.rotationNumberInputed === \"\") {\n        throw ERROR_MSG.rotaionNumberEmpty;\n      }\n      if (props.selectStoreRef.current.value === \"\") {\n        throw ERROR_MSG.selectStore;\n      }\n\n      props.setRotations(\n        props.rotations.concat({\n          type: ROTATION_MODE.resetStart,\n          rotationNumber: Number(props.rotationNumberInputed),\n          rotationRateMostRecent: 0,\n          rotationRate: 0,\n        })\n      );\n\n      props.clearRotationNumberInputed();\n\n      localStorage.setItem(\"startTime\", format(new Date(), \"HH:mm\"));\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  return (\n    <>\n      <ShrinkNameButton id=\"resetStartButton\" variant=\"primary\" className=\"col-4\" onClick={() => resetStart()}>\n        リセットスタート\n      </ShrinkNameButton>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport styles from \"../cssModules/NumberButtons.module.css\";\n\nexport function NumberButtons(props: { setRotationNumberInputed: Function; rotationNumberInputed: string }) {\n  const numbers = [\"7\", \"8\", \"9\", \"4\", \"5\", \"6\", \"1\", \"2\", \"3\", \"0\"];\n\n  return (\n    <>\n      {numbers.map((number) => (\n        <Button\n          key={number}\n          className={`col-4 py-3 ${styles.font_button}`}\n          onClick={() => props.setRotationNumberInputed(props.rotationNumberInputed + number)}\n        >\n          {number}\n        </Button>\n      ))}\n    </>\n  );\n}\n","import React from \"react\";\nimport { TypeRotation } from \"../types\";\nimport { ROTATION_MODE } from \"../constants\";\nimport { ListGroup } from \"react-bootstrap\";\n\nexport function Rotations(props: { rotations: TypeRotation[] }) {\n  return (\n    <>\n      {props.rotations.map((rotation, index) => {\n        let content = \"\";\n        if (rotation.type === ROTATION_MODE.resetStart) {\n          content = `${rotation.rotationNumber} --start--`;\n        } else if (rotation.type === ROTATION_MODE.continueStart) {\n          content = `${rotation.rotationNumber} > start`;\n        } else if (rotation.type === ROTATION_MODE.normal) {\n          content = `${rotation.rotationNumber} ${rotation.rotationRateMostRecent} ${rotation.rotationRate}`;\n        }\n        return <ListGroup.Item key={index} className=\"py-1\">{content}</ListGroup.Item>;\n      })}\n    </>\n  );\n}\n","import React from \"react\";\nimport { TypeStoreName } from \"../types\";\nimport { SELECT_STORE_TITLE } from \"../constants\";\n\nexport function StoreNames(props: { storeNames: TypeStoreName[] }) {\n  const $doms = [\n    <option key={\"defaultValue\"} value=\"\" disabled hidden>\n      {SELECT_STORE_TITLE}\n    </option>,\n  ];\n  const $storeNames = props.storeNames.map((store: TypeStoreName) => {\n    return (\n      <option key={store} value={store}>\n        {store}\n      </option>\n    );\n  });\n\n  const $domsConcated = [$doms, ...$storeNames];\n\n  return <>{$domsConcated}</>;\n}\n","import React, { useState, useRef, useEffect, useMemo, useCallback } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, FormControl, Form, Button, ListGroup, InputGroup } from \"react-bootstrap\";\nimport { format } from \"date-fns\";\n// 型定義インポート\nimport { TypeRotation } from \"./types\";\n// 定数定義インポート\nimport {\n  STORE_NAMES,\n  STORE_NAMES_EXCHANGE_RATES_MAP,\n  STORE_NAME_BALL_NUMBER_LENT,\n  EXCHANGE_RATE_NORMAL,\n  REST_URL_SPREADSHEET,\n  REPLENISHMENT_AMOUNT,\n  REPLENISHMENT_AMOUNT_RATIO,\n  ROTATION_MODE,\n  ERROR_MSG,\n} from \"./constants\";\n// 便利系関数インポート\nimport { last, sleep } from \"./utils\";\n// 各コンポーネントをインポート\nimport { ContinueStartButton } from \"./components/ContinueStartButton\";\nimport { ResetStartButton } from \"./components/ResetStartButton\";\nimport { NumberButtons } from \"./components/NumberButtons\";\nimport { Rotations } from \"./components/Rotations\";\nimport { StoreNames } from \"./components/StoreNames\";\n// css modulesインポート\nimport styles from \"./cssModules/App.module.css\";\n\nconst axios = require(\"axios\").default;\n\nfunction App() {\n  // useState定義\n  const [pageIndex, setPageIndex] = useState(0);\n  const [rotationNumberInputed, setRotationNumberInputed] = useState<string>(\"\");\n  const [rotations, setRotations] = useState<TypeRotation[]>([]);\n  const [rotationRate, setRotationRate] = useState(0);\n  const [investmentCnt, setInvestmentCnt] = useState(0);\n  const [rotationNumberTotal, setRotationNumberTotal] = useState(0);\n  const [border, setBorder] = useState<string>(\"\");\n  const [storeName, setStoreName] = useState(\"\");\n  const [machineName, setMachineName] = useState(\"\");\n  const [ballNumberConfirm, setBallNumberConfirm] = useState(\"\");\n  const [ballNumberAutoRotation, setBallNumberAutoRotation] = useState(\"\");\n  const [rotationNumberAutoRotation, setRotationNumberAutoRotation] = useState(\"\");\n  const [remarks, setRemarks] = useState(\"\");\n  const [exchangeRate, setExchangeRate] = useState<string>(\"\");\n  const [isCorrectBallNumberConfirm, setIsCorrectBallNumberConfirm] = useState(true);\n  const [ballNumberBigHitBefore, setBallNumberBigHitBefore] = useState(0);\n  const [ballNumberBigHitAfter, setBallNumberBigHitAfter] = useState(0);\n  const [roundBase, setRoundBase] = useState(0);\n  const [roundRecord, setRoundRecord] = useState(\"\");\n  const [wonBallNumberRecord, setWonBallNumberRecord] = useState(\"\");\n  const [roundTotal, setRoundTotal] = useState(0);\n  const [wonBallNumberTotal, setWonBallNumberTotal] = useState(0);\n\n  // useRef定義\n  const rotationListRef = useRef<HTMLDivElement>(null);\n  const selectStoreRef = useRef<HTMLSelectElement>(document.createElement(\"select\"));\n  const rotationButtonRef = useRef<HTMLButtonElement>(document.createElement(\"button\"));\n\n  const setItemLocalStorage = useCallback(\n    (keyName: string, setted: string) => {\n      localStorage.setItem(`${keyName}_${pageIndex}`, setted);\n    },\n    [pageIndex]\n  );\n  const getItemLocalStorage = useCallback(\n    (keyName: string, init: string) => {\n      const result = localStorage.getItem(`${keyName}_${pageIndex}`) || init;\n      return result;\n    },\n    [pageIndex]\n  );\n\n  // 初回描画時に実行\n  useEffect(() => {\n    const pageIndexLocal: number = Number(localStorage.getItem(\"pageIndex\") || \"0\");\n    setPageIndex(pageIndexLocal);\n  }, []);\n\n  useEffect(() => {\n    // ローカルストレージから各値を取得。\n    const investmentCntLocal: string = getItemLocalStorage(\"investmentCnt\", \"0\");\n    const rotationsParsed: TypeRotation[] = JSON.parse(getItemLocalStorage(\"rotations\", \"[]\"));\n    const storeNameLocal: string = getItemLocalStorage(\"storeName\", \"\");\n    const machineNameLocal: string = getItemLocalStorage(\"machineName\", \"\");\n    const ballNumberConfirmLocal: string = getItemLocalStorage(\"ballNumberConfirm\", \"\");\n    const borderLocal: string = getItemLocalStorage(\"border\", \"18.0\");\n    const remarksLocal: string = getItemLocalStorage(\"remarks\", \"\");\n    const ballNumberBigHitBeforeLocal: number = Number(getItemLocalStorage(\"ballNumberBigHitBefore\", \"0\"));\n    const ballNumberBigHitAfterLocal: number = Number(getItemLocalStorage(\"ballNumberBigHitAfter\", \"0\"));\n    const roundBaseLocal: number = Number(getItemLocalStorage(\"roundBase\", \"\"));\n    const roundRecordLocal: string = getItemLocalStorage(\"roundRecord\", \"\");\n    const wonBallNumberRecordLocal: string = getItemLocalStorage(\"wonBallNumberRecord\", \"\");\n\n    setInvestmentCnt(Number(investmentCntLocal));\n    setRotations(rotationsParsed);\n    setRotationRate(calcRotationRate(rotationsParsed));\n    setRotationNumberTotal(calcRotationNumberTotal(rotationsParsed));\n    setStoreName(storeNameLocal);\n    setMachineName(machineNameLocal);\n    setBallNumberConfirm(ballNumberConfirmLocal);\n    setBorder(borderLocal);\n    setRemarks(remarksLocal);\n    setBallNumberBigHitBefore(ballNumberBigHitBeforeLocal);\n    setBallNumberBigHitAfter(ballNumberBigHitAfterLocal);\n    setRoundBase(roundBaseLocal);\n    setRoundRecord(roundRecordLocal);\n    setWonBallNumberRecord(wonBallNumberRecordLocal);\n  }, [getItemLocalStorage]);\n\n  const sumRoundBaseRecords = (record: string) => {\n    const regexSplit = /[\\n.,]/;\n    const records = record.split(regexSplit).map((record) => Number(record));\n    const recordsTotal = records.reduce((prev, curr) => {\n      return prev + curr;\n    }, 0);\n\n    return recordsTotal;\n  };\n\n  useEffect(() => {\n    const recordsTotal = sumRoundBaseRecords(roundRecord);\n    setRoundTotal(recordsTotal);\n  }, [roundRecord]);\n\n  useEffect(() => {\n    const recordsTotal = sumRoundBaseRecords(wonBallNumberRecord);\n    setWonBallNumberTotal(recordsTotal);\n  }, [wonBallNumberRecord]);\n\n  useEffect(() => {\n    const roundBase = Number((wonBallNumberTotal / roundTotal).toFixed(1));\n    setRoundBase(roundBase);\n    setItemLocalStorage(\"roundBase\", \"\" + roundBase);\n  }, [roundTotal, wonBallNumberTotal, setItemLocalStorage]);\n\n  useEffect(() => {\n    (rotationListRef as any).current.scrollTop = (rotationListRef as any).current.scrollHeight;\n    setItemLocalStorage(\"rotations\", JSON.stringify(rotations));\n  }, [rotations, setItemLocalStorage]);\n\n  useEffect(() => {\n    setItemLocalStorage(\"investmentCnt\", \"\" + investmentCnt);\n  }, [investmentCnt, setItemLocalStorage]);\n\n  useEffect(() => {\n    setItemLocalStorage(\"border\", border);\n  }, [border, setItemLocalStorage]);\n\n  useEffect(() => {\n    setItemLocalStorage(\"ballNumberConfirm\", ballNumberConfirm);\n  }, [ballNumberConfirm, setItemLocalStorage]);\n\n  useEffect(() => {\n    setItemLocalStorage(\"remarks\", remarks);\n  }, [remarks, setItemLocalStorage]);\n\n  useEffect(() => {\n    // 選択肢の店名が変更されたら、対応した交換率へ変更する。\n    const storeExchangeRate = STORE_NAMES_EXCHANGE_RATES_MAP.get(storeName);\n    setExchangeRate(String(storeExchangeRate));\n\n    setItemLocalStorage(\"storeName\", storeName);\n  }, [storeName, setItemLocalStorage]);\n\n  // ■useMemo系\n  // 「回転単価」が「ボーダーまたは回転率」に対する「導出項目」のため。\n  const rotationUnitPrice = useMemo<number>(() => {\n    if (rotationRate === 0) return 0;\n    return Number((1000 / Number(border) - 1000 / rotationRate).toFixed(1));\n  }, [border, rotationRate]);\n\n  // ■change系\n  function changeStoreNamesSelect(event: React.ChangeEvent<HTMLInputElement>) {\n    setStoreName(event.target.value);\n  }\n\n  function changeBorder(event: React.ChangeEvent<HTMLInputElement>) {\n    setBorder(event.target.value);\n  }\n\n  // 機種名の変更\n  function changeMachineName(event: React.ChangeEvent<HTMLInputElement>) {\n    const machineName = event.target.value;\n    setMachineName(machineName);\n    setItemLocalStorage(\"machineName\", machineName);\n  }\n\n  // 備考の変更\n  function changeRemarks(event: React.ChangeEvent<HTMLInputElement>) {\n    const remarksInputed = event.target.value;\n    setRemarks(remarksInputed);\n  }\n\n  // 大当前玉数の変更\n  function changeBallNumberBigHitBefore(event: React.ChangeEvent<HTMLInputElement>) {\n    const input = event.target.value;\n    setItemLocalStorage(\"ballNumberBigHitBefore\", input);\n    setBallNumberBigHitBefore(Number(input));\n  }\n\n  // 大当後玉数の変更\n  function changeBallNumberBigHitAfter(event: React.ChangeEvent<HTMLInputElement>) {\n    const input = event.target.value;\n    setItemLocalStorage(\"ballNumberBigHitAfter\", input);\n    setBallNumberBigHitAfter(Number(input));\n  }\n\n  // ラウンド記録の変更\n  function changeRoundRecord(event: React.ChangeEvent<HTMLInputElement>) {\n    const input = event.target.value;\n    setItemLocalStorage(\"roundRecord\", input);\n    setRoundRecord(input);\n  }\n\n  // 獲得玉数記録の変更\n  function changeWonBallNumberRecord(event: React.ChangeEvent<HTMLInputElement>) {\n    const input = event.target.value;\n    setItemLocalStorage(\"wonBallNumberRecord\", input);\n    setWonBallNumberRecord(input);\n  }\n\n  // 回転数入力ミス防止用玉数の変更\n  function changeBallNumberConfirm(event: React.ChangeEvent<HTMLInputElement>) {\n    const ballNumberConfirm = event.target.value;\n    setBallNumberConfirm(ballNumberConfirm);\n  }\n\n  // 自動回転に使用する玉数\n  function changeBallNumberAutoRotation(event: React.ChangeEvent<HTMLInputElement>) {\n    const ballNumberAutoRotation = event.target.value;\n    setBallNumberAutoRotation(ballNumberAutoRotation);\n  }\n\n  // 自動回転に使用する回転数\n  function changeRotationNumberAutoRotation(event: React.ChangeEvent<HTMLInputElement>) {\n    const rotationNumberAutoRotation = event.target.value;\n    setRotationNumberAutoRotation(rotationNumberAutoRotation);\n  }\n\n  function changeRotationNumberInputed(event: React.ChangeEvent<HTMLInputElement>) {\n    setRotationNumberInputed(event.target.value);\n  }\n\n  // ■通常関数定義\n  function isResetStarted() {\n    return rotations.length > 0 && rotations[0].type === ROTATION_MODE.resetStart;\n  }\n\n  // 今選択している店舗が大当たり出玉計数機能を付けているかどうか\n  function hasCountFunctionBigHitBallNumber() {\n    return storeName === \"NtNakano\";\n  }\n\n  function clearRotationNumberInputed() {\n    setRotationNumberInputed(\"\");\n  }\n\n  function getWorkAmount() {\n    return (rotationUnitPrice * rotationNumberTotal).toFixed(0);\n  }\n\n  // 獲得玉数の自動計算\n  function autoCalculateWonBallNumber() {\n    try {\n      if (window.confirm(\"獲得玉数の自動計算、入力を行います\")) {\n        // 大当たり後 ー 大当たり前　で　獲得玉数を計算\n        const wonBallNumberCalculated = ballNumberBigHitAfter - ballNumberBigHitBefore;\n        // 大当たり前の玉数が大当たり後より大きければエラー\n        if (wonBallNumberCalculated < 0) {\n          throw ERROR_MSG.bigHitBallNumberBeforeBigThanAfter;\n        }\n        setWonBallNumberRecord(`${wonBallNumberRecord}\\n${wonBallNumberCalculated},`);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  }\n\n  // 一回の貸出ボタン玉数\n  function getBallNumberLent(storeName: string): number {\n    const ballNumberLentDefault = 125;\n    try {\n      if (!STORE_NAME_BALL_NUMBER_LENT.hasOwnProperty(storeName)) {\n        throw new Error(ERROR_MSG.notExpectedStoreName);\n      }\n      return STORE_NAME_BALL_NUMBER_LENT[storeName];\n    } catch (error) {\n      alert(error);\n      return ballNumberLentDefault;\n    }\n  }\n\n  // 前のページへ移動\n  function toPrevPage() {\n    localStorage.setItem(\"pageIndex\", \"\" + (pageIndex - 1));\n    setPageIndex(pageIndex - 1);\n  }\n  // 次のページへ移動\n  function toNextPage() {\n    localStorage.setItem(\"pageIndex\", \"\" + (pageIndex + 1));\n    setPageIndex(pageIndex + 1);\n  }\n\n  //　回転配列を1行削除する。\n  function deleteOneRotation() {\n    const rotationsLength = rotations.length;\n\n    if (rotationsLength === 0) return;\n\n    // 削除時は、一律で正しいことにする。\n    setIsCorrectBallNumberConfirm(true);\n\n    // 投資回数の調整\n    if (last(rotations).type === ROTATION_MODE.normal) {\n      setInvestmentCnt(investmentCnt - 1);\n    }\n\n    const rotationsDeleted = rotations.filter((rotation, index) => {\n      return index !== rotationsLength - 1;\n    });\n\n    // 回転率の更新\n    // 長さが1の時、必ずリセットスタートなので、回転率は0に設定してあります。\n    if (rotationsDeleted.length === 1 || rotationsDeleted.length === 0) {\n      setRotationRate(0);\n    } else {\n      setRotationRate(last(rotationsDeleted).rotationRate);\n    }\n\n    // 総回転数の更新\n    if (last(rotations).type === ROTATION_MODE.normal && rotationsDeleted.length > 0) {\n      const rotationNumberDiffShouldSub = last(rotations).rotationNumber - last(rotationsDeleted).rotationNumber;\n      setRotationNumberTotal(rotationNumberTotal - rotationNumberDiffShouldSub);\n    }\n\n    setRotations(rotationsDeleted);\n\n    // 確認用玉数を計算\n    setBallNumberConfirm(String(Number(ballNumberConfirm) + getBallNumberLent(storeName)));\n  }\n\n  // 画面の初期読込時に使用\n  function calcRotationNumberTotal(rotations: TypeRotation[]) {\n    let totalRotationNumberCalculatted = 0;\n    rotations.forEach((rotation, idx) => {\n      if (rotation.type === ROTATION_MODE.resetStart || rotation.type === ROTATION_MODE.continueStart) return;\n      totalRotationNumberCalculatted += rotation.rotationNumber - rotations[idx - 1].rotationNumber;\n    });\n    return totalRotationNumberCalculatted;\n  }\n\n  // 画面の初期読込時に使用\n  function calcRotationRate(rotations: TypeRotation[]) {\n    if (rotations.length === 0) return 0;\n    return last(rotations).rotationRate;\n  }\n\n  // 回転配列の全行削除\n  function deleteAllRotation() {\n    if (window.confirm(\"全行削除してもいいですか？\")) {\n      setRotations([]);\n      setRotationRate(0);\n      setInvestmentCnt(0);\n      setRotationNumberTotal(0);\n      setBallNumberConfirm(\"\");\n      setMachineName(\"\");\n      setRemarks(\"\");\n      setRoundRecord(\"\");\n      setWonBallNumberRecord(\"\");\n    }\n  }\n\n  // 最後の結果書込処理（全行削除も行う）\n  function writeWorkResultAndDeleteAllRotation() {\n    const now = new Date();\n    const date = format(now, \"yyyy/MM/dd\");\n    const timeStart = localStorage.getItem(\"startTime\");\n    const timeEnd = format(now, \"HH:mm\");\n\n    const params = new URLSearchParams();\n    params.append(\"date\", `${date}`);\n    params.append(\"timeStart\", `${timeStart}`);\n    params.append(\"timeEnd\", `${timeEnd}`);\n    params.append(\"border\", `${border}`);\n    params.append(\"rotationRate\", `${rotationRate}`);\n    params.append(\"rotationUnitPrice\", `${rotationUnitPrice}`);\n    params.append(\"rotationNumberTotal\", `${rotationNumberTotal}`);\n    params.append(\"roundBase\", `${roundBase}`);\n    params.append(\"workAmount\", `${getWorkAmount()}`);\n    params.append(\"machineName\", `${machineName}`);\n    params.append(\"storeName\", `${storeName}`);\n    params.append(\"remarks\", `${remarks}`);\n\n    axios\n      .post(REST_URL_SPREADSHEET, params)\n      .then(function (response: any) {\n        alert(\"書込が成功しました。\");\n        deleteAllRotation();\n      })\n      .catch(function (error: any) {\n        alert(error);\n      });\n  }\n\n  // 回転数の短縮入力の判別（返り値は、回転数）\n  function shouldShortInput() {\n    return String(rotationNumberInputed).length < 3 && String(last(rotations).rotationNumber).length > 1;\n  }\n\n  // 短縮入力された「回転数を返す」\n  function getRotationNumberShortInputed(): number {\n    const digitsHowMuch = 2;\n    const rotationNumberLast: string = String(last(rotations).rotationNumber);\n    const isMoveUp = (beCompared: number, rotationNumberInputed: number) => beCompared > rotationNumberInputed;\n    const createBefore = (): number => {\n      // 分解パート\n      const numberBeMovedUpIfNeed = Number(rotationNumberLast.slice(0, -digitsHowMuch));\n      const numberBeCompared = Number(rotationNumberLast.slice(-digitsHowMuch));\n      // 「比較パート」と「繰上げパート」\n      const before = isMoveUp(numberBeCompared, Number(rotationNumberInputed)) ? numberBeMovedUpIfNeed + 1 : numberBeMovedUpIfNeed;\n\n      return before;\n    };\n\n    const before = createBefore();\n    const after = (\"00\" + rotationNumberInputed).slice(-digitsHowMuch);\n    // 連結パート\n    return Number(before + after);\n  }\n\n  // 自動回転\n  async function autoRotation() {\n    if (ballNumberAutoRotation === \"\" || rotationNumberAutoRotation === \"\") {\n      alert(\"玉数または回転数を指定しましょう\");\n      return;\n    }\n\n    // 玉数の差から投資回数を算出\n    const diffBallNumber = Number(ballNumberConfirm) - Number(ballNumberAutoRotation);\n    if (diffBallNumber < 0) {\n      alert(\"自動回転の玉数は、確認用玉数より大きい値を指定しましょう。\");\n      return;\n    }\n\n    // 回転ボタンを非同期でクリックするために作成。\n    const clickRotation = () => {\n      return sleep(1).then(() => rotationButtonRef.current.click());\n    };\n\n    let countInvestment = diffBallNumber / getBallNumberLent(storeName);\n    // 丁度いい回転数を自動入力するために算出\n    let diffRotationNumber = Number(rotationNumberAutoRotation) - last(rotations).rotationNumber;\n    // 投資回数が整数でない場合は、考えないことにしています。\n    if (!Number.isInteger(countInvestment)) {\n      if (!window.confirm(\"投資回数が整数ではありません。\\n半端を除いて計算してもいいですか？\")) return;\n      // 回転数の小数部分\n      const countInvestmentDecimal = countInvestment - parseInt(String(countInvestment));\n      // 投資回数を整数に修正\n      countInvestment -= countInvestmentDecimal;\n      // 余分な回転数を総回転数から引く\n      const rotationNumberExtra = Math.round(diffRotationNumber * countInvestmentDecimal);\n      diffRotationNumber -= rotationNumberExtra;\n    }\n    // 一回の投資ごとの回転数。ユーザへの確認に用います。厳密にやらずに、小数点は無視します。\n    const rotationNumberPerInvestment = Math.floor(diffRotationNumber / countInvestment);\n\n    // 自動回転の実施を確認します。\n    if (!window.confirm(`自動回転してもいいですか？\\n投資回数：${countInvestment}回\\n平均回転数：${rotationNumberPerInvestment}`)) return;\n    // 投資回数分、回転数を自動入力していきます。\n    for (let index = 0; index < countInvestment; index++) {\n      const rotationNumber = Number(rotationNumberAutoRotation) - rotationNumberPerInvestment * (countInvestment - 1 - index);\n      setRotationNumberInputed(String(rotationNumber));\n      await clickRotation();\n    }\n  }\n\n  // 通常回転（回転ボタン押下時の処理）\n  function rotation() {\n    try {\n      if (isResetStarted() === false) {\n        throw ERROR_MSG.resetStart;\n      }\n      // 以下の場合に、「確認用玉数チェック」をfalseにする。\n      // マイナスに突入しそうな場合、未入力の場合（Numberで変換すると0になるので特別記入しなくていい）\n      if (Number(ballNumberConfirm) < getBallNumberLent(storeName)) {\n        setIsCorrectBallNumberConfirm(false);\n      } else {\n        setIsCorrectBallNumberConfirm(true);\n      }\n\n      // 投資回数の計算\n      const investmentCntNow = investmentCnt + 1;\n      // 必要であれば短縮入力を効かせる。\n      const rotationNumberInputedClone = shouldShortInput() ? getRotationNumberShortInputed() : Number(rotationNumberInputed);\n      const rotationNumberDiffFromLast = Number(rotationNumberInputedClone) - last(rotations).rotationNumber;\n      //　交換率の比：通常交換率'4'と実交換率の比。回転率計算に用いる。\n      const exchangeRateRatio: number = Number(exchangeRate) / EXCHANGE_RATE_NORMAL;\n      const rotationRateMostRecent = Number((rotationNumberDiffFromLast * REPLENISHMENT_AMOUNT_RATIO * exchangeRateRatio).toFixed(1));\n\n      const rotationNumberTotalNow = rotationNumberTotal + rotationNumberDiffFromLast;\n\n      // 投資金額の比（todo:もう少し分かりやすく出来るかも？）\n      const investmentAmountRatio = 1000 / (REPLENISHMENT_AMOUNT * investmentCntNow);\n      const rotationRateNow = Number((rotationNumberTotalNow * investmentAmountRatio * exchangeRateRatio).toFixed(1));\n\n      clearRotationNumberInputed();\n\n      // 各種set\n      setInvestmentCnt(investmentCntNow);\n      setRotationNumberTotal(rotationNumberTotalNow);\n      setRotationRate(rotationRateNow);\n      setRotations(\n        rotations.concat({\n          type: ROTATION_MODE.normal,\n          rotationNumber: Number(rotationNumberInputedClone),\n          rotationRateMostRecent,\n          rotationRate: rotationRateNow,\n        })\n      );\n      // 確認用玉数を計算\n      setBallNumberConfirm(String(Number(ballNumberConfirm) - getBallNumberLent(storeName)));\n    } catch (error) {\n      alert(error);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Container className={`pt-3 ${isCorrectBallNumberConfirm ? \"\" : styles.bg_warning}`}>\n        <Row>\n          <Col>\n            <p className=\"mb-0\">\n              <span>{pageIndex}ページ目</span>\n            </p>\n\n            <p className=\"mb-0\">\n              <span>{rotationUnitPrice}</span> * <span>{rotationNumberTotal}</span> = <span data-testid=\"work-amount\">{getWorkAmount()}</span>\n            </p>\n\n            <Row className=\"justify-content-between\">\n              <Button className=\"mb-1\" variant=\"primary\" onClick={() => deleteOneRotation()}>\n                1行削除\n              </Button>\n              <Button className={`mb-1 ${pageIndex === 0 ? \"d-none\" : \"\"}`} variant=\"primary\" onClick={() => toPrevPage()}>\n                前\n              </Button>\n              <Button className=\"mb-1\" variant=\"primary\" onClick={() => toNextPage()}>\n                次\n              </Button>\n            </Row>\n\n            <FormControl\n              className=\"mb-1\"\n              id=\"rotationNumberInput\"\n              value={rotationNumberInputed}\n              onChange={changeRotationNumberInputed}\n              placeholder=\"回転数入力\"\n            />\n\n            <Row className=\"mb-2\">\n              <NumberButtons setRotationNumberInputed={setRotationNumberInputed} rotationNumberInputed={rotationNumberInputed} />\n              <Button variant=\"primary\" className={`col-4 ${styles.font_button}`} onClick={() => clearRotationNumberInputed()}>\n                C\n              </Button>\n              <Button variant=\"primary\" className=\"col-4\"></Button>\n\n              <Button variant=\"primary\" className=\"col-4 py-3\" ref={rotationButtonRef} onClick={() => rotation()}>\n                回転\n              </Button>\n\n              <ContinueStartButton\n                rotationNumberInputed={rotationNumberInputed}\n                rotationRate={rotationRate}\n                rotations={rotations}\n                clearRotationNumberInputed={clearRotationNumberInputed}\n                setRotations={setRotations}\n                setIsCorrectBallNumberConfirm={setIsCorrectBallNumberConfirm}\n              />\n\n              <ResetStartButton\n                rotationNumberInputed={rotationNumberInputed}\n                rotations={rotations}\n                selectStoreRef={selectStoreRef}\n                isResetStarted={isResetStarted}\n                clearRotationNumberInputed={clearRotationNumberInputed}\n                setRotations={setRotations}\n              />\n            </Row>\n          </Col>\n          <Col>\n            <ListGroup className=\"rotationList\" ref={rotationListRef}>\n              <Rotations rotations={rotations} />\n            </ListGroup>\n\n            <div className=\"mt-2\">\n              <div className={`mb-2 ${hasCountFunctionBigHitBallNumber() ? \"\" : \"d-none\"}`}>\n                <InputGroup size=\"sm\">\n                  <InputGroup.Prepend>\n                    <InputGroup.Text>大当前玉数</InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <FormControl value={ballNumberBigHitBefore} onChange={changeBallNumberBigHitBefore} />\n                </InputGroup>\n                <InputGroup size=\"sm\">\n                  <InputGroup.Prepend>\n                    <InputGroup.Text>大当後玉数</InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <FormControl value={ballNumberBigHitAfter} onChange={changeBallNumberBigHitAfter} />\n                </InputGroup>\n                <Button variant=\"primary\" size=\"sm\" onClick={() => autoCalculateWonBallNumber()}>\n                  自動計算\n                </Button>\n              </div>\n              <span className=\"mb-0\">獲得玉数</span>\n              <InputGroup>\n                <FormControl\n                  as=\"textarea\"\n                  rows={2}\n                  placeholder=\"獲得玉数\"\n                  inputMode=\"numeric\"\n                  value={wonBallNumberRecord}\n                  onChange={changeWonBallNumberRecord}\n                />\n              </InputGroup>\n              <span className=\"mb-0\">ラウンド数</span>\n              <InputGroup>\n                <FormControl as=\"textarea\" rows={2} placeholder=\"ラウンド\" inputMode=\"numeric\" value={roundRecord} onChange={changeRoundRecord} />\n              </InputGroup>\n              <p className=\"mb-0\">rb: {roundBase}</p>\n            </div>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>確認用玉数</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={ballNumberConfirm} data-testid=\"ball-number-confirm\" onChange={changeBallNumberConfirm} type=\"number\" />\n              </InputGroup>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <FormControl\n                  value={ballNumberAutoRotation}\n                  data-testid=\"ball-number-auto-rotation\"\n                  onChange={changeBallNumberAutoRotation}\n                  type=\"number\"\n                  placeholder=\"玉数\"\n                />\n                <FormControl\n                  value={rotationNumberAutoRotation}\n                  data-testid=\"ball-number-auto-rotation\"\n                  onChange={changeRotationNumberAutoRotation}\n                  type=\"number\"\n                  placeholder=\"回転数\"\n                />\n                <InputGroup.Append>\n                  <Button variant=\"outline-primary\" onClick={() => autoRotation()}>\n                    自回\n                  </Button>\n                </InputGroup.Append>\n              </InputGroup>\n            </Row>\n\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>ボーダー</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={border} data-testid=\"border\" onChange={changeBorder} type=\"number\" />\n              </InputGroup>\n            </Row>\n\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>備考</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control as=\"textarea\" rows={2} value={remarks} onChange={changeRemarks} />\n              </InputGroup>\n            </Row>\n\n            <Row>\n              <Button className=\"mt-5\" variant=\"primary\" onClick={() => writeWorkResultAndDeleteAllRotation()}>\n                表書込＆全削\n              </Button>\n            </Row>\n\n            <Row>\n              <Button className=\"allDeteleBtn\" variant=\"primary\" onClick={() => deleteAllRotation()}>\n                全行削除\n              </Button>\n            </Row>\n          </Col>\n\n          <Col>\n            <div>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>店名</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control as=\"select\" value={storeName} onChange={changeStoreNamesSelect} ref={selectStoreRef}>\n                  <StoreNames storeNames={STORE_NAMES} />\n                </Form.Control>\n              </InputGroup>\n            </div>\n            <div>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>機種名</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={machineName} onChange={changeMachineName} />\n              </InputGroup>\n            </div>\n            <div>\n              <div className=\"mr-2\">交換率:{exchangeRate}</div>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}