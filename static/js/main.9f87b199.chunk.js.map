{"version":3,"sources":["App.tsx","index.tsx"],"names":["axios","require","default","ShrinkNameButton","styled","Button","App","useState","rotationNumberInputed","setRotationNumberInputed","rotations","setRotations","rotationRate","setRotationRate","investmentCnt","setInvestmentCnt","totalRotationNumber","setTotalRotationNumber","border","setBorder","storeNames","setStoreNames","storeName","setStoreName","machineName","setMachineName","ballNumberComfirm","setBallNumberComfirm","remarks","setRemarks","Map","storeNamesExchangeRatesMap","setStoreNamesExchangeRatesMap","exchangeRate","setExchangeRate","rotationListRef","useRef","selectStoreRef","document","createElement","rotationType","clearRotationNumberInputed","getWorkAmount","rotationUnitPrice","toFixed","useEffect","storeNamesInit","set","initStoreNamesExchangeRates","storeNameGettedFromLocalStorage","localStorage","getItem","machineNameGettedFromLocalStorage","ballNumberComfirmGettedFromLocalStorage","investmentCntGettedFromLocalStorage","rotationsGettedFromLocalStorage","borderGettedFromLocalStorage","remarksGettedFromLocalStorage","rotationsParsed","JSON","parse","rotationRateCalculatted","length","calcRotationRateFromRotations","rotationNumberTotalCalculatted","totalRotationNumberCalculatted","forEach","rotation","idx","type","rotationNumber","calcTotalRotationNumberFromRotations","Number","current","scrollTop","scrollHeight","setItem","stringify","storeExchangeRate","get","useMemo","investmentCntNow","magnificationForExchangeRate","rotationNumberLast","rotationNumberInputedClone","String","convertToThreeDigits","slice","rotationNumberDiffFromLast","rotationRateMostRecent","totalRotationNumberNow","rotationRateNow","concat","ballNumberOnePush","alert","copyWorkRecord","navigator","clipboard","writeText","now","Date","dateFormattedStart","format","timeFormattedStart","timeFormattedNow","join","getWorkRecordForSpreadSheet","resetStart","value","$storeNames","$doms","disabled","hidden","map","store","$numberButtons","number","variant","className","onClick","$rotations","index","content","ListGroup","Item","Container","Row","Col","rotationsLength","lastRotation","rotationsDeleted","filter","rotationNumberDiffShouldSub","deleteOneRotation","FormControl","id","onChange","event","target","placeholder","InputGroup","size","Prepend","Text","Form","Control","as","ref","rows","remarksInputed","params","URLSearchParams","append","post","then","response","catch","error","writeWorkRecordToSpreadsheet","window","confirm","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9f87b199.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect, useMemo } from \"react\";\nimport styled from \"styled-components\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, FormControl, Form, Button, ListGroup, InputGroup } from \"react-bootstrap\";\nimport { format } from \"date-fns\";\nconst axios = require(\"axios\").default;\n\nconst ShrinkNameButton = styled(Button)`\n  font-size: 0.4rem;\n`;\n\n// TITLES\nconst SELECT_STORE_TITLE: string = \"店名を選択して下さい。\";\n\n// 交換率ベース？\nconst EXCHANGE_RATE_BASE = 4;\n\n// ワンプッシュ当たりの金額\nconst AMOUNT_ONE_PUSH = 500;\n\n// スプレッドシートREST_URL\nconst REST_URL_SPREADSHEET = \"https://script.google.com/macros/s/AKfycbwAEFQ6VWnrJ67EjQiYd8WeEv0D2ogBpV2GYDgxucx9C5gf1Dmd/exec\";\n\ntype RotationType = {\n  type: string;\n  rotationNumber: number;\n  rotationRateMostRecent: number;\n  rotationRate: number;\n};\n\nfunction App() {\n  const [rotationNumberInputed, setRotationNumberInputed] = useState<string>(\"\");\n  const [rotations, setRotations] = useState<RotationType[]>([]);\n  const [rotationRate, setRotationRate] = useState(0);\n  const [investmentCnt, setInvestmentCnt] = useState(0);\n  const [totalRotationNumber, setTotalRotationNumber] = useState(0);\n  const [border, setBorder] = useState<string>(\"18.0\");\n  const [storeNames, setStoreNames] = useState<string[]>([]);\n  const [storeName, setStoreName] = useState(\"\");\n  const [machineName, setMachineName] = useState(\"\");\n  const [ballNumberComfirm, setBallNumberComfirm] = useState(\"\");\n  const [remarks, setRemarks] = useState(\"\");\n\n  const [storeNamesExchangeRatesMap, setStoreNamesExchangeRatesMap] = useState(new Map());\n\n  const [exchangeRate, setExchangeRate] = useState<string>(\"\");\n\n  const rotationListRef = useRef<HTMLDivElement>(null);\n  const selectStoreRef = useRef<HTMLSelectElement>(document.createElement(\"select\"));\n\n  const replenishmentAmount = 500;\n  const ratioOfReplenishmentAmountToThousandYen = 1000 / replenishmentAmount;\n\n  const rotationType = {\n    normal: \"normal\",\n    continueStart: \"continueStart\",\n    resetStart: \"resetStart\",\n  };\n\n  // 初期値として、それぞれの「店名と交換率」を設定する。\n  const initStoreNamesExchangeRates = () => {\n    const storeNamesInit = [\"DoruNakano\", \"LiNakano\", \"NtNakano\"];\n    setStoreNames(storeNamesInit);\n    setStoreNamesExchangeRatesMap(storeNamesExchangeRatesMap.set(storeNamesInit[0], 4.38));\n    setStoreNamesExchangeRatesMap(storeNamesExchangeRatesMap.set(storeNamesInit[1], 4));\n    setStoreNamesExchangeRatesMap(storeNamesExchangeRatesMap.set(storeNamesInit[2], 4));\n  };\n\n  // 初回描画時に実行\n  useEffect(() => {\n    // 初期値として、それぞれの「店名と交換率」を設定する。\n    initStoreNamesExchangeRates();\n\n    // ローカルストレージから各値を取得。\n    const storeNameGettedFromLocalStorage = localStorage.getItem(\"storeName\");\n    const machineNameGettedFromLocalStorage = localStorage.getItem(\"machineName\");\n    const ballNumberComfirmGettedFromLocalStorage = localStorage.getItem(\"ballNumberComfirm\");\n    const investmentCntGettedFromLocalStorage = localStorage.getItem(\"investmentCnt\");\n    const rotationsGettedFromLocalStorage = localStorage.getItem(\"rotations\");\n    const borderGettedFromLocalStorage = localStorage.getItem(\"border\");\n    const remarksGettedFromLocalStorage = localStorage.getItem(\"remarks\");\n\n    if (storeNameGettedFromLocalStorage === null) return;\n    if (machineNameGettedFromLocalStorage === null) return;\n    if (ballNumberComfirmGettedFromLocalStorage === null) return;\n    if (investmentCntGettedFromLocalStorage === null) return;\n    if (rotationsGettedFromLocalStorage === null) return;\n    if (borderGettedFromLocalStorage === null) return;\n    if (remarksGettedFromLocalStorage === null) return;\n\n    setStoreName(storeNameGettedFromLocalStorage);\n    setMachineName(machineNameGettedFromLocalStorage);\n    setBallNumberComfirm(ballNumberComfirmGettedFromLocalStorage);\n    setRemarks(remarksGettedFromLocalStorage);\n\n    const rotationsParsed = JSON.parse(rotationsGettedFromLocalStorage);\n\n    // 存在する場合\n    // 回転配列から回転率と総回転数を求める\n\n    const rotationRateCalculatted = calcRotationRateFromRotations(rotationsParsed);\n    const rotationNumberTotalCalculatted = calcTotalRotationNumberFromRotations(rotationsParsed);\n\n    setRotationRate(rotationRateCalculatted);\n    setTotalRotationNumber(rotationNumberTotalCalculatted);\n    setInvestmentCnt(Number(investmentCntGettedFromLocalStorage));\n    setRotations(rotationsParsed);\n    setBorder(borderGettedFromLocalStorage);\n  }, []);\n\n  useEffect(() => {\n    (rotationListRef as any).current.scrollTop = (rotationListRef as any).current.scrollHeight;\n    localStorage.setItem(\"rotations\", JSON.stringify(rotations));\n  }, [rotations]);\n\n  useEffect(() => {\n    localStorage.setItem(\"investmentCnt\", \"\" + investmentCnt);\n  }, [investmentCnt]);\n\n  useEffect(() => {\n    localStorage.setItem(\"border\", border);\n  }, [border]);\n\n  useEffect(() => {\n    localStorage.setItem(\"ballNumberComfirm\", ballNumberComfirm);\n  }, [ballNumberComfirm]);\n\n  useEffect(() => {\n    localStorage.setItem(\"remarks\", remarks);\n  }, [remarks]);\n\n  useEffect(() => {\n    // 選択肢の店名が変更されたら、対応した交換率へ変更する。\n    const storeExchangeRate = storeNamesExchangeRatesMap.get(storeName);\n    setExchangeRate(storeExchangeRate);\n\n    // ページ再読込に対応するため\n    localStorage.setItem(\"storeName\", storeName);\n  }, [storeName]);\n\n  function isResetStarted() {\n    return rotations.length > 0 && rotations[0].type === rotationType.resetStart;\n  }\n\n  // change系\n  function changeStoreNamesSelect(event: React.ChangeEvent<HTMLInputElement>) {\n    setStoreName(event.target.value);\n  }\n\n  function changeBorder(event: React.ChangeEvent<HTMLInputElement>) {\n    setBorder(event.target.value);\n  }\n\n  // 機種名の変更\n  function changeMachineName(event: React.ChangeEvent<HTMLInputElement>) {\n    const machineName = event.target.value;\n    setMachineName(machineName);\n    localStorage.setItem(\"machineName\", machineName);\n  }\n\n  // 備考の変更\n  function changeRemarks(event: React.ChangeEvent<HTMLInputElement>) {\n    const remarksInputed = event.target.value;\n    setRemarks(remarksInputed);\n  }\n\n  // 回転数入力ミス防止用玉数の変更\n  // ballNumberComfirm\n  function changeBallNumberComfirm(event: React.ChangeEvent<HTMLInputElement>) {\n    const ballNumberComfirm = event.target.value;\n    setBallNumberComfirm(ballNumberComfirm);\n  }\n\n  function changeExchangeRate(event: React.ChangeEvent<HTMLInputElement>) {\n    setExchangeRate(event.target.value);\n  }\n\n  function changeRotationNumberInputed(event: React.ChangeEvent<HTMLInputElement>) {\n    setRotationNumberInputed(event.target.value);\n  }\n\n  function _isResetStarted() {\n    return rotations.length !== 0 && rotations[0].type === rotationType.resetStart;\n  }\n\n  function clearRotationNumberInputed() {\n    setRotationNumberInputed(\"\");\n  }\n\n  function getWorkAmount() {\n    return (rotationUnitPrice * totalRotationNumber).toFixed(0);\n  }\n\n  const rotationUnitPrice = useMemo<number>(() => {\n    if (rotationRate === 0) return 0;\n    return Number((1000 / Number(border) - 1000 / rotationRate).toFixed(1));\n  }, [border, rotationRate]);\n\n  //　回転配列を1行削除する。\n  function deleteOneRotation() {\n    const rotationsLength = rotations.length;\n\n    if (rotationsLength === 0) return;\n\n    // 投資回数の調整\n    const lastRotation = rotations[rotations.length - 1];\n    if (lastRotation.type === rotationType.normal) {\n      setInvestmentCnt(investmentCnt - 1);\n    }\n\n    const rotationsDeleted = rotations.filter((rotation, index) => {\n      return index !== rotationsLength - 1;\n    });\n\n    // 回転率の更新\n    // 長さが1の時、必ずリセットスタートなので、回転率は0に設定してあります。\n    if (rotationsDeleted.length === 1 || rotationsDeleted.length === 0) {\n      setRotationRate(0);\n    } else {\n      setRotationRate(rotationsDeleted[rotationsDeleted.length - 1].rotationRate);\n    }\n\n    // 総回転数の更新\n    if (lastRotation.type === rotationType.normal && rotationsDeleted.length > 0) {\n      const rotationNumberDiffShouldSub =\n        rotations[rotations.length - 1].rotationNumber - rotationsDeleted[rotationsDeleted.length - 1].rotationNumber;\n      setTotalRotationNumber(totalRotationNumber - rotationNumberDiffShouldSub);\n    }\n\n    setRotations(rotationsDeleted);\n\n    // 確認用玉数を計算\n    const storeExchangeRate = storeNamesExchangeRatesMap.get(storeName);\n    const ballNumberOnePush = Number((AMOUNT_ONE_PUSH / storeExchangeRate).toFixed());\n    setBallNumberComfirm(String(Number(ballNumberComfirm) + ballNumberOnePush));\n  }\n\n  function calcRotationRateFromRotations(rotations: RotationType[]) {\n    if (rotations.length === 0) return 0;\n    return rotations[rotations.length - 1].rotationRate;\n  }\n\n  function deleteAllRotation() {\n    if (window.confirm(\"全行削除してもいいですか？\")) {\n      setRotations([]);\n      setRotationRate(0);\n      setInvestmentCnt(0);\n      setTotalRotationNumber(0);\n    }\n  }\n\n  // 回転配列から総回転数を求める。\n  function calcTotalRotationNumberFromRotations(rotations: RotationType[]) {\n    let totalRotationNumberCalculatted = 0;\n    rotations.forEach((rotation, idx) => {\n      if (rotation.type === rotationType.resetStart || rotation.type === rotationType.continueStart) return;\n      totalRotationNumberCalculatted += rotation.rotationNumber - rotations[idx - 1].rotationNumber;\n    });\n    return totalRotationNumberCalculatted;\n  }\n\n  function rotation() {\n    if (_isResetStarted() === false) {\n      alert(`リセットスタートをしましょう`);\n      return;\n    }\n\n    const investmentCntNow = investmentCnt + 1;\n    setInvestmentCnt(investmentCntNow);\n    const magnificationForExchangeRate: number = Number(exchangeRate) / EXCHANGE_RATE_BASE;\n\n    const rotationNumberLast = rotations[rotations.length - 1].rotationNumber;\n\n    let rotationNumberInputedClone: number = Number(rotationNumberInputed);\n\n    // 回転数の短縮入力：ひとまず回転数が3桁以下の場合のみ対応\n    if (String(rotationNumberInputedClone).length < 3 && String(rotations[rotations.length - 1].rotationNumber).length > 1) {\n      const convertToThreeDigits: string = (\"000\" + rotations[rotations.length - 1].rotationNumber).slice(-3);\n      const lastTwoDigits: number = Number(String(rotations[rotations.length - 1].rotationNumber).slice(1, 3));\n      const baseNumberOfHundreds: number =\n        rotationNumberInputedClone > lastTwoDigits ? Number(convertToThreeDigits[0]) : Number(convertToThreeDigits[0]) + 1;\n\n      const baseNumber: number = baseNumberOfHundreds * 100;\n      rotationNumberInputedClone += baseNumber;\n    }\n\n    const rotationNumberDiffFromLast = Number(rotationNumberInputedClone) - rotationNumberLast;\n    const rotationRateMostRecent = Number(\n      (rotationNumberDiffFromLast * ratioOfReplenishmentAmountToThousandYen * magnificationForExchangeRate).toFixed(1)\n    );\n\n    const totalRotationNumberNow = totalRotationNumber + rotationNumberDiffFromLast;\n    setTotalRotationNumber(totalRotationNumberNow);\n\n    const ratioOfTotalInvestmentAmountToThousandYen = 1000 / (replenishmentAmount * investmentCntNow);\n    const rotationRateNow = Number((totalRotationNumberNow * ratioOfTotalInvestmentAmountToThousandYen * magnificationForExchangeRate).toFixed(1));\n    setRotationRate(rotationRateNow);\n\n    setRotations(\n      rotations.concat({\n        type: rotationType.normal,\n        rotationNumber: Number(rotationNumberInputedClone),\n        rotationRateMostRecent,\n        rotationRate: rotationRateNow,\n      })\n    );\n    clearRotationNumberInputed();\n\n    // 確認用玉数を計算\n    const storeExchangeRate = storeNamesExchangeRatesMap.get(storeName);\n    const ballNumberOnePush = Number((AMOUNT_ONE_PUSH / storeExchangeRate).toFixed());\n    setBallNumberComfirm(String(Number(ballNumberComfirm) - ballNumberOnePush));\n  }\n\n  function continueStart() {\n    if (rotationNumberInputed === \"\") {\n      alert(`回転数を入力しましょう`);\n      return;\n    }\n\n    setRotations(\n      rotations.concat({\n        type: rotationType.continueStart,\n        rotationNumber: Number(rotationNumberInputed),\n        rotationRateMostRecent: 0,\n        rotationRate,\n      })\n    );\n\n    clearRotationNumberInputed();\n  }\n\n  // スプレッドシートへ稼働記録を書き込む\n  function writeWorkRecordToSpreadsheet(): void {\n    const now = new Date();\n    const dateFormattedStart = format(now, \"yyyy/MM/dd\");\n    const timeFormattedStart = localStorage.getItem(\"startTime\");\n    const timeFormattedNow = format(now, \"HH:mm\");\n\n    const params = new URLSearchParams();\n    params.append(\"date\", `${dateFormattedStart} ${timeFormattedStart}〜${timeFormattedNow}`);\n    params.append(\"border\", `ボーダー：${border}`);\n    params.append(\"rotationRate\", `回転率：${rotationRate}`);\n    params.append(\"rotationUnitPrice\", `回転単価：${rotationUnitPrice}`);\n    params.append(\"totalRotationNumber\", `総回転数：${totalRotationNumber}`);\n    params.append(\"workAmount\", `${getWorkAmount()}`);\n    params.append(\"machineName\", `${machineName}`);\n    params.append(\"storeName\", `${storeName}`);\n    params.append(\"remarks\", `${remarks}`);\n\n    axios\n      .post(REST_URL_SPREADSHEET, params)\n      .then(function (response: any) {\n        alert(\"書込が成功しました。\");\n      })\n      .catch(function (error: any) {\n        alert(error);\n      });\n  }\n\n  // スプレッドシートへのペースト用テキストを取得。\n  function getWorkRecordForSpreadSheet(): string {\n    const now = new Date();\n    const dateFormattedStart = format(now, \"yyyy/MM/dd\");\n    const timeFormattedStart = localStorage.getItem(\"startTime\");\n    const timeFormattedNow = format(now, \"HH:mm\");\n\n    const delimiter = \"\t\";\n    // 下記でも動くようであれば、後々こちらに変更する。\n    // const delimiter = \"\\t\";\n\n    return [\n      `${dateFormattedStart} ${timeFormattedStart}〜${timeFormattedNow}`,\n      `ボーダー：${border}`,\n      `回転率：${rotationRate}`,\n      `回転単価：${rotationUnitPrice}`,\n      `総回転数：${totalRotationNumber}`,\n      `${getWorkAmount()}`,\n      `${machineName}`,\n      `${storeName}`,\n      `${remarks}`,\n    ].join(delimiter);\n  }\n\n  // 稼働記録をコピー\n  function copyWorkRecord() {\n    navigator.clipboard.writeText(getWorkRecordForSpreadSheet());\n  }\n\n  function resetStart() {\n    if (isResetStarted()) {\n      alert(\"既にリセットスタートされています\");\n      return;\n    }\n\n    if (rotationNumberInputed === \"\") {\n      alert(`回転数を入力しましょう`);\n      return;\n    }\n\n    // 選択肢：店名の値が初期値の場合、警告を出す。\n    if (selectStoreRef.current.value === \"\") {\n      alert(`店名を選択して下さい。`);\n      return;\n    }\n\n    setRotations(\n      rotations.concat({\n        type: rotationType.resetStart,\n        rotationNumber: Number(rotationNumberInputed),\n        rotationRateMostRecent: 0,\n        rotationRate: 0,\n      })\n    );\n\n    clearRotationNumberInputed();\n\n    localStorage.setItem(\"startTime\", format(new Date(), \"HH:mm\"));\n  }\n\n  // DOMの定義\n\n  // 店名の選択肢\n  const $storeNames = (() => {\n    const $doms = [\n      <option key={\"defaultValue\"} value=\"\" disabled hidden>\n        {SELECT_STORE_TITLE}\n      </option>,\n    ];\n    const $storeNames = storeNames.map((store) => {\n      return (\n        <option key={store} value={store}>\n          {store}\n        </option>\n      );\n    });\n\n    const $domsConcated = [$doms, ...$storeNames];\n    return $domsConcated;\n  })();\n\n  const $numberButtons = [\"7\", \"8\", \"9\", \"4\", \"5\", \"6\", \"1\", \"2\", \"3\", \"0\"].map((number) => (\n    <Button key={number} variant=\"primary\" className=\"col-4\" onClick={() => setRotationNumberInputed(rotationNumberInputed + number)}>\n      {number}\n    </Button>\n  ));\n\n  const $rotations = rotations.map((rotation, index) => {\n    let content = \"\";\n    if (rotation.type === rotationType.resetStart) {\n      content = `${rotation.rotationNumber} --start--`;\n    } else if (rotation.type === rotationType.continueStart) {\n      content = `${rotation.rotationNumber} > start`;\n    } else if (rotation.type === rotationType.normal) {\n      content = `${rotation.rotationNumber} ${rotation.rotationRateMostRecent} ${rotation.rotationRate}`;\n    }\n    return <ListGroup.Item key={index}>{content}</ListGroup.Item>;\n  });\n\n  return (\n    <div className=\"App\">\n      <Container className=\"pt-3\">\n        <Row>\n          <Col>\n            <p className=\"mb-0\">\n              回転単価：<span>{rotationUnitPrice}</span>\n            </p>\n            <p className=\"mb-0\">\n              総回転数：<span>{totalRotationNumber}</span>\n            </p>\n            <p className=\"mb-0\">\n              仕事量：<span>{getWorkAmount()}</span>\n            </p>\n\n            <Row>\n              <Button className=\"mr-1 mb-1\" variant=\"primary\" onClick={() => copyWorkRecord()}>\n                コピー\n              </Button>\n              <Button className=\"mb-1\" variant=\"primary\" onClick={() => deleteOneRotation()}>\n                1行削除\n              </Button>\n            </Row>\n\n            <FormControl\n              className=\"mb-1\"\n              id=\"rotationNumberInput\"\n              value={rotationNumberInputed}\n              onChange={changeRotationNumberInputed}\n              placeholder=\"回転数入力\"\n            />\n\n            <Row className=\"m-0 mb-2\">\n              {$numberButtons}\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => clearRotationNumberInputed()}>\n                C\n              </Button>\n              <Button variant=\"primary\" className=\"col-4\"></Button>\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => rotation()}>\n                回転\n              </Button>\n              <ShrinkNameButton variant=\"primary\" className=\"col-4\" onClick={() => continueStart()}>\n                継続スタート\n              </ShrinkNameButton>\n              <ShrinkNameButton id=\"resetStartButton\" variant=\"primary\" className=\"col-4\" onClick={() => resetStart()}>\n                リセットスタート\n              </ShrinkNameButton>\n            </Row>\n\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>ボーダー</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={border} onChange={changeBorder} />\n              </InputGroup>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>店名</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control as=\"select\" value={storeName} onChange={changeStoreNamesSelect} ref={selectStoreRef}>\n                  {$storeNames}\n                </Form.Control>\n              </InputGroup>\n            </Row>\n            <Row>\n              <div className=\"mr-2\">交換率:</div>\n              <div>{exchangeRate}</div>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>機種名</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={machineName} onChange={changeMachineName} />\n              </InputGroup>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>確認用玉数</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={ballNumberComfirm} onChange={changeBallNumberComfirm} type=\"number\" />\n              </InputGroup>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>備考</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control as=\"textarea\" rows={2} value={remarks} onChange={changeRemarks} />\n              </InputGroup>\n            </Row>\n            <Row>\n              <Button className=\"mt-5\" variant=\"primary\" onClick={() => writeWorkRecordToSpreadsheet()}>\n                シート書込\n              </Button>\n            </Row>\n\n            <Row>\n              <Button className=\"allDeteleBtn\" variant=\"primary\" onClick={() => deleteAllRotation()}>\n                全行削除\n              </Button>\n            </Row>\n          </Col>\n          <Col>\n            <ListGroup className=\"rotationList\" ref={rotationListRef}>\n              {$rotations}\n            </ListGroup>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}