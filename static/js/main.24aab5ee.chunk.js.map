{"version":3,"sources":["utils/number.tsx","App.tsx","index.tsx"],"names":["getdoubleDigestNumber","number","slice","ShrinkNameButton","styled","Button","App","useState","rotationNumberInputed","setRotationNumberInputed","rotations","setRotations","rotationRate","setRotationRate","investmentCnt","setInvestmentCnt","totalRotationNumber","setTotalRotationNumber","border","setBorder","exchangeRate","setExchangeRate","rotationListRef","useRef","rotationType","$numberButtons","map","variant","className","onClick","$rotations","rotation","index","content","type","rotationNumber","rotationRateMostRecent","ListGroup","Item","clearRotationNumberInputed","_getWorkAmount","rotationUnitPrice","toFixed","useEffect","investmentCntGettedFromLocalStorage","localStorage","getItem","rotationsGettedFromLocalStorage","rotationsParsed","JSON","parse","rotationRateCalculatted","length","calcRotationRateFromRotations","rotationNumberTotalCalculatted","totalRotationNumberCalculatted","forEach","idx","calcTotalRotationNumberFromRotations","Number","current","scrollTop","setItem","stringify","useMemo","investmentCntNow","magnificationForExchangeRate","rotationNumberLast","rotationNumberInputedClone","String","numberOfHundreds","lastTwoDigits","rotationNumberDiffFromLast","totalRotationNumberNow","rotationRateNow","concat","alert","setClipboard","text","dateNowFormated","format","Date","getRotationsTextForCopyToClickboard","navigator","clipboard","writeText","resetStart","Container","Row","Col","rotationsLength","lastRotation","rotationsDeleted","filter","rotationNumberDiffShouldSub","deleteOneRotation","FormControl","id","value","onChange","event","target","placeholder","InputGroup","size","Prepend","Text","ref","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.24aab5ee.chunk.js","sourcesContent":["export const getdoubleDigestNumber = (number: number) => {\n  return (\"0\" + number).slice(-2);\n};\n","import React, { useState, useRef, useEffect, useMemo } from \"react\";\nimport styled from \"styled-components\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, FormControl, Button, ListGroup, InputGroup } from \"react-bootstrap\";\nimport { format } from \"date-fns\";\n\nimport { getdoubleDigestNumber } from \"./utils/number\";\n\nconst ShrinkNameButton = styled(Button)`\n  font-size: 0.4rem;\n`;\n\nconst EXCHANGE_RATE_BASE = 4;\n\ntype RotationType = {\n  type: string;\n  rotationNumber: number;\n  rotationRateMostRecent: number;\n  rotationRate: number;\n};\n\nfunction App() {\n  const [rotationNumberInputed, setRotationNumberInputed] = useState<string>(\"\");\n  const [rotations, setRotations] = useState<RotationType[]>([]);\n  const [rotationRate, setRotationRate] = useState(0);\n  const [investmentCnt, setInvestmentCnt] = useState(0);\n  const [totalRotationNumber, setTotalRotationNumber] = useState(0);\n  const [border, setBorder] = useState<string>(\"18.0\");\n  const [exchangeRate, setExchangeRate] = useState<string>(\"4\");\n\n  const rotationListRef = useRef<HTMLDivElement>(null);\n\n  const replenishmentAmount = 500;\n  const ratioOfReplenishmentAmountToThousandYen = 1000 / replenishmentAmount;\n\n  const rotationType = {\n    normal: \"normal\",\n    continueStart: \"continueStart\",\n    resetStart: \"resetStart\",\n  };\n\n  const $numberButtons = [\"7\", \"8\", \"9\", \"4\", \"5\", \"6\", \"1\", \"2\", \"3\", \"0\"].map((number) => (\n    <Button key={number} variant=\"primary\" className=\"col-4\" onClick={() => setRotationNumberInputed(rotationNumberInputed + number)}>\n      {number}\n    </Button>\n  ));\n\n  const $rotations = rotations.map((rotation, index) => {\n    let content = \"\";\n    if (rotation.type === rotationType.resetStart) {\n      content = `${rotation.rotationNumber} --start--`;\n    } else if (rotation.type === rotationType.continueStart) {\n      content = `${rotation.rotationNumber} > start`;\n    } else if (rotation.type === rotationType.normal) {\n      content = `${rotation.rotationNumber} ${rotation.rotationRateMostRecent} ${rotation.rotationRate}`;\n    }\n    return <ListGroup.Item key={index}>{content}</ListGroup.Item>;\n  });\n\n  // 初回描画時に実行\n  useEffect(() => {\n    // ローカルストレージに「回転配列」があるか確認\n    const investmentCntGettedFromLocalStorage = localStorage.getItem(\"investmentCnt\");\n    const rotationsGettedFromLocalStorage = localStorage.getItem(\"rotations\");\n    if (investmentCntGettedFromLocalStorage === null) return;\n    if (rotationsGettedFromLocalStorage === null) return;\n\n    const rotationsParsed = JSON.parse(rotationsGettedFromLocalStorage);\n\n    // 存在する場合\n    // 回転配列から回転率と総回転数を求める\n\n    const rotationRateCalculatted = calcRotationRateFromRotations(rotationsParsed);\n    const rotationNumberTotalCalculatted = calcTotalRotationNumberFromRotations(rotationsParsed);\n\n    setRotationRate(rotationRateCalculatted);\n    setTotalRotationNumber(rotationNumberTotalCalculatted);\n    setInvestmentCnt(Number(investmentCntGettedFromLocalStorage));\n    setRotations(rotationsParsed);\n  }, []);\n\n  useEffect(() => {\n    (rotationListRef as any).current.scrollTop = 700;\n    localStorage.setItem(\"rotations\", JSON.stringify(rotations));\n  }, [rotations]);\n\n  useEffect(() => {\n    localStorage.setItem(\"investmentCnt\", \"\" + investmentCnt);\n  }, [investmentCnt]);\n\n  function isResetStarted() {\n    return rotations.length > 0 && rotations[0].type === rotationType.resetStart;\n  }\n\n  // change系\n  function changeBorder(event: React.ChangeEvent<HTMLInputElement>) {\n    setBorder(event.target.value);\n  }\n\n  function changeExchangeRate(event: React.ChangeEvent<HTMLInputElement>) {\n    setExchangeRate(event.target.value);\n  }\n\n  function changeRotationNumberInputed(event: React.ChangeEvent<HTMLInputElement>) {\n    setRotationNumberInputed(event.target.value);\n  }\n\n  function _isResetStarted() {\n    return rotations.length !== 0 && rotations[0].type === rotationType.resetStart;\n  }\n\n  function clearRotationNumberInputed() {\n    setRotationNumberInputed(\"\");\n  }\n\n  function _getWorkAmount() {\n    return (rotationUnitPrice * totalRotationNumber).toFixed(0);\n  }\n\n  const rotationUnitPrice = useMemo<number>(() => {\n    if (rotationRate === 0) return 0;\n    return Number((1000 / Number(border) - 1000 / rotationRate).toFixed(1));\n  }, [border, rotationRate]);\n\n  //　回転配列を1行削除する。\n  function deleteOneRotation() {\n    const rotationsLength = rotations.length;\n\n    if (rotationsLength === 0) return;\n\n    // 投資回数の調整\n    const lastRotation = rotations[rotations.length - 1];\n    if (lastRotation.type === rotationType.normal) {\n      setInvestmentCnt(investmentCnt - 1);\n    }\n\n    const rotationsDeleted = rotations.filter((rotation, index) => {\n      return index !== rotationsLength - 1;\n    });\n\n    // 回転率の更新\n    // 長さが1の時、必ずリセットスタートなので、回転率は0に設定してあります。\n    if (rotationsDeleted.length === 1 || rotationsDeleted.length === 0) {\n      setRotationRate(0);\n    } else {\n      setRotationRate(rotationsDeleted[rotationsDeleted.length - 1].rotationRate);\n    }\n\n    // 総回転数の更新\n    if (lastRotation.type === rotationType.normal && rotationsDeleted.length > 0) {\n      const rotationNumberDiffShouldSub =\n        rotations[rotations.length - 1].rotationNumber - rotationsDeleted[rotationsDeleted.length - 1].rotationNumber;\n      setTotalRotationNumber(totalRotationNumber - rotationNumberDiffShouldSub);\n    }\n\n    setRotations(rotationsDeleted);\n  }\n\n  function calcRotationRateFromRotations(rotations: RotationType[]) {\n    if (rotations.length === 0) return 0;\n    return rotations[rotations.length - 1].rotationRate;\n  }\n\n  // 回転配列から総回転数を求める。\n  function calcTotalRotationNumberFromRotations(rotations: RotationType[]) {\n    let totalRotationNumberCalculatted = 0;\n    rotations.forEach((rotation, idx) => {\n      if (rotation.type === rotationType.resetStart || rotation.type === rotationType.continueStart) return;\n      totalRotationNumberCalculatted += rotation.rotationNumber - rotations[idx - 1].rotationNumber;\n    });\n    return totalRotationNumberCalculatted;\n  }\n\n  function rotation() {\n    if (_isResetStarted() === false) {\n      alert(`リセットスタートをしましょう`);\n      return;\n    }\n\n    const investmentCntNow = investmentCnt + 1;\n    setInvestmentCnt(investmentCntNow);\n    const magnificationForExchangeRate: number = Number(exchangeRate) / EXCHANGE_RATE_BASE;\n\n    const rotationNumberLast = rotations[rotations.length - 1].rotationNumber;\n\n    let rotationNumberInputedClone = rotationNumberInputed;\n\n    // 入力された回転数が3桁未満の場合かつ前回の回転数が3桁のとき\n    if (rotationNumberInputedClone.length < 3 && String(rotations[rotations.length - 1].rotationNumber).length === 3) {\n      // 前回の回転数を百の位の数とそれ以外に分ける\n      const numberOfHundreds = String(rotations[rotations.length - 1].rotationNumber).slice(0, 1);\n      const lastTwoDigits = String(rotations[rotations.length - 1].rotationNumber).slice(1, 3);\n      // 下2桁よりも回転数が大きければ、百の位の数+回転数としたものを回転数とする。\n      if (Number(rotationNumberInputedClone) > Number(lastTwoDigits)) {\n        rotationNumberInputedClone = numberOfHundreds + getdoubleDigestNumber(Number(rotationNumberInputedClone));\n      } else {\n        rotationNumberInputedClone = String(Number(numberOfHundreds) + 1) + getdoubleDigestNumber(Number(rotationNumberInputedClone));\n      }\n    }\n\n    const rotationNumberDiffFromLast = Number(rotationNumberInputedClone) - rotationNumberLast;\n    const rotationRateMostRecent = Number(\n      (rotationNumberDiffFromLast * ratioOfReplenishmentAmountToThousandYen * magnificationForExchangeRate).toFixed(1)\n    );\n\n    const totalRotationNumberNow = totalRotationNumber + rotationNumberDiffFromLast;\n    setTotalRotationNumber(totalRotationNumberNow);\n\n    const ratioOfTotalInvestmentAmountToThousandYen = 1000 / (replenishmentAmount * investmentCntNow);\n    const rotationRateNow = Number((totalRotationNumberNow * ratioOfTotalInvestmentAmountToThousandYen * magnificationForExchangeRate).toFixed(1));\n    setRotationRate(rotationRateNow);\n\n    setRotations(\n      rotations.concat({\n        type: rotationType.normal,\n        rotationNumber: Number(rotationNumberInputedClone),\n        rotationRateMostRecent,\n        rotationRate: rotationRateNow,\n      })\n    );\n    clearRotationNumberInputed();\n  }\n\n  function continueStart() {\n    if (rotationNumberInputed === \"\") {\n      alert(`回転数を入力しましょう`);\n      return;\n    }\n\n    setRotations(\n      rotations.concat({\n        type: rotationType.continueStart,\n        rotationNumber: Number(rotationNumberInputed),\n        rotationRateMostRecent: 0,\n        rotationRate,\n      })\n    );\n\n    clearRotationNumberInputed();\n  }\n\n  function getRotationsTextForCopyToClickboard() {\n    const dateNowFormated = format(new Date(), \"yyyy/MM/dd HH:mm\");\n    const text = `${dateNowFormated}\n回転率：${rotationRate}, 仕事量：${rotationUnitPrice}円×${totalRotationNumber}回(${_getWorkAmount()}円)`;\n    return text;\n  }\n\n  function setClipboard() {\n    const text = getRotationsTextForCopyToClickboard();\n    navigator.clipboard.writeText(text);\n  }\n\n  function resetStart() {\n    if (isResetStarted()) {\n      alert(\"既にリセットスタートされています\");\n      return;\n    }\n    if (rotationNumberInputed === \"\") {\n      alert(`回転数を入力しましょう`);\n      return;\n    }\n    setRotations(\n      rotations.concat({\n        type: rotationType.resetStart,\n        rotationNumber: Number(rotationNumberInputed),\n        rotationRateMostRecent: 0,\n        rotationRate: 0,\n      })\n    );\n\n    clearRotationNumberInputed();\n  }\n\n  return (\n    <div className=\"App\">\n      <Container className=\"pt-3\">\n        <Row>\n          <Col>\n            <p className=\"mb-0\">\n              回転単価：<span>{rotationUnitPrice}</span>\n            </p>\n            <p className=\"mb-0\">\n              総回転数：<span>{totalRotationNumber}</span>\n            </p>\n            <p className=\"mb-0\">\n              仕事量：<span>{_getWorkAmount()}</span>\n            </p>\n\n            <Row>\n              <Button className=\"mr-1 mb-1\" variant=\"primary\" onClick={() => setClipboard()}>\n                コピー\n              </Button>\n              <Button className=\"mb-1\" variant=\"primary\" onClick={() => deleteOneRotation()}>\n                1行削除\n              </Button>\n            </Row>\n\n            <FormControl\n              className=\"mb-1\"\n              id=\"rotationNumberInput\"\n              value={rotationNumberInputed}\n              onChange={changeRotationNumberInputed}\n              placeholder=\"回転数入力\"\n            />\n\n            <Row className=\"m-0 mb-2\">\n              {$numberButtons}\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => clearRotationNumberInputed()}>\n                C\n              </Button>\n              <Button variant=\"primary\" className=\"col-4\"></Button>\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => rotation()}>\n                回転\n              </Button>\n              <ShrinkNameButton variant=\"primary\" className=\"col-4\" onClick={() => continueStart()}>\n                継続スタート\n              </ShrinkNameButton>\n              <ShrinkNameButton id=\"resetStartButton\" variant=\"primary\" className=\"col-4\" onClick={() => resetStart()}>\n                リセットスタート\n              </ShrinkNameButton>\n            </Row>\n\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>ボーダー</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={border} onChange={changeBorder} />\n              </InputGroup>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>交換率</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={exchangeRate} onChange={changeExchangeRate} />\n              </InputGroup>\n            </Row>\n\n            {/* <Row>\n              <Button className=\"mb-1\" variant=\"primary\" onClick={() => deleteAllRotation()}>\n                全行削除\n              </Button>\n            </Row> */}\n          </Col>\n          <Col>\n            <ListGroup className=\"rotationList\" ref={rotationListRef}>\n              {$rotations}\n            </ListGroup>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}