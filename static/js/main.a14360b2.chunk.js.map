{"version":3,"sources":["constants/main.tsx","components/NumberButtons.tsx","components/Rotations.tsx","components/StoreNames.tsx","App.tsx","functions/rotationSystem.tsx","index.tsx"],"names":["ROTATION_MODE","ERROR_MSG","NumberButtons","props","map","number","Button","variant","className","onClick","setRotationNumberInputed","rotationNumberInputed","Rotations","rotations","rotation","index","content","type","rotationNumber","rotationRateMostRecent","rotationRate","ListGroup","Item","StoreNames","$doms","value","disabled","hidden","$storeNames","storeNames","store","$domsConcated","axios","require","default","ShrinkNameButton","styled","App","useState","setRotations","setRotationRate","investmentCnt","setInvestmentCnt","rotationNumberTotal","setRotationNumberTotal","border","setBorder","setStoreNames","storeName","setStoreName","machineName","setMachineName","ballNumberComfirm","setBallNumberComfirm","remarks","setRemarks","Map","storeNamesExchangeRatesMap","setStoreNamesExchangeRatesMap","exchangeRate","setExchangeRate","rotationListRef","useRef","selectStoreRef","document","createElement","useEffect","storeNamesInit","set","initStoreNamesExchangeRates","investmentCntLocal","localStorage","getItem","rotationsParsed","JSON","parse","storeNameLocal","machineNameLocal","ballNumberComfirmLocal","borderLocal","remarksLocal","Number","length","calcRotationRate","totalRotationNumberCalculatted","forEach","idx","calcRotationNumberTotal","current","scrollTop","scrollHeight","setItem","stringify","storeExchangeRate","get","rotationUnitPrice","useMemo","toFixed","isResetStarted","clearRotationNumberInputed","getWorkAmount","getBallNumberOnePush","deleteAllRotation","window","confirm","getRotationNumberByShortInputIfNeeded","rotationNumberInputedClone","String","convertToThreeDigits","slice","Container","Row","Col","rotationsLength","lastRotation","rotationsDeleted","filter","rotationNumberDiffShouldSub","deleteOneRotation","FormControl","id","onChange","event","target","placeholder","investmentCntNow","rotationNumberDiffFromLast","exchangeRateRatio","rotationNumberTotalNow","rotationRateNow","concat","error","alert","continueStart","format","Date","resetStart","InputGroup","size","Prepend","Text","Form","Control","as","ref","rows","remarksInputed","now","dateFormattedStart","timeFormattedStart","timeFormattedNow","params","URLSearchParams","append","post","then","response","catch","writeWorkResultAndDeleteAllRotation","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a14360b2.chunk.js","sourcesContent":["import { TypeErrorMsg } from \"../types\";\n\n// TITLES\nexport const SELECT_STORE_TITLE: string = \"店名を選択して下さい。\";\n// 通常の交換率\nexport const EXCHANGE_RATE_NORMAL: number = 4;\n// ワンプッシュ当たりの金額\nexport const AMOUNT_ONE_PUSH = 500;\n// スプレッドシートREST_URL\nexport const REST_URL_SPREADSHEET = \"https://script.google.com/macros/s/AKfycbwAEFQ6VWnrJ67EjQiYd8WeEv0D2ogBpV2GYDgxucx9C5gf1Dmd/exec\";\nexport const REPLENISHMENT_AMOUNT = 500;\n// 直近の回転率計算に用いる。\nexport const REPLENISHMENT_AMOUNT_RATIO = 1000 / REPLENISHMENT_AMOUNT;\n\nexport const ROTATION_MODE: { [key: string]: string } = {\n  normal: \"normal\",\n  continueStart: \"continueStart\",\n  resetStart: \"resetStart\",\n};\n\nexport const ERROR_MSG: TypeErrorMsg = {\n  resetStart: \"リセットスタートをしましょう\",\n  resetStartedAlready: \"既にリセットスタートされています\",\n  rotaionNumberEmpty: \"回転数を入力しましょう\",\n  selectStore: \"店名を選択して下さい。\",\n};\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nexport function NumberButtons(props: { setRotationNumberInputed: Function; rotationNumberInputed: string }) {\n  const numbers = [\"7\", \"8\", \"9\", \"4\", \"5\", \"6\", \"1\", \"2\", \"3\", \"0\"];\n  return (\n    <>\n      {numbers.map((number) => (\n        <Button key={number} variant=\"primary\" className=\"col-4\" onClick={() => props.setRotationNumberInputed(props.rotationNumberInputed + number)}>\n          {number}\n        </Button>\n      ))}\n    </>\n  );\n}\n","import React from \"react\";\nimport { TypeRotation } from \"../types\";\nimport { ROTATION_MODE } from \"../constants/main\";\nimport { ListGroup } from \"react-bootstrap\";\n\nexport function Rotations(props: { rotations: TypeRotation[] }) {\n  return (\n    <>\n      {props.rotations.map((rotation, index) => {\n        let content = \"\";\n        if (rotation.type === ROTATION_MODE.resetStart) {\n          content = `${rotation.rotationNumber} --start--`;\n        } else if (rotation.type === ROTATION_MODE.continueStart) {\n          content = `${rotation.rotationNumber} > start`;\n        } else if (rotation.type === ROTATION_MODE.normal) {\n          content = `${rotation.rotationNumber} ${rotation.rotationRateMostRecent} ${rotation.rotationRate}`;\n        }\n        return <ListGroup.Item key={index}>{content}</ListGroup.Item>;\n      })}\n    </>\n  );\n}\n","import React from \"react\";\nimport { TypeStoreName } from \"../types\";\nimport { SELECT_STORE_TITLE } from \"../constants/main\";\n\nexport function StoreNames(props: { storeNames: TypeStoreName[] }) {\n  const $doms = [\n    <option key={\"defaultValue\"} value=\"\" disabled hidden>\n      {SELECT_STORE_TITLE}\n    </option>,\n  ];\n  const $storeNames = props.storeNames.map((store: TypeStoreName) => {\n    return (\n      <option key={store} value={store}>\n        {store}\n      </option>\n    );\n  });\n\n  const $domsConcated = [$doms, ...$storeNames];\n\n  return <>{$domsConcated}</>;\n}\n","import React, { useState, useRef, useEffect, useMemo } from \"react\";\nimport styled from \"styled-components\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, FormControl, Form, Button, ListGroup, InputGroup } from \"react-bootstrap\";\nimport { format } from \"date-fns\";\n// 型定義インポート\nimport { TypeRotation, TypeStoreName } from \"./types\";\n// 定数定義インポート\nimport {\n  SELECT_STORE_TITLE,\n  EXCHANGE_RATE_NORMAL,\n  AMOUNT_ONE_PUSH,\n  REST_URL_SPREADSHEET,\n  REPLENISHMENT_AMOUNT,\n  REPLENISHMENT_AMOUNT_RATIO,\n  ROTATION_MODE,\n  ERROR_MSG,\n} from \"./constants/main\";\n\nimport { NumberButtons } from \"./components/NumberButtons\";\nimport { Rotations } from \"./components/Rotations\";\nimport { StoreNames } from \"./components/StoreNames\";\n\nimport { continueStart } from \"./functions/rotationSystem\";\n\nconst axios = require(\"axios\").default;\n\nconst ShrinkNameButton = styled(Button)`\n  font-size: 0.4rem;\n`;\n\nfunction App() {\n  // useState定義\n  const [rotationNumberInputed, setRotationNumberInputed] = useState<string>(\"\");\n  const [rotations, setRotations] = useState<TypeRotation[]>([]);\n  const [rotationRate, setRotationRate] = useState(0);\n  const [investmentCnt, setInvestmentCnt] = useState(0);\n  const [rotationNumberTotal, setRotationNumberTotal] = useState(0);\n  const [border, setBorder] = useState<string>(\"18.0\");\n  const [storeNames, setStoreNames] = useState<TypeStoreName[]>([]);\n  const [storeName, setStoreName] = useState(\"\");\n  const [machineName, setMachineName] = useState(\"\");\n  const [ballNumberComfirm, setBallNumberComfirm] = useState(\"\");\n  const [remarks, setRemarks] = useState(\"\");\n  const [storeNamesExchangeRatesMap, setStoreNamesExchangeRatesMap] = useState(new Map());\n  const [exchangeRate, setExchangeRate] = useState<string>(\"\");\n  // useRef定義\n  const rotationListRef = useRef<HTMLDivElement>(null);\n  const selectStoreRef = useRef<HTMLSelectElement>(document.createElement(\"select\"));\n\n  // 初期値として、「店名と交換率」をそれぞれ設定する。\n  const initStoreNamesExchangeRates = () => {\n    const storeNamesInit = [\"DoruNakano\", \"LiNakano\", \"NtNakano\"];\n    setStoreNames(storeNamesInit);\n    setStoreNamesExchangeRatesMap(storeNamesExchangeRatesMap.set(storeNamesInit[0], 4.38));\n    setStoreNamesExchangeRatesMap(storeNamesExchangeRatesMap.set(storeNamesInit[1], 4));\n    setStoreNamesExchangeRatesMap(storeNamesExchangeRatesMap.set(storeNamesInit[2], 4));\n  };\n\n  // 初回描画時に実行\n  useEffect(() => {\n    // 初期値として、それぞれの「店名と交換率」を設定する。\n    initStoreNamesExchangeRates();\n\n    // ローカルストレージから各値を取得。\n    const investmentCntLocal: string = localStorage.getItem(\"investmentCnt\") || \"0\";\n    const rotationsParsed: TypeRotation[] = JSON.parse(localStorage.getItem(\"rotations\") || \"[]\");\n    const storeNameLocal: string = localStorage.getItem(\"storeName\") || \"\";\n    const machineNameLocal: string = localStorage.getItem(\"machineName\") || \"\";\n    const ballNumberComfirmLocal: string = localStorage.getItem(\"ballNumberComfirm\") || \"\";\n    const borderLocal: string = localStorage.getItem(\"border\") || \"\";\n    const remarksLocal: string = localStorage.getItem(\"remarks\") || \"\";\n\n    setInvestmentCnt(Number(investmentCntLocal));\n    setStoreName(storeNameLocal);\n    setRotations(rotationsParsed);\n    setMachineName(machineNameLocal);\n    setBallNumberComfirm(ballNumberComfirmLocal);\n    setBorder(borderLocal);\n    setRemarks(remarksLocal);\n    setRotationRate(calcRotationRate(rotationsParsed));\n    setRotationNumberTotal(calcRotationNumberTotal(rotationsParsed));\n  }, []);\n\n  useEffect(() => {\n    (rotationListRef as any).current.scrollTop = (rotationListRef as any).current.scrollHeight;\n    localStorage.setItem(\"rotations\", JSON.stringify(rotations));\n  }, [rotations]);\n\n  useEffect(() => {\n    localStorage.setItem(\"investmentCnt\", \"\" + investmentCnt);\n  }, [investmentCnt]);\n\n  useEffect(() => {\n    localStorage.setItem(\"border\", border);\n  }, [border]);\n\n  useEffect(() => {\n    localStorage.setItem(\"ballNumberComfirm\", ballNumberComfirm);\n  }, [ballNumberComfirm]);\n\n  useEffect(() => {\n    localStorage.setItem(\"remarks\", remarks);\n  }, [remarks]);\n\n  useEffect(() => {\n    // 選択肢の店名が変更されたら、対応した交換率へ変更する。\n    const storeExchangeRate = storeNamesExchangeRatesMap.get(storeName);\n    setExchangeRate(storeExchangeRate);\n\n    localStorage.setItem(\"storeName\", storeName);\n  }, [storeName]);\n\n  // ■useMemo系\n  // 「回転単価」が「ボーダーまたは回転率」に対する「導出項目」のため。\n  const rotationUnitPrice = useMemo<number>(() => {\n    if (rotationRate === 0) return 0;\n    return Number((1000 / Number(border) - 1000 / rotationRate).toFixed(1));\n  }, [border, rotationRate]);\n\n  // ■change系\n  function changeStoreNamesSelect(event: React.ChangeEvent<HTMLInputElement>) {\n    setStoreName(event.target.value);\n  }\n\n  function changeBorder(event: React.ChangeEvent<HTMLInputElement>) {\n    setBorder(event.target.value);\n  }\n\n  // 機種名の変更\n  function changeMachineName(event: React.ChangeEvent<HTMLInputElement>) {\n    const machineName = event.target.value;\n    setMachineName(machineName);\n    localStorage.setItem(\"machineName\", machineName);\n  }\n\n  // 備考の変更\n  function changeRemarks(event: React.ChangeEvent<HTMLInputElement>) {\n    const remarksInputed = event.target.value;\n    setRemarks(remarksInputed);\n  }\n\n  // 回転数入力ミス防止用玉数の変更\n  function changeBallNumberComfirm(event: React.ChangeEvent<HTMLInputElement>) {\n    const ballNumberComfirm = event.target.value;\n    setBallNumberComfirm(ballNumberComfirm);\n  }\n\n  function changeRotationNumberInputed(event: React.ChangeEvent<HTMLInputElement>) {\n    setRotationNumberInputed(event.target.value);\n  }\n\n  // ■通常関数定義\n  function isResetStarted() {\n    return rotations.length > 0 && rotations[0].type === ROTATION_MODE.resetStart;\n  }\n\n  function clearRotationNumberInputed() {\n    setRotationNumberInputed(\"\");\n  }\n\n  function getWorkAmount() {\n    return (rotationUnitPrice * rotationNumberTotal).toFixed(0);\n  }\n\n  // 一回の貸出ボタン玉数\n  function getBallNumberOnePush(storeName: string): number {\n    const storeExchangeRate: number = storeNamesExchangeRatesMap.get(storeName);\n    return Number((AMOUNT_ONE_PUSH / storeExchangeRate).toFixed());\n  }\n\n  //　回転配列を1行削除する。\n  function deleteOneRotation() {\n    const rotationsLength = rotations.length;\n\n    if (rotationsLength === 0) return;\n\n    // 投資回数の調整\n    const lastRotation = rotations[rotations.length - 1];\n    if (lastRotation.type === ROTATION_MODE.normal) {\n      setInvestmentCnt(investmentCnt - 1);\n    }\n\n    const rotationsDeleted = rotations.filter((rotation, index) => {\n      return index !== rotationsLength - 1;\n    });\n\n    // 回転率の更新\n    // 長さが1の時、必ずリセットスタートなので、回転率は0に設定してあります。\n    if (rotationsDeleted.length === 1 || rotationsDeleted.length === 0) {\n      setRotationRate(0);\n    } else {\n      setRotationRate(rotationsDeleted[rotationsDeleted.length - 1].rotationRate);\n    }\n\n    // 総回転数の更新\n    if (lastRotation.type === ROTATION_MODE.normal && rotationsDeleted.length > 0) {\n      const rotationNumberDiffShouldSub =\n        rotations[rotations.length - 1].rotationNumber - rotationsDeleted[rotationsDeleted.length - 1].rotationNumber;\n      setRotationNumberTotal(rotationNumberTotal - rotationNumberDiffShouldSub);\n    }\n\n    setRotations(rotationsDeleted);\n\n    // 確認用玉数を計算\n    setBallNumberComfirm(String(Number(ballNumberComfirm) + getBallNumberOnePush(storeName)));\n  }\n\n  // 画面の初期読込時に使用\n  function calcRotationNumberTotal(rotations: TypeRotation[]) {\n    let totalRotationNumberCalculatted = 0;\n    rotations.forEach((rotation, idx) => {\n      if (rotation.type === ROTATION_MODE.resetStart || rotation.type === ROTATION_MODE.continueStart) return;\n      totalRotationNumberCalculatted += rotation.rotationNumber - rotations[idx - 1].rotationNumber;\n    });\n    return totalRotationNumberCalculatted;\n  }\n\n  // 画面の初期読込時に使用\n  function calcRotationRate(rotations: TypeRotation[]) {\n    if (rotations.length === 0) return 0;\n    return rotations[rotations.length - 1].rotationRate;\n  }\n\n  function deleteAllRotation() {\n    if (window.confirm(\"全行削除してもいいですか？\")) {\n      setRotations([]);\n      setRotationRate(0);\n      setInvestmentCnt(0);\n      setRotationNumberTotal(0);\n    }\n  }\n\n  // 最後の結果書込処理（全行削除も行う）\n  function writeWorkResultAndDeleteAllRotation() {\n    const now = new Date();\n    const dateFormattedStart = format(now, \"yyyy/MM/dd\");\n    const timeFormattedStart = localStorage.getItem(\"startTime\");\n    const timeFormattedNow = format(now, \"HH:mm\");\n\n    const params = new URLSearchParams();\n    params.append(\"date\", `${dateFormattedStart} ${timeFormattedStart}〜${timeFormattedNow}`);\n    params.append(\"border\", `ボーダー：${border}`);\n    params.append(\"rotationRate\", `回転率：${rotationRate}`);\n    params.append(\"rotationUnitPrice\", `回転単価：${rotationUnitPrice}`);\n    params.append(\"rotationNumberTotal\", `総回転数：${rotationNumberTotal}`);\n    params.append(\"workAmount\", `${getWorkAmount()}`);\n    params.append(\"machineName\", `${machineName}`);\n    params.append(\"storeName\", `${storeName}`);\n    params.append(\"remarks\", `${remarks}`);\n\n    axios\n      .post(REST_URL_SPREADSHEET, params)\n      .then(function (response: any) {\n        alert(\"書込が成功しました。\");\n        deleteAllRotation();\n      })\n      .catch(function (error: any) {\n        alert(error);\n      });\n  }\n\n  // 回転数の短縮入力の判別\n  function shouldShortInput() {\n    return String(rotationNumberInputed).length < 3 && String(rotations[rotations.length - 1].rotationNumber).length > 1;\n  }\n\n  // 回転数の短縮入力：ひとまず回転数が3桁以下の場合のみ対応\n  function getRotationNumberByShortInputIfNeeded(): number {\n    let rotationNumberInputedClone: number = Number(rotationNumberInputed);\n    if (shouldShortInput()) {\n      const convertToThreeDigits: string = (\"000\" + rotations[rotations.length - 1].rotationNumber).slice(-3);\n      const lastTwoDigits: number = Number(String(rotations[rotations.length - 1].rotationNumber).slice(1, 3));\n      const baseNumberOfHundreds: number =\n        rotationNumberInputedClone > lastTwoDigits ? Number(convertToThreeDigits[0]) : Number(convertToThreeDigits[0]) + 1;\n\n      const baseNumber: number = baseNumberOfHundreds * 100;\n      rotationNumberInputedClone += baseNumber;\n    }\n\n    return rotationNumberInputedClone;\n  }\n\n  // 通常回転（回転ボタン押下時の処理）\n  function rotation() {\n    try {\n      if (isResetStarted() === false) {\n        throw ERROR_MSG.resetStart;\n      }\n\n      // 投資回数の計算\n      const investmentCntNow = investmentCnt + 1;\n      // 必要であれば短縮入力を効かせる。\n      const rotationNumberInputedClone = getRotationNumberByShortInputIfNeeded();\n      const rotationNumberDiffFromLast = Number(rotationNumberInputedClone) - rotations[rotations.length - 1].rotationNumber;\n      //　交換率の比：通常交換率'4'と実交換率の比。回転率計算に用いる。\n      const exchangeRateRatio: number = Number(exchangeRate) / EXCHANGE_RATE_NORMAL;\n      const rotationRateMostRecent = Number((rotationNumberDiffFromLast * REPLENISHMENT_AMOUNT_RATIO * exchangeRateRatio).toFixed(1));\n\n      const rotationNumberTotalNow = rotationNumberTotal + rotationNumberDiffFromLast;\n\n      // 投資金額の比（todo:もう少し分かりやすく出来るかも？）\n      const investmentAmountRatio = 1000 / (REPLENISHMENT_AMOUNT * investmentCntNow);\n      const rotationRateNow = Number((rotationNumberTotalNow * investmentAmountRatio * exchangeRateRatio).toFixed(1));\n\n      clearRotationNumberInputed();\n\n      // 各種set\n      setInvestmentCnt(investmentCntNow);\n      setRotationNumberTotal(rotationNumberTotalNow);\n      setRotationRate(rotationRateNow);\n      setRotations(\n        rotations.concat({\n          type: ROTATION_MODE.normal,\n          rotationNumber: Number(rotationNumberInputedClone),\n          rotationRateMostRecent,\n          rotationRate: rotationRateNow,\n        })\n      );\n      // 確認用玉数を計算\n      setBallNumberComfirm(String(Number(ballNumberComfirm) - getBallNumberOnePush(storeName)));\n    } catch (error) {\n      alert(error);\n    }\n  }\n\n  // リセットスタート\n  function resetStart() {\n    try {\n      if (isResetStarted()) {\n        throw ERROR_MSG.resetStartedAlready;\n      }\n      if (rotationNumberInputed === \"\") {\n        throw ERROR_MSG.rotaionNumberEmpty;\n      }\n      if (selectStoreRef.current.value === \"\") {\n        throw ERROR_MSG.selectStore;\n      }\n\n      setRotations(\n        rotations.concat({\n          type: ROTATION_MODE.resetStart,\n          rotationNumber: Number(rotationNumberInputed),\n          rotationRateMostRecent: 0,\n          rotationRate: 0,\n        })\n      );\n\n      clearRotationNumberInputed();\n\n      localStorage.setItem(\"startTime\", format(new Date(), \"HH:mm\"));\n    } catch (error) {\n      alert(error);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Container className=\"pt-3\">\n        <Row>\n          <Col>\n            <p className=\"mb-0\">\n              回転単価：<span>{rotationUnitPrice}</span>\n            </p>\n            <p className=\"mb-0\">\n              総回転数：<span>{rotationNumberTotal}</span>\n            </p>\n            <p className=\"mb-0\">\n              仕事量：<span>{getWorkAmount()}</span>\n            </p>\n\n            <Row>\n              <Button className=\"mb-1\" variant=\"primary\" onClick={() => deleteOneRotation()}>\n                1行削除\n              </Button>\n            </Row>\n\n            <FormControl\n              className=\"mb-1\"\n              id=\"rotationNumberInput\"\n              value={rotationNumberInputed}\n              onChange={changeRotationNumberInputed}\n              placeholder=\"回転数入力\"\n            />\n\n            <Row className=\"m-0 mb-2\">\n              <NumberButtons setRotationNumberInputed={setRotationNumberInputed} rotationNumberInputed={rotationNumberInputed} />\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => clearRotationNumberInputed()}>\n                C\n              </Button>\n              <Button variant=\"primary\" className=\"col-4\"></Button>\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => rotation()}>\n                回転\n              </Button>\n              <ShrinkNameButton\n                variant=\"primary\"\n                className=\"col-4\"\n                onClick={() => continueStart(rotationNumberInputed, rotationRate, rotations, setRotations, clearRotationNumberInputed)}\n              >\n                継続スタート\n              </ShrinkNameButton>\n              <ShrinkNameButton id=\"resetStartButton\" variant=\"primary\" className=\"col-4\" onClick={() => resetStart()}>\n                リセットスタート\n              </ShrinkNameButton>\n            </Row>\n\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>確認用玉数</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={ballNumberComfirm} onChange={changeBallNumberComfirm} type=\"number\" />\n              </InputGroup>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>ボーダー</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={border} onChange={changeBorder} />\n              </InputGroup>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>店名</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control as=\"select\" value={storeName} onChange={changeStoreNamesSelect} ref={selectStoreRef}>\n                  <StoreNames storeNames={storeNames} />\n                </Form.Control>\n              </InputGroup>\n            </Row>\n            <Row>\n              <div className=\"mr-2\">交換率:</div>\n              <div>{exchangeRate}</div>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>機種名</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={machineName} onChange={changeMachineName} />\n              </InputGroup>\n            </Row>\n            <Row>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>備考</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control as=\"textarea\" rows={2} value={remarks} onChange={changeRemarks} />\n              </InputGroup>\n            </Row>\n            <Row>\n              <Button className=\"mt-5\" variant=\"primary\" onClick={() => writeWorkResultAndDeleteAllRotation()}>\n                表書込＆全削\n              </Button>\n            </Row>\n\n            <Row>\n              <Button className=\"allDeteleBtn\" variant=\"primary\" onClick={() => deleteAllRotation()}>\n                全行削除\n              </Button>\n            </Row>\n          </Col>\n          <Col>\n            <ListGroup className=\"rotationList\" ref={rotationListRef}>\n              <Rotations rotations={rotations} />\n            </ListGroup>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { TypeRotation } from \"../types\";\nimport { ERROR_MSG, ROTATION_MODE } from \"../constants/main\";\n\n// 継続スタート\nexport function continueStart(\n  rotationNumberInputed: string,\n  rotationRate: number,\n  rotations: TypeRotation[],\n  setRotations: Function,\n  clearRotationNumberInputed: Function\n) {\n  try {\n    if (rotationNumberInputed === \"\") {\n      throw ERROR_MSG.rotaionNumberEmpty;\n    }\n\n    setRotations(\n      rotations.concat({\n        type: ROTATION_MODE.continueStart,\n        rotationNumber: Number(rotationNumberInputed),\n        rotationRateMostRecent: 0,\n        rotationRate,\n      })\n    );\n\n    clearRotationNumberInputed();\n  } catch (error) {\n    alert(error);\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}