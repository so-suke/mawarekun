{"version":3,"sources":["App.js","index.js"],"names":["ShrinkNameButton","styled","Button","App","useState","border","setBorder","rotationNumberInputed","setRotationNumberInputed","rotations","setRotations","rotationUnitPrice","setRotationUnitPrice","rotationRate","setRotationRate","totalRotationNumber","setTotalRotationNumber","rotationType","$numberButtons","map","number","variant","className","onClick","$rotations","rotation","index","content","type","rotationNumber","rotationRateMostRecent","ListGroup","Item","clearRotationNumberInputed","useEffect","$resetStartButton","document","getElementById","setTimeout","click","_calcRotationUnitPrice","toFixed","length","rotationNumberLast","rotationNumberDiffFromLast","ratioOfTotalInvestmentAmountToThousandYen","investmentCnt","forEach","_calcInvestmentCnt","totalRotationNumberNow","rotationRateNow","concat","alert","Container","Row","Col","InputGroup","size","Prepend","Text","FormControl","value","onChange","event","target","rotationsLength","rotationsDeletedOne","filter","rotationNumberDiffShouldSub","deleteOneRotation","id","placeholder","ReactDOM","render"],"mappings":"kWAMA,IAAMA,EAAmBC,YAAOC,IAAPD,CAAH,KAqOPE,MAjOf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAG6CF,mBAAS,IAHtD,mBAGNG,EAHM,KAGiBC,EAHjB,OAIqBJ,mBAAS,IAJ9B,mBAINK,EAJM,KAIKC,EAJL,OAKqCN,mBAAS,GAL9C,mBAKNO,EALM,KAKaC,EALb,OAM2BR,mBAAS,GANpC,mBAMNS,EANM,KAMQC,EANR,OAOyCV,mBAAS,GAPlD,mBAONW,EAPM,KAOeC,EAPf,KAYPC,EACI,SADJA,EAEW,gBAFXA,EAGQ,aAGRC,EAAiB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKC,KAAI,SAACC,GAAD,OAC5E,cAAClB,EAAA,EAAD,CAAqBmB,QAAQ,UAAUC,UAAU,QAAQC,QAAS,kBAAMf,EAAyBD,EAAwBa,IAAzH,SACGA,GADUA,MAKTI,EAAaf,EAAUU,KAAI,SAACM,EAAUC,GAC1C,IAAIC,EAAU,GAQd,OAPIF,EAASG,OAASX,EACpBU,EAAO,UAAMF,EAASI,eAAf,cACEJ,EAASG,OAASX,EAC3BU,EAAO,UAAMF,EAASI,eAAf,YACEJ,EAASG,OAASX,IAC3BU,EAAO,UAAMF,EAASI,eAAf,YAAiCJ,EAASK,uBAA1C,YAAoEL,EAASZ,eAE/E,cAACkB,EAAA,EAAUC,KAAX,UAA6BL,GAARD,MAuB9B,SAASO,IACPzB,EAAyB,IArB3B0B,qBAAU,WACR1B,EAAyB,KACzB,IAAM2B,EAAoBC,SAASC,eAAe,oBAClDC,YAAW,WACTH,EAAkBI,UACjB,KACF,IAsBH,IAAMC,EAAyB,SAAC,GAAsB,IAApB3B,EAAmB,EAAnBA,aAChC,OAAqB,IAAjBA,EAA2B,GACvB,IAAOR,EAAS,IAAOQ,GAAc4B,QAAQ,IAiCvD,SAAShB,IACP,IAA0B,KA/CE,IAArBhB,EAAUiC,QAAgBjC,EAAU,GAAGmB,OAASX,GA+CvD,CAKA,IAAM0B,EAAqBlC,EAAUA,EAAUiC,OAAS,GAAGb,eAErDe,EAA6BrC,EAAwBoC,EACrDb,GAlGwC,EAkGdc,GAAsEH,QAAQ,GAGxGI,EAA4C,KAtGxB,KA+E5B,WACE,IAAIC,EAAgB,EAOpB,OANArC,EAAUsC,SAAQ,SAACtB,GACbA,EAASG,OAASX,GAEtB6B,OAGKA,EAceE,GAAuB,IAIvCC,EAD0BlC,EACyB6B,EACzD5B,EAAuBiC,GACvB,IAAMC,GAAmBD,EAAyBJ,GAA2CJ,QAAQ,GAErG3B,EAAgBoC,GAChBtC,EAAqB4B,EAAuB,CAAE3B,aAAcqC,KAE5DxC,EACED,EAAU0C,OAAO,CACfvB,KAAMX,EACNa,yBACAjB,aAAcqC,EACdrB,eAAgBtB,KAGpB0B,SA5BEmB,MAAM,wFAgEV,OACE,qBAAK9B,UAAU,MAAf,SACE,cAAC+B,EAAA,EAAD,CAAW/B,UAAU,OAArB,SACE,eAACgC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAYC,KAAK,KAAKnC,UAAU,OAAhC,UACE,cAACkC,EAAA,EAAWE,QAAZ,UACE,cAACF,EAAA,EAAWG,KAAZ,yCAEF,cAACC,EAAA,EAAD,CAAaC,MAAOxD,EAAQyD,SAlIxC,SAAsBC,GACpBzD,EAAUyD,EAAMC,OAAOH,OACvBjD,EAAqB4B,EAAuB,CAAE3B,wBAmItC,oBAAGS,UAAU,OAAb,2CACO,+BAAOX,OAEd,oBAAGW,UAAU,OAAb,2CACO,+BAAOP,OAEd,oBAAGO,UAAU,OAAb,qCACM,gCA3HNX,EAAoBI,GAAqB0B,QAAQ,QA8HjD,cAACvC,EAAA,EAAD,CAAQoB,UAAU,OAAOD,QAAQ,UAAUE,QAAS,kBAtH9D,WACE,IAAM0C,EAAkBxD,EAAUiC,OAE5BwB,EAAsBzD,EAAU0D,QAAO,SAAC1C,EAAUC,GACtD,OAAOA,IAAUuC,EAAkB,KAGrC,GAAIC,EAAoBxB,OAAS,EAAG,CAClC,IAAM0B,EACJ3D,EAAUA,EAAUiC,OAAS,GAAGb,eAAiBqC,EAAoBA,EAAoBxB,OAAS,GAAGb,eACvGb,EAAuBD,EAAsBqD,GAC7C,IAAMlB,EAAkBgB,EAAoBA,EAAoBxB,OAAS,GAAG7B,aAC5EC,EAAgBoC,GAChBtC,EAAqB4B,EAAuB,CAAE3B,aAAcqC,KAG9DxC,EAAawD,GAsGqDG,IAA1D,iCAIA,cAACT,EAAA,EAAD,CACEtC,UAAU,OACVgD,GAAG,sBACHT,MAAOtD,EACPuD,SAnJZ,SAAqCC,GACnCvD,EAAyBuD,EAAMC,OAAOH,QAmJ5BU,YAAY,mCAGd,eAACjB,EAAA,EAAD,CAAKhC,UAAU,MAAf,UACGJ,EACD,cAAChB,EAAA,EAAD,CAAQmB,QAAQ,UAAUC,UAAU,QAAQC,QAAS,kBAAMU,KAA3D,eAGA,cAAC/B,EAAA,EAAD,CAAQmB,QAAQ,UAAUC,UAAU,UACpC,cAACpB,EAAA,EAAD,CAAQmB,QAAQ,UAAUC,UAAU,QAAQC,QAAS,kBAAME,KAA3D,0BAGA,cAACzB,EAAD,CAAkBqB,QAAQ,UAAUC,UAAU,QAAQC,QAAS,WA3E3C,KAA1BhB,GAKJG,EACED,EAAU0C,OAAO,CACfvB,KAAMX,EACNJ,eACAgB,eAAgBtB,KAIpB0B,KAZEmB,MAAM,uEA0EE,kDAGA,cAACpD,EAAD,CAAkBsE,GAAG,mBAAmBjD,QAAQ,UAAUC,UAAU,QAAQC,QAAS,WA7DjE,KAA1BhB,GAIJG,EACED,EAAU0C,OAAO,CACfvB,KAAMX,EACNJ,aAAc,EACdgB,eAAgBtB,KAIpB0B,KAXEmB,MAAM,uEA4DE,oEAKJ,cAACG,EAAA,EAAD,UACE,cAACxB,EAAA,EAAD,UAAYP,cC9NxBgD,IAASC,OAAO,cAAC,EAAD,IAASrC,SAASC,eAAe,W","file":"static/js/main.4e0c453d.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, FormControl, Button, ListGroup, InputGroup } from \"react-bootstrap\";\n\nconst ShrinkNameButton = styled(Button)`\n  font-size: 0.4rem;\n`;\n\nfunction App() {\n  const [border, setBorder] = useState(18.0);\n\n  const [rotationNumberInputed, setRotationNumberInputed] = useState(\"\");\n  const [rotations, setRotations] = useState([]);\n  const [rotationUnitPrice, setRotationUnitPrice] = useState(0);\n  const [rotationRate, setRotationRate] = useState(0);\n  const [totalRotationNumber, setTotalRotationNumber] = useState(0);\n\n  const replenishmentAmount = 500;\n  const ratioOfReplenishmentAmountToThousandYen = 1000 / replenishmentAmount;\n\n  const rotationType = {\n    normal: \"normal\",\n    continueStart: \"continueStart\",\n    resetStart: \"resetStart\",\n  };\n\n  const $numberButtons = [\"7\", \"8\", \"9\", \"4\", \"5\", \"6\", \"1\", \"2\", \"3\", \"0\"].map((number) => (\n    <Button key={number} variant=\"primary\" className=\"col-4\" onClick={() => setRotationNumberInputed(rotationNumberInputed + number)}>\n      {number}\n    </Button>\n  ));\n\n  const $rotations = rotations.map((rotation, index) => {\n    let content = \"\";\n    if (rotation.type === rotationType.resetStart) {\n      content = `${rotation.rotationNumber} --start--`;\n    } else if (rotation.type === rotationType.continueStart) {\n      content = `${rotation.rotationNumber} > start`;\n    } else if (rotation.type === rotationType.normal) {\n      content = `${rotation.rotationNumber} ${rotation.rotationRateMostRecent} ${rotation.rotationRate}`;\n    }\n    return <ListGroup.Item key={index}>{content}</ListGroup.Item>;\n  });\n\n  useEffect(() => {\n    setRotationNumberInputed(\"0\");\n    const $resetStartButton = document.getElementById(\"resetStartButton\");\n    setTimeout(() => {\n      $resetStartButton.click();\n    }, 1);\n  }, []);\n\n  function changeBorder(event) {\n    setBorder(event.target.value);\n    setRotationUnitPrice(_calcRotationUnitPrice({ rotationRate }));\n  }\n  function changeRotationNumberInputed(event) {\n    setRotationNumberInputed(event.target.value);\n  }\n\n  function _isResetStarted() {\n    return rotations.length !== 0 && rotations[0].type === rotationType.resetStart;\n  }\n\n  function clearRotationNumberInputed() {\n    setRotationNumberInputed(\"\");\n  }\n\n  function _getWorkAmount() {\n    return (rotationUnitPrice * totalRotationNumber).toFixed(0);\n  }\n\n  const _calcRotationUnitPrice = ({ rotationRate }) => {\n    if (rotationRate === 0) return 0;\n    return (1000 / border - 1000 / rotationRate).toFixed(1);\n  };\n\n  function deleteOneRotation() {\n    const rotationsLength = rotations.length;\n\n    const rotationsDeletedOne = rotations.filter((rotation, index) => {\n      return index !== rotationsLength - 1;\n    });\n\n    if (rotationsDeletedOne.length > 0) {\n      const rotationNumberDiffShouldSub =\n        rotations[rotations.length - 1].rotationNumber - rotationsDeletedOne[rotationsDeletedOne.length - 1].rotationNumber;\n      setTotalRotationNumber(totalRotationNumber - rotationNumberDiffShouldSub);\n      const rotationRateNow = rotationsDeletedOne[rotationsDeletedOne.length - 1].rotationRate;\n      setRotationRate(rotationRateNow);\n      setRotationUnitPrice(_calcRotationUnitPrice({ rotationRate: rotationRateNow }));\n    }\n\n    setRotations(rotationsDeletedOne);\n  }\n\n  function _calcInvestmentCnt() {\n    let investmentCnt = 0;\n    rotations.forEach((rotation) => {\n      if (rotation.type !== rotationType.normal) return;\n\n      investmentCnt++;\n    });\n\n    return investmentCnt;\n  }\n\n  function rotation() {\n    if (_isResetStarted() === false) {\n      alert(`リセットスタートをしましょう`);\n      return;\n    }\n\n    const rotationNumberLast = rotations[rotations.length - 1].rotationNumber;\n\n    const rotationNumberDiffFromLast = rotationNumberInputed - rotationNumberLast;\n    const rotationRateMostRecent = (rotationNumberDiffFromLast * ratioOfReplenishmentAmountToThousandYen).toFixed(1);\n\n    const investmentCnt = _calcInvestmentCnt() + 1;\n    const ratioOfTotalInvestmentAmountToThousandYen = 1000 / (replenishmentAmount * investmentCnt);\n\n    const totalRotationNumberPrev = totalRotationNumber;\n    const totalRotationNumberNow = totalRotationNumberPrev + rotationNumberDiffFromLast;\n    setTotalRotationNumber(totalRotationNumberNow);\n    const rotationRateNow = (totalRotationNumberNow * ratioOfTotalInvestmentAmountToThousandYen).toFixed(1);\n\n    setRotationRate(rotationRateNow);\n    setRotationUnitPrice(_calcRotationUnitPrice({ rotationRate: rotationRateNow }));\n\n    setRotations(\n      rotations.concat({\n        type: rotationType.normal,\n        rotationRateMostRecent,\n        rotationRate: rotationRateNow,\n        rotationNumber: rotationNumberInputed,\n      })\n    );\n    clearRotationNumberInputed();\n  }\n\n  function continueStart() {\n    if (rotationNumberInputed === \"\") {\n      alert(`回転数を入力しましょう`);\n      return;\n    }\n\n    setRotations(\n      rotations.concat({\n        type: rotationType.continueStart,\n        rotationRate,\n        rotationNumber: rotationNumberInputed,\n      })\n    );\n\n    clearRotationNumberInputed();\n  }\n\n  function resetStart() {\n    if (rotationNumberInputed === \"\") {\n      alert(`回転数を入力しましょう`);\n      return;\n    }\n    setRotations(\n      rotations.concat({\n        type: rotationType.resetStart,\n        rotationRate: 0,\n        rotationNumber: rotationNumberInputed,\n      })\n    );\n\n    clearRotationNumberInputed();\n  }\n\n  return (\n    <div className=\"App\">\n      <Container className=\"pt-3\">\n        <Row>\n          <Col>\n            <InputGroup size=\"sm\" className=\"mb-3\">\n              <InputGroup.Prepend>\n                <InputGroup.Text>ボーダー</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl value={border} onChange={changeBorder} />\n            </InputGroup>\n\n            <p className=\"mb-0\">\n              回転単価：<span>{rotationUnitPrice}</span>\n            </p>\n            <p className=\"mb-0\">\n              総回転数：<span>{totalRotationNumber}</span>\n            </p>\n            <p className=\"mb-0\">\n              仕事量：<span>{_getWorkAmount()}</span>\n            </p>\n\n            <Button className=\"mb-1\" variant=\"primary\" onClick={() => deleteOneRotation()}>\n              1行削除\n            </Button>\n\n            <FormControl\n              className=\"mb-1\"\n              id=\"rotationNumberInput\"\n              value={rotationNumberInputed}\n              onChange={changeRotationNumberInputed}\n              placeholder=\"回転数入力\"\n            />\n\n            <Row className=\"m-0\">\n              {$numberButtons}\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => clearRotationNumberInputed()}>\n                C\n              </Button>\n              <Button variant=\"primary\" className=\"col-4\"></Button>\n              <Button variant=\"primary\" className=\"col-4\" onClick={() => rotation()}>\n                回転\n              </Button>\n              <ShrinkNameButton variant=\"primary\" className=\"col-4\" onClick={() => continueStart()}>\n                継続スタート\n              </ShrinkNameButton>\n              <ShrinkNameButton id=\"resetStartButton\" variant=\"primary\" className=\"col-4\" onClick={() => resetStart()}>\n                リセットスタート\n              </ShrinkNameButton>\n            </Row>\n          </Col>\n          <Col>\n            <ListGroup>{$rotations}</ListGroup>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}